{
 "type": "Program",
 "body": [
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "fastcall"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "fastcall",
        "raw": "\"fastcall\""
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "express"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "express",
        "raw": "'express'"
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "WebSocket"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "ws",
        "raw": "'ws'"
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "mmapfile"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "mmapfile",
        "raw": "'mmapfile'"
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "chokidar"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "chokidar",
        "raw": "'chokidar'"
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "pako"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "pako",
        "raw": "'pako'"
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "JSON5"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "json5",
        "raw": "'json5'"
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "http"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "http",
        "raw": "'http'"
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "url"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "url",
        "raw": "'url'"
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "fs"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "fs",
        "raw": "\"fs\""
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "path"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "path",
        "raw": "\"path\""
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "os"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "os",
        "raw": "\"os\""
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "ObjectPattern",
      "properties": [
       {
        "type": "Property",
        "key": {
         "type": "Identifier",
         "name": "exec"
        },
        "computed": false,
        "value": {
         "type": "Identifier",
         "name": "exec"
        },
        "kind": "init",
        "method": false,
        "shorthand": true
       },
       {
        "type": "Property",
        "key": {
         "type": "Identifier",
         "name": "execSync"
        },
        "computed": false,
        "value": {
         "type": "Identifier",
         "name": "execSync"
        },
        "kind": "init",
        "method": false,
        "shorthand": true
       },
       {
        "type": "Property",
        "key": {
         "type": "Identifier",
         "name": "spawn"
        },
        "computed": false,
        "value": {
         "type": "Identifier",
         "name": "spawn"
        },
        "kind": "init",
        "method": false,
        "shorthand": true
       },
       {
        "type": "Property",
        "key": {
         "type": "Identifier",
         "name": "spawnSync"
        },
        "computed": false,
        "value": {
         "type": "Identifier",
         "name": "spawnSync"
        },
        "kind": "init",
        "method": false,
        "shorthand": true
       },
       {
        "type": "Property",
        "key": {
         "type": "Identifier",
         "name": "fork"
        },
        "computed": false,
        "value": {
         "type": "Identifier",
         "name": "fork"
        },
        "kind": "init",
        "method": false,
        "shorthand": true
       }
      ]
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "child_process",
        "raw": "'child_process'"
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "execPromise"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "child-process-promise",
        "raw": "'child-process-promise'"
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "FunctionDeclaration",
   "id": {
    "type": "Identifier",
    "name": "random"
   },
   "params": [
    {
     "type": "Identifier",
     "name": "low"
    },
    {
     "type": "Identifier",
     "name": "high"
    }
   ],
   "body": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "ReturnStatement",
      "argument": {
       "type": "BinaryExpression",
       "operator": "+",
       "left": {
        "type": "BinaryExpression",
        "operator": "*",
        "left": {
         "type": "CallExpression",
         "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
           "type": "Identifier",
           "name": "Math"
          },
          "property": {
           "type": "Identifier",
           "name": "random"
          }
         },
         "arguments": []
        },
        "right": {
         "type": "BinaryExpression",
         "operator": "-",
         "left": {
          "type": "Identifier",
          "name": "high"
         },
         "right": {
          "type": "Identifier",
          "name": "low"
         }
        }
       },
       "right": {
        "type": "Identifier",
        "name": "low"
       }
      }
     }
    ]
   },
   "generator": false,
   "expression": false,
   "async": false
  },
  {
   "type": "FunctionDeclaration",
   "id": {
    "type": "Identifier",
    "name": "randomInt"
   },
   "params": [
    {
     "type": "Identifier",
     "name": "low"
    },
    {
     "type": "Identifier",
     "name": "high"
    }
   ],
   "body": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "ReturnStatement",
      "argument": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "Math"
        },
        "property": {
         "type": "Identifier",
         "name": "floor"
        }
       },
       "arguments": [
        {
         "type": "BinaryExpression",
         "operator": "+",
         "left": {
          "type": "BinaryExpression",
          "operator": "*",
          "left": {
           "type": "CallExpression",
           "callee": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
             "type": "Identifier",
             "name": "Math"
            },
            "property": {
             "type": "Identifier",
             "name": "random"
            }
           },
           "arguments": []
          },
          "right": {
           "type": "BinaryExpression",
           "operator": "-",
           "left": {
            "type": "Identifier",
            "name": "high"
           },
           "right": {
            "type": "Identifier",
            "name": "low"
           }
          }
         },
         "right": {
          "type": "Identifier",
          "name": "low"
         }
        }
       ]
      }
     }
    ]
   },
   "generator": false,
   "expression": false,
   "async": false
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "Identifier",
      "name": "console"
     },
     "property": {
      "type": "Identifier",
      "name": "log"
     }
    },
    "arguments": [
     {
      "type": "MemberExpression",
      "computed": false,
      "object": {
       "type": "Identifier",
       "name": "process"
      },
      "property": {
       "type": "Identifier",
       "name": "argv"
      }
     }
    ]
   }
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "libext"
     },
     "init": {
      "type": "ConditionalExpression",
      "test": {
       "type": "BinaryExpression",
       "operator": "==",
       "left": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "process"
        },
        "property": {
         "type": "Identifier",
         "name": "platform"
        }
       },
       "right": {
        "type": "Literal",
        "value": "win32",
        "raw": "\"win32\""
       }
      },
      "consequent": {
       "type": "Literal",
       "value": "dll",
       "raw": "\"dll\""
      },
      "alternate": {
       "type": "Literal",
       "value": "dylib",
       "raw": "\"dylib\""
      }
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "Identifier",
      "name": "process"
     },
     "property": {
      "type": "Identifier",
      "name": "chdir"
     }
    },
    "arguments": [
     {
      "type": "LogicalExpression",
      "operator": "||",
      "left": {
       "type": "MemberExpression",
       "computed": true,
       "object": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "process"
        },
        "property": {
         "type": "Identifier",
         "name": "argv"
        }
       },
       "property": {
        "type": "Literal",
        "value": 2,
        "raw": "2"
       }
      },
      "right": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "path"
        },
        "property": {
         "type": "Identifier",
         "name": "join"
        }
       },
       "arguments": [
        {
         "type": "Literal",
         "value": "..",
         "raw": "\"..\""
        },
        {
         "type": "Literal",
         "value": "alicenode_inhabitat",
         "raw": "\"alicenode_inhabitat\""
        }
       ]
      }
     }
    ]
   }
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "project_path"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "MemberExpression",
       "computed": false,
       "object": {
        "type": "Identifier",
        "name": "process"
       },
       "property": {
        "type": "Identifier",
        "name": "cwd"
       }
      },
      "arguments": []
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "server_path"
     },
     "init": {
      "type": "Identifier",
      "name": "__dirname"
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "client_path"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "MemberExpression",
       "computed": false,
       "object": {
        "type": "Identifier",
        "name": "path"
       },
       "property": {
        "type": "Identifier",
        "name": "join"
       }
      },
      "arguments": [
       {
        "type": "Identifier",
        "name": "server_path"
       },
       {
        "type": "Literal",
        "value": "client",
        "raw": "\"client\""
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "Identifier",
      "name": "console"
     },
     "property": {
      "type": "Identifier",
      "name": "log"
     }
    },
    "arguments": [
     {
      "type": "Literal",
      "value": "project_path",
      "raw": "\"project_path\""
     },
     {
      "type": "Identifier",
      "name": "project_path"
     }
    ]
   }
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "Identifier",
      "name": "console"
     },
     "property": {
      "type": "Identifier",
      "name": "log"
     }
    },
    "arguments": [
     {
      "type": "Literal",
      "value": "server_path",
      "raw": "\"server_path\""
     },
     {
      "type": "Identifier",
      "name": "server_path"
     }
    ]
   }
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "Identifier",
      "name": "console"
     },
     "property": {
      "type": "Identifier",
      "name": "log"
     }
    },
    "arguments": [
     {
      "type": "Literal",
      "value": "client_path",
      "raw": "\"client_path\""
     },
     {
      "type": "Identifier",
      "name": "client_path"
     }
    ]
   }
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "projectlib"
     },
     "init": {
      "type": "BinaryExpression",
      "operator": "+",
      "left": {
       "type": "Literal",
       "value": "project.",
       "raw": "\"project.\""
      },
      "right": {
       "type": "Identifier",
       "name": "libext"
      }
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "gitHash"
     },
     "init": null
    }
   ],
   "kind": "let"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "projectCPPVersion"
     },
     "init": null
    }
   ],
   "kind": "let"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "worktreepath"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "MemberExpression",
       "computed": false,
       "object": {
        "type": "Identifier",
        "name": "path"
       },
       "property": {
        "type": "Identifier",
        "name": "join"
       }
      },
      "arguments": [
       {
        "type": "Identifier",
        "name": "client_path"
       },
       {
        "type": "Literal",
        "value": "worktreeList.txt",
        "raw": "\"worktreeList.txt\""
       }
      ]
     }
    }
   ],
   "kind": "let"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "worktreeJSON"
     },
     "init": {
      "type": "ArrayExpression",
      "elements": []
     }
    }
   ],
   "kind": "let"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "commitMsg"
     },
     "init": {
      "type": "Literal",
      "value": "client updated project",
      "raw": "\"client updated project\""
     }
    }
   ],
   "kind": "let"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "terminate"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "terminate",
        "raw": "'terminate'"
       }
      ]
     }
    }
   ],
   "kind": "var"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "find"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "require"
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "find-process",
        "raw": "'find-process'"
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "IfStatement",
   "test": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "Identifier",
      "name": "fs"
     },
     "property": {
      "type": "Identifier",
      "name": "existsSync"
     }
    },
    "arguments": [
     {
      "type": "CallExpression",
      "callee": {
       "type": "MemberExpression",
       "computed": false,
       "object": {
        "type": "Identifier",
        "name": "path"
       },
       "property": {
        "type": "Identifier",
        "name": "join"
       }
      },
      "arguments": [
       {
        "type": "Identifier",
        "name": "project_path"
       },
       {
        "type": "Literal",
        "value": "userlist.json",
        "raw": "\"userlist.json\""
       }
      ]
     }
    ]
   },
   "consequent": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "console"
        },
        "property": {
         "type": "Identifier",
         "name": "log"
        }
       },
       "arguments": [
        {
         "type": "Literal",
         "value": "found userlist.json",
         "raw": "\"found userlist.json\""
        }
       ]
      }
     }
    ]
   },
   "alternate": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "fs"
        },
        "property": {
         "type": "Identifier",
         "name": "writeFileSync"
        }
       },
       "arguments": [
        {
         "type": "CallExpression",
         "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
           "type": "Identifier",
           "name": "path"
          },
          "property": {
           "type": "Identifier",
           "name": "join"
          }
         },
         "arguments": [
          {
           "type": "Identifier",
           "name": "project_path"
          },
          {
           "type": "Literal",
           "value": "userlist.json",
           "raw": "\"userlist.json\""
          }
         ]
        },
        {
         "type": "Literal",
         "value": "{}",
         "raw": "\"{}\""
        },
        {
         "type": "Literal",
         "value": "utf8",
         "raw": "'utf8'"
        }
       ]
      }
     },
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "console"
        },
        "property": {
         "type": "Identifier",
         "name": "log"
        }
       },
       "arguments": [
        {
         "type": "BinaryExpression",
         "operator": "+",
         "left": {
          "type": "Literal",
          "value": "created userlist.json on ",
          "raw": "\"created userlist.json on \""
         },
         "right": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "os"
           },
           "property": {
            "type": "Identifier",
            "name": "hostname"
           }
          },
          "arguments": []
         }
        }
       ]
      }
     }
    ]
   }
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "Identifier",
     "name": "pruneWorktree"
    },
    "arguments": []
   }
  },
  {
   "type": "FunctionDeclaration",
   "id": {
    "type": "Identifier",
    "name": "pruneWorktree"
   },
   "params": [],
   "body": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "Identifier",
        "name": "exec"
       },
       "arguments": [
        {
         "type": "Literal",
         "value": "git worktree prune",
         "raw": "\"git worktree prune\""
        },
        {
         "type": "ObjectExpression",
         "properties": [
          {
           "type": "Property",
           "key": {
            "type": "Identifier",
            "name": "cwd"
           },
           "computed": false,
           "value": {
            "type": "Identifier",
            "name": "project_path"
           },
           "kind": "init",
           "method": false,
           "shorthand": false
          }
         ]
        },
        {
         "type": "ArrowFunctionExpression",
         "id": null,
         "params": [],
         "body": {
          "type": "BlockStatement",
          "body": [
           {
            "type": "IfStatement",
            "test": {
             "type": "CallExpression",
             "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
               "type": "Identifier",
               "name": "fs"
              },
              "property": {
               "type": "Identifier",
               "name": "existsSync"
              }
             },
             "arguments": [
              {
               "type": "Identifier",
               "name": "worktreepath"
              }
             ]
            },
            "consequent": {
             "type": "BlockStatement",
             "body": [
              {
               "type": "ExpressionStatement",
               "expression": {
                "type": "CallExpression",
                "callee": {
                 "type": "MemberExpression",
                 "computed": false,
                 "object": {
                  "type": "Identifier",
                  "name": "fs"
                 },
                 "property": {
                  "type": "Identifier",
                  "name": "unlinkSync"
                 }
                },
                "arguments": [
                 {
                  "type": "Identifier",
                  "name": "worktreepath"
                 }
                ]
               }
              }
             ]
            },
            "alternate": null
           }
          ]
         },
         "generator": false,
         "expression": false,
         "async": false
        }
       ]
      }
     }
    ]
   },
   "generator": false,
   "expression": false,
   "async": false
  },
  {
   "type": "FunctionDeclaration",
   "id": {
    "type": "Identifier",
    "name": "project_build"
   },
   "params": [],
   "body": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "VariableDeclaration",
      "declarations": [
       {
        "type": "VariableDeclarator",
        "id": {
         "type": "Identifier",
         "name": "out"
        },
        "init": {
         "type": "Literal",
         "value": "",
         "raw": "\"\""
        }
       }
      ],
      "kind": "let"
     },
     {
      "type": "IfStatement",
      "test": {
       "type": "BinaryExpression",
       "operator": "==",
       "left": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "process"
        },
        "property": {
         "type": "Identifier",
         "name": "platform"
        }
       },
       "right": {
        "type": "Literal",
        "value": "win32",
        "raw": "\"win32\""
       }
      },
      "consequent": {
       "type": "BlockStatement",
       "body": [
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "AssignmentExpression",
          "operator": "=",
          "left": {
           "type": "Identifier",
           "name": "out"
          },
          "right": {
           "type": "CallExpression",
           "callee": {
            "type": "Identifier",
            "name": "execSync"
           },
           "arguments": [
            {
             "type": "BinaryExpression",
             "operator": "+",
             "left": {
              "type": "BinaryExpression",
              "operator": "+",
              "left": {
               "type": "Literal",
               "value": "build.bat \"",
               "raw": "'build.bat \"'"
              },
              "right": {
               "type": "Identifier",
               "name": "server_path"
              }
             },
             "right": {
              "type": "Literal",
              "value": "\"",
              "raw": "'\"'"
             }
            },
            {
             "type": "ObjectExpression",
             "properties": [
              {
               "type": "Property",
               "key": {
                "type": "Identifier",
                "name": "stdio"
               },
               "computed": false,
               "value": {
                "type": "Literal",
                "value": "inherit",
                "raw": "'inherit'"
               },
               "kind": "init",
               "method": false,
               "shorthand": false
              }
             ]
            }
           ]
          }
         }
        }
       ]
      },
      "alternate": {
       "type": "BlockStatement",
       "body": [
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "AssignmentExpression",
          "operator": "=",
          "left": {
           "type": "Identifier",
           "name": "out"
          },
          "right": {
           "type": "CallExpression",
           "callee": {
            "type": "Identifier",
            "name": "execSync"
           },
           "arguments": [
            {
             "type": "BinaryExpression",
             "operator": "+",
             "left": {
              "type": "BinaryExpression",
              "operator": "+",
              "left": {
               "type": "Literal",
               "value": "sh build.sh \"",
               "raw": "'sh build.sh \"'"
              },
              "right": {
               "type": "Identifier",
               "name": "server_path"
              }
             },
             "right": {
              "type": "Literal",
              "value": "\"",
              "raw": "'\"'"
             }
            },
            {
             "type": "ObjectExpression",
             "properties": [
              {
               "type": "Property",
               "key": {
                "type": "Identifier",
                "name": "stdio"
               },
               "computed": false,
               "value": {
                "type": "Literal",
                "value": "inherit",
                "raw": "'inherit'"
               },
               "kind": "init",
               "method": false,
               "shorthand": false
              }
             ]
            }
           ]
          }
         }
        }
       ]
      }
     },
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "console"
        },
        "property": {
         "type": "Identifier",
         "name": "log"
        }
       },
       "arguments": [
        {
         "type": "Literal",
         "value": "built project",
         "raw": "\"built project\""
        },
        {
         "type": "CallExpression",
         "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
           "type": "Identifier",
           "name": "out"
          },
          "property": {
           "type": "Identifier",
           "name": "toString"
          }
         },
         "arguments": []
        }
       ]
      }
     }
    ]
   },
   "generator": false,
   "expression": false,
   "async": false
  },
  {
   "type": "IfStatement",
   "test": {
    "type": "LogicalExpression",
    "operator": "||",
    "left": {
     "type": "UnaryExpression",
     "operator": "!",
     "argument": {
      "type": "CallExpression",
      "callee": {
       "type": "MemberExpression",
       "computed": false,
       "object": {
        "type": "Identifier",
        "name": "fs"
       },
       "property": {
        "type": "Identifier",
        "name": "existsSync"
       }
      },
      "arguments": [
       {
        "type": "Identifier",
        "name": "projectlib"
       }
      ]
     },
     "prefix": true
    },
    "right": {
     "type": "BinaryExpression",
     "operator": ">",
     "left": {
      "type": "MemberExpression",
      "computed": false,
      "object": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "fs"
        },
        "property": {
         "type": "Identifier",
         "name": "statSync"
        }
       },
       "arguments": [
        {
         "type": "Literal",
         "value": "project.cpp",
         "raw": "\"project.cpp\""
        }
       ]
      },
      "property": {
       "type": "Identifier",
       "name": "mtime"
      }
     },
     "right": {
      "type": "MemberExpression",
      "computed": false,
      "object": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "fs"
        },
        "property": {
         "type": "Identifier",
         "name": "statSync"
        }
       },
       "arguments": [
        {
         "type": "Identifier",
         "name": "projectlib"
        }
       ]
      },
      "property": {
       "type": "Identifier",
       "name": "mtime"
      }
     }
    }
   },
   "consequent": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "console"
        },
        "property": {
         "type": "Identifier",
         "name": "warn"
        }
       },
       "arguments": [
        {
         "type": "Literal",
         "value": "project lib is out of date, rebuilding",
         "raw": "\"project lib is out of date, rebuilding\""
        }
       ]
      }
     },
     {
      "type": "TryStatement",
      "block": {
       "type": "BlockStatement",
       "body": [
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "Identifier",
           "name": "project_build"
          },
          "arguments": []
         }
        }
       ]
      },
      "handler": {
       "type": "CatchClause",
       "param": {
        "type": "Identifier",
        "name": "e"
       },
       "body": {
        "type": "BlockStatement",
        "body": [
         {
          "type": "ExpressionStatement",
          "expression": {
           "type": "CallExpression",
           "callee": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
             "type": "Identifier",
             "name": "console"
            },
            "property": {
             "type": "Identifier",
             "name": "error"
            }
           },
           "arguments": [
            {
             "type": "Literal",
             "value": "ERROR",
             "raw": "\"ERROR\""
            },
            {
             "type": "MemberExpression",
             "computed": false,
             "object": {
              "type": "Identifier",
              "name": "e"
             },
             "property": {
              "type": "Identifier",
              "name": "message"
             }
            }
           ]
          }
         }
        ]
       }
      },
      "finalizer": null
     }
    ]
   },
   "alternate": null
  },
  {
   "type": "FunctionDeclaration",
   "id": {
    "type": "Identifier",
    "name": "git_add_and_commit"
   },
   "params": [],
   "body": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "TryStatement",
      "block": {
       "type": "BlockStatement",
       "body": [
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "Identifier",
           "name": "execSync"
          },
          "arguments": [
           {
            "type": "Literal",
            "value": "git add .",
            "raw": "'git add .'"
           },
           {
            "type": "ObjectExpression",
            "properties": [
             {
              "type": "Property",
              "key": {
               "type": "Identifier",
               "name": "cwd"
              },
              "computed": false,
              "value": {
               "type": "Identifier",
               "name": "project_path"
              },
              "kind": "init",
              "method": false,
              "shorthand": false
             }
            ]
           },
           {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": [],
            "body": {
             "type": "BlockStatement",
             "body": [
              {
               "type": "ExpressionStatement",
               "expression": {
                "type": "CallExpression",
                "callee": {
                 "type": "MemberExpression",
                 "computed": false,
                 "object": {
                  "type": "Identifier",
                  "name": "console"
                 },
                 "property": {
                  "type": "Identifier",
                  "name": "log"
                 }
                },
                "arguments": [
                 {
                  "type": "Literal",
                  "value": "git added",
                  "raw": "\"git added\""
                 }
                ]
               }
              }
             ]
            },
            "generator": false,
            "expression": false,
            "async": false
           }
          ]
         }
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "Identifier",
           "name": "execSync"
          },
          "arguments": [
           {
            "type": "BinaryExpression",
            "operator": "+",
            "left": {
             "type": "BinaryExpression",
             "operator": "+",
             "left": {
              "type": "Literal",
              "value": "git commit -m \"",
              "raw": "'git commit -m \\\"'"
             },
             "right": {
              "type": "Identifier",
              "name": "commitMsg"
             }
            },
            "right": {
             "type": "Literal",
             "value": "\"",
             "raw": "'\\\"'"
            }
           },
           {
            "type": "ObjectExpression",
            "properties": [
             {
              "type": "Property",
              "key": {
               "type": "Identifier",
               "name": "cwd"
              },
              "computed": false,
              "value": {
               "type": "Identifier",
               "name": "project_path"
              },
              "kind": "init",
              "method": false,
              "shorthand": false
             }
            ]
           },
           {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": [],
            "body": {
             "type": "BlockStatement",
             "body": [
              {
               "type": "ExpressionStatement",
               "expression": {
                "type": "CallExpression",
                "callee": {
                 "type": "MemberExpression",
                 "computed": false,
                 "object": {
                  "type": "Identifier",
                  "name": "console"
                 },
                 "property": {
                  "type": "Identifier",
                  "name": "log"
                 }
                },
                "arguments": [
                 {
                  "type": "Literal",
                  "value": "git committed",
                  "raw": "\"git committed\""
                 }
                ]
               }
              }
             ]
            },
            "generator": false,
            "expression": false,
            "async": false
           }
          ]
         }
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "Identifier",
           "name": "execSync"
          },
          "arguments": [
           {
            "type": "Literal",
            "value": "git status",
            "raw": "'git status'"
           },
           {
            "type": "ObjectExpression",
            "properties": [
             {
              "type": "Property",
              "key": {
               "type": "Identifier",
               "name": "cwd"
              },
              "computed": false,
              "value": {
               "type": "Identifier",
               "name": "project_path"
              },
              "kind": "init",
              "method": false,
              "shorthand": false
             }
            ]
           },
           {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": [
             {
              "type": "Identifier",
              "name": "stdout"
             }
            ],
            "body": {
             "type": "BlockStatement",
             "body": [
              {
               "type": "ExpressionStatement",
               "expression": {
                "type": "CallExpression",
                "callee": {
                 "type": "MemberExpression",
                 "computed": false,
                 "object": {
                  "type": "Identifier",
                  "name": "console"
                 },
                 "property": {
                  "type": "Identifier",
                  "name": "log"
                 }
                },
                "arguments": [
                 {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                   "type": "Literal",
                   "value": "\n\n\n\n\n\n\n",
                   "raw": "\"\\n\\n\\n\\n\\n\\n\\n\""
                  },
                  "right": {
                   "type": "Identifier",
                   "name": "stdout"
                  }
                 }
                ]
               }
              }
             ]
            },
            "generator": false,
            "expression": false,
            "async": false
           }
          ]
         }
        }
       ]
      },
      "handler": {
       "type": "CatchClause",
       "param": {
        "type": "Identifier",
        "name": "e"
       },
       "body": {
        "type": "BlockStatement",
        "body": [
         {
          "type": "ExpressionStatement",
          "expression": {
           "type": "CallExpression",
           "callee": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
             "type": "Identifier",
             "name": "console"
            },
            "property": {
             "type": "Identifier",
             "name": "error"
            }
           },
           "arguments": [
            {
             "type": "CallExpression",
             "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
               "type": "Identifier",
               "name": "e"
              },
              "property": {
               "type": "Identifier",
               "name": "toString"
              }
             },
             "arguments": []
            }
           ]
          }
         }
        ]
       }
      },
      "finalizer": null
     }
    ]
   },
   "generator": false,
   "expression": false,
   "async": false
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "alice"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "spawn"
      },
      "arguments": [
       {
        "type": "CallExpression",
        "callee": {
         "type": "MemberExpression",
         "computed": false,
         "object": {
          "type": "Identifier",
          "name": "path"
         },
         "property": {
          "type": "Identifier",
          "name": "join"
         }
        },
        "arguments": [
         {
          "type": "Identifier",
          "name": "__dirname"
         },
         {
          "type": "Literal",
          "value": "alice",
          "raw": "\"alice\""
         }
        ]
       },
       {
        "type": "ArrayExpression",
        "elements": [
         {
          "type": "Identifier",
          "name": "projectlib"
         }
        ]
       },
       {
        "type": "ObjectExpression",
        "properties": [
         {
          "type": "Property",
          "key": {
           "type": "Identifier",
           "name": "cwd"
          },
          "computed": false,
          "value": {
           "type": "Identifier",
           "name": "project_path"
          },
          "kind": "init",
          "method": false,
          "shorthand": false
         }
        ]
       }
      ]
     }
    }
   ],
   "kind": "let"
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "Identifier",
      "name": "alice"
     },
     "property": {
      "type": "Identifier",
      "name": "on"
     }
    },
    "arguments": [
     {
      "type": "Literal",
      "value": "message",
      "raw": "\"message\""
     },
     {
      "type": "FunctionExpression",
      "id": null,
      "params": [
       {
        "type": "Identifier",
        "name": "data"
       }
      ],
      "body": {
       "type": "BlockStatement",
       "body": [
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "console"
           },
           "property": {
            "type": "Identifier",
            "name": "log"
           }
          },
          "arguments": [
           {
            "type": "Literal",
            "value": "msg",
            "raw": "\"msg\""
           },
           {
            "type": "CallExpression",
            "callee": {
             "type": "MemberExpression",
             "computed": false,
             "object": {
              "type": "Identifier",
              "name": "data"
             },
             "property": {
              "type": "Identifier",
              "name": "toString"
             }
            },
            "arguments": []
           }
          ]
         }
        }
       ]
      },
      "generator": false,
      "expression": false,
      "async": false
     }
    ]
   }
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "MemberExpression",
      "computed": false,
      "object": {
       "type": "Identifier",
       "name": "alice"
      },
      "property": {
       "type": "Identifier",
       "name": "stdout"
      }
     },
     "property": {
      "type": "Identifier",
      "name": "pipe"
     }
    },
    "arguments": [
     {
      "type": "MemberExpression",
      "computed": false,
      "object": {
       "type": "Identifier",
       "name": "process"
      },
      "property": {
       "type": "Identifier",
       "name": "stdout"
      }
     }
    ]
   }
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "MemberExpression",
      "computed": false,
      "object": {
       "type": "Identifier",
       "name": "alice"
      },
      "property": {
       "type": "Identifier",
       "name": "stderr"
      }
     },
     "property": {
      "type": "Identifier",
      "name": "pipe"
     }
    },
    "arguments": [
     {
      "type": "MemberExpression",
      "computed": false,
      "object": {
       "type": "Identifier",
       "name": "process"
      },
      "property": {
       "type": "Identifier",
       "name": "stderr"
      }
     }
    ]
   }
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "Identifier",
      "name": "alice"
     },
     "property": {
      "type": "Identifier",
      "name": "on"
     }
    },
    "arguments": [
     {
      "type": "Literal",
      "value": "exit",
      "raw": "'exit'"
     },
     {
      "type": "FunctionExpression",
      "id": null,
      "params": [
       {
        "type": "Identifier",
        "name": "code"
       }
      ],
      "body": {
       "type": "BlockStatement",
       "body": [
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "console"
           },
           "property": {
            "type": "Identifier",
            "name": "log"
           }
          },
          "arguments": [
           {
            "type": "Literal",
            "value": "alice exit code",
            "raw": "\"alice exit code\""
           },
           {
            "type": "Identifier",
            "name": "code"
           }
          ]
         }
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "AssignmentExpression",
          "operator": "=",
          "left": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "process"
           },
           "property": {
            "type": "Identifier",
            "name": "exitCode"
           }
          },
          "right": {
           "type": "Literal",
           "value": 1,
           "raw": "1"
          }
         }
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "process"
           },
           "property": {
            "type": "Identifier",
            "name": "exit"
           }
          },
          "arguments": [
           {
            "type": "Identifier",
            "name": "code"
           }
          ]
         }
        }
       ]
      },
      "generator": false,
      "expression": false,
      "async": false
     }
    ]
   }
  },
  {
   "type": "FunctionDeclaration",
   "id": {
    "type": "Identifier",
    "name": "alice_command"
   },
   "params": [
    {
     "type": "Identifier",
     "name": "command"
    },
    {
     "type": "Identifier",
     "name": "arg"
    }
   ],
   "body": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "VariableDeclaration",
      "declarations": [
       {
        "type": "VariableDeclarator",
        "id": {
         "type": "Identifier",
         "name": "msg"
        },
        "init": {
         "type": "BinaryExpression",
         "operator": "+",
         "left": {
          "type": "BinaryExpression",
          "operator": "+",
          "left": {
           "type": "BinaryExpression",
           "operator": "+",
           "left": {
            "type": "Identifier",
            "name": "command"
           },
           "right": {
            "type": "Literal",
            "value": "?",
            "raw": "\"?\""
           }
          },
          "right": {
           "type": "Identifier",
           "name": "arg"
          }
         },
         "right": {
          "type": "Literal",
          "value": "\u0000",
          "raw": "\"\\0\""
         }
        }
       }
      ],
      "kind": "let"
     },
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "console"
        },
        "property": {
         "type": "Identifier",
         "name": "log"
        }
       },
       "arguments": [
        {
         "type": "Literal",
         "value": "sending alice",
         "raw": "\"sending alice\""
        },
        {
         "type": "Identifier",
         "name": "msg"
        }
       ]
      }
     },
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "MemberExpression",
         "computed": false,
         "object": {
          "type": "Identifier",
          "name": "alice"
         },
         "property": {
          "type": "Identifier",
          "name": "stdin"
         }
        },
        "property": {
         "type": "Identifier",
         "name": "write"
        }
       },
       "arguments": [
        {
         "type": "BinaryExpression",
         "operator": "+",
         "left": {
          "type": "BinaryExpression",
          "operator": "+",
          "left": {
           "type": "BinaryExpression",
           "operator": "+",
           "left": {
            "type": "Identifier",
            "name": "command"
           },
           "right": {
            "type": "Literal",
            "value": "?",
            "raw": "\"?\""
           }
          },
          "right": {
           "type": "Identifier",
           "name": "arg"
          }
         },
         "right": {
          "type": "Literal",
          "value": "\u0000",
          "raw": "\"\\0\""
         }
        }
       ]
      }
     }
    ]
   },
   "generator": false,
   "expression": false,
   "async": false
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "statebuf"
     },
     "init": null
    }
   ],
   "kind": "let"
  },
  {
   "type": "TryStatement",
   "block": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "AssignmentExpression",
       "operator": "=",
       "left": {
        "type": "Identifier",
        "name": "statebuf"
       },
       "right": {
        "type": "CallExpression",
        "callee": {
         "type": "MemberExpression",
         "computed": false,
         "object": {
          "type": "Identifier",
          "name": "mmapfile"
         },
         "property": {
          "type": "Identifier",
          "name": "openSync"
         }
        },
        "arguments": [
         {
          "type": "Literal",
          "value": "state.bin",
          "raw": "\"state.bin\""
         },
         {
          "type": "MemberExpression",
          "computed": false,
          "object": {
           "type": "CallExpression",
           "callee": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
             "type": "Identifier",
             "name": "fs"
            },
            "property": {
             "type": "Identifier",
             "name": "statSync"
            }
           },
           "arguments": [
            {
             "type": "Literal",
             "value": "state.bin",
             "raw": "\"state.bin\""
            }
           ]
          },
          "property": {
           "type": "Identifier",
           "name": "size"
          }
         },
         {
          "type": "Literal",
          "value": "r+",
          "raw": "\"r+\""
         }
        ]
       }
      }
     },
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "Identifier",
         "name": "console"
        },
        "property": {
         "type": "Identifier",
         "name": "log"
        }
       },
       "arguments": [
        {
         "type": "BinaryExpression",
         "operator": "+",
         "left": {
          "type": "Literal",
          "value": "mapped state.bin, size ",
          "raw": "\"mapped state.bin, size \""
         },
         "right": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
           "type": "Identifier",
           "name": "statebuf"
          },
          "property": {
           "type": "Identifier",
           "name": "byteLength"
          }
         }
        }
       ]
      }
     },
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "Identifier",
        "name": "setInterval"
       },
       "arguments": [
        {
         "type": "FunctionExpression",
         "id": null,
         "params": [],
         "body": {
          "type": "BlockStatement",
          "body": [
           {
            "type": "VariableDeclaration",
            "declarations": [
             {
              "type": "VariableDeclarator",
              "id": {
               "type": "Identifier",
               "name": "idx"
              },
              "init": {
               "type": "BinaryExpression",
               "operator": "*",
               "left": {
                "type": "CallExpression",
                "callee": {
                 "type": "Identifier",
                 "name": "randomInt"
                },
                "arguments": [
                 {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                 },
                 {
                  "type": "Literal",
                  "value": 10,
                  "raw": "10"
                 }
                ]
               },
               "right": {
                "type": "BinaryExpression",
                "operator": "*",
                "left": {
                 "type": "Literal",
                 "value": 4,
                 "raw": "4"
                },
                "right": {
                 "type": "Literal",
                 "value": 3,
                 "raw": "3"
                }
               }
              }
             }
            ],
            "kind": "let"
           },
           {
            "type": "VariableDeclaration",
            "declarations": [
             {
              "type": "VariableDeclarator",
              "id": {
               "type": "Identifier",
               "name": "v"
              },
              "init": {
               "type": "CallExpression",
               "callee": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                 "type": "Identifier",
                 "name": "statebuf"
                },
                "property": {
                 "type": "Identifier",
                 "name": "readFloatLE"
                }
               },
               "arguments": [
                {
                 "type": "Identifier",
                 "name": "idx"
                }
               ]
              }
             }
            ],
            "kind": "let"
           },
           {
            "type": "ExpressionStatement",
            "expression": {
             "type": "AssignmentExpression",
             "operator": "=",
             "left": {
              "type": "Identifier",
              "name": "v"
             },
             "right": {
              "type": "BinaryExpression",
              "operator": "+",
              "left": {
               "type": "Identifier",
               "name": "v"
              },
              "right": {
               "type": "Literal",
               "value": 0.01,
               "raw": "0.01"
              }
             }
            }
           },
           {
            "type": "IfStatement",
            "test": {
             "type": "BinaryExpression",
             "operator": ">",
             "left": {
              "type": "Identifier",
              "name": "v"
             },
             "right": {
              "type": "Literal",
              "value": 1,
              "raw": "1."
             }
            },
            "consequent": {
             "type": "ExpressionStatement",
             "expression": {
              "type": "AssignmentExpression",
              "operator": "-=",
              "left": {
               "type": "Identifier",
               "name": "v"
              },
              "right": {
               "type": "Literal",
               "value": 2,
               "raw": "2."
              }
             }
            },
            "alternate": null
           },
           {
            "type": "IfStatement",
            "test": {
             "type": "BinaryExpression",
             "operator": "<",
             "left": {
              "type": "Identifier",
              "name": "v"
             },
             "right": {
              "type": "UnaryExpression",
              "operator": "-",
              "argument": {
               "type": "Literal",
               "value": 1,
               "raw": "1."
              },
              "prefix": true
             }
            },
            "consequent": {
             "type": "ExpressionStatement",
             "expression": {
              "type": "AssignmentExpression",
              "operator": "+=",
              "left": {
               "type": "Identifier",
               "name": "v"
              },
              "right": {
               "type": "Literal",
               "value": 2,
               "raw": "2."
              }
             }
            },
            "alternate": null
           }
          ]
         },
         "generator": false,
         "expression": false,
         "async": false
        },
        {
         "type": "BinaryExpression",
         "operator": "/",
         "left": {
          "type": "Literal",
          "value": 1000,
          "raw": "1000"
         },
         "right": {
          "type": "Literal",
          "value": 120,
          "raw": "120"
         }
        }
       ]
      }
     }
    ]
   },
   "handler": {
    "type": "CatchClause",
    "param": {
     "type": "Identifier",
     "name": "e"
    },
    "body": {
     "type": "BlockStatement",
     "body": [
      {
       "type": "ExpressionStatement",
       "expression": {
        "type": "CallExpression",
        "callee": {
         "type": "MemberExpression",
         "computed": false,
         "object": {
          "type": "Identifier",
          "name": "console"
         },
         "property": {
          "type": "Identifier",
          "name": "error"
         }
        },
        "arguments": [
         {
          "type": "Literal",
          "value": "failed to map the state.bin:",
          "raw": "\"failed to map the state.bin:\""
         },
         {
          "type": "MemberExpression",
          "computed": false,
          "object": {
           "type": "Identifier",
           "name": "e"
          },
          "property": {
           "type": "Identifier",
           "name": "message"
          }
         }
        ]
       }
      }
     ]
    }
   },
   "finalizer": null
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "sessionId"
     },
     "init": {
      "type": "Literal",
      "value": 0,
      "raw": "0"
     }
    }
   ],
   "kind": "let"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "sessions"
     },
     "init": {
      "type": "ArrayExpression",
      "elements": []
     }
    }
   ],
   "kind": "let"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "app"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "Identifier",
       "name": "express"
      },
      "arguments": []
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "Identifier",
      "name": "app"
     },
     "property": {
      "type": "Identifier",
      "name": "use"
     }
    },
    "arguments": [
     {
      "type": "CallExpression",
      "callee": {
       "type": "MemberExpression",
       "computed": false,
       "object": {
        "type": "Identifier",
        "name": "express"
       },
       "property": {
        "type": "Identifier",
        "name": "static"
       }
      },
      "arguments": [
       {
        "type": "Identifier",
        "name": "client_path"
       }
      ]
     }
    ]
   }
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "Identifier",
      "name": "app"
     },
     "property": {
      "type": "Identifier",
      "name": "get"
     }
    },
    "arguments": [
     {
      "type": "Literal",
      "value": "/",
      "raw": "'/'"
     },
     {
      "type": "FunctionExpression",
      "id": null,
      "params": [
       {
        "type": "Identifier",
        "name": "req"
       },
       {
        "type": "Identifier",
        "name": "res"
       }
      ],
      "body": {
       "type": "BlockStatement",
       "body": [
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "res"
           },
           "property": {
            "type": "Identifier",
            "name": "sendFile"
           }
          },
          "arguments": [
           {
            "type": "CallExpression",
            "callee": {
             "type": "MemberExpression",
             "computed": false,
             "object": {
              "type": "Identifier",
              "name": "path"
             },
             "property": {
              "type": "Identifier",
              "name": "join"
             }
            },
            "arguments": [
             {
              "type": "Identifier",
              "name": "client_path"
             },
             {
              "type": "Literal",
              "value": "index.html",
              "raw": "'index.html'"
             }
            ]
           }
          ]
         }
        }
       ]
      },
      "generator": false,
      "expression": false,
      "async": false
     }
    ]
   }
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "server"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "MemberExpression",
       "computed": false,
       "object": {
        "type": "Identifier",
        "name": "http"
       },
       "property": {
        "type": "Identifier",
        "name": "createServer"
       }
      },
      "arguments": [
       {
        "type": "Identifier",
        "name": "app"
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "wss"
     },
     "init": {
      "type": "NewExpression",
      "callee": {
       "type": "MemberExpression",
       "computed": false,
       "object": {
        "type": "Identifier",
        "name": "WebSocket"
       },
       "property": {
        "type": "Identifier",
        "name": "Server"
       }
      },
      "arguments": [
       {
        "type": "ObjectExpression",
        "properties": [
         {
          "type": "Property",
          "key": {
           "type": "Identifier",
           "name": "server"
          },
          "computed": false,
          "value": {
           "type": "Identifier",
           "name": "server"
          },
          "kind": "init",
          "method": false,
          "shorthand": true
         }
        ]
       }
      ]
     }
    }
   ],
   "kind": "const"
  },
  {
   "type": "FunctionDeclaration",
   "id": {
    "type": "Identifier",
    "name": "send_all_clients"
   },
   "params": [
    {
     "type": "Identifier",
     "name": "msg"
    }
   ],
   "body": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "MemberExpression",
        "computed": false,
        "object": {
         "type": "MemberExpression",
         "computed": false,
         "object": {
          "type": "Identifier",
          "name": "wss"
         },
         "property": {
          "type": "Identifier",
          "name": "clients"
         }
        },
        "property": {
         "type": "Identifier",
         "name": "forEach"
        }
       },
       "arguments": [
        {
         "type": "FunctionExpression",
         "id": {
          "type": "Identifier",
          "name": "each"
         },
         "params": [
          {
           "type": "Identifier",
           "name": "client"
          }
         ],
         "body": {
          "type": "BlockStatement",
          "body": [
           {
            "type": "ExpressionStatement",
            "expression": {
             "type": "CallExpression",
             "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
               "type": "Identifier",
               "name": "client"
              },
              "property": {
               "type": "Identifier",
               "name": "send"
              }
             },
             "arguments": [
              {
               "type": "Identifier",
               "name": "msg"
              }
             ]
            }
           }
          ]
         },
         "generator": false,
         "expression": false,
         "async": false
        }
       ]
      }
     }
    ]
   },
   "generator": false,
   "expression": false,
   "async": false
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "Identifier",
      "name": "wss"
     },
     "property": {
      "type": "Identifier",
      "name": "on"
     }
    },
    "arguments": [
     {
      "type": "Literal",
      "value": "connection",
      "raw": "'connection'"
     },
     {
      "type": "FunctionExpression",
      "id": null,
      "params": [
       {
        "type": "Identifier",
        "name": "ws"
       },
       {
        "type": "Identifier",
        "name": "req"
       }
      ],
      "body": {
       "type": "BlockStatement",
       "body": [
        {
         "type": "VariableDeclaration",
         "declarations": [
          {
           "type": "VariableDeclarator",
           "id": {
            "type": "Identifier",
            "name": "per_session_data"
           },
           "init": {
            "type": "ObjectExpression",
            "properties": [
             {
              "type": "Property",
              "key": {
               "type": "Identifier",
               "name": "id"
              },
              "computed": false,
              "value": {
               "type": "UpdateExpression",
               "operator": "++",
               "argument": {
                "type": "Identifier",
                "name": "sessionId"
               },
               "prefix": false
              },
              "kind": "init",
              "method": false,
              "shorthand": false
             },
             {
              "type": "Property",
              "key": {
               "type": "Identifier",
               "name": "socket"
              },
              "computed": false,
              "value": {
               "type": "Identifier",
               "name": "ws"
              },
              "kind": "init",
              "method": false,
              "shorthand": false
             }
            ]
           }
          }
         ],
         "kind": "let"
        },
        {
         "type": "VariableDeclaration",
         "declarations": [
          {
           "type": "VariableDeclarator",
           "id": {
            "type": "Identifier",
            "name": "userlist"
           },
           "init": {
            "type": "CallExpression",
            "callee": {
             "type": "MemberExpression",
             "computed": false,
             "object": {
              "type": "Identifier",
              "name": "JSON"
             },
             "property": {
              "type": "Identifier",
              "name": "parse"
             }
            },
            "arguments": [
             {
              "type": "CallExpression",
              "callee": {
               "type": "MemberExpression",
               "computed": false,
               "object": {
                "type": "Identifier",
                "name": "fs"
               },
               "property": {
                "type": "Identifier",
                "name": "readFileSync"
               }
              },
              "arguments": [
               {
                "type": "CallExpression",
                "callee": {
                 "type": "MemberExpression",
                 "computed": false,
                 "object": {
                  "type": "Identifier",
                  "name": "path"
                 },
                 "property": {
                  "type": "Identifier",
                  "name": "join"
                 }
                },
                "arguments": [
                 {
                  "type": "Identifier",
                  "name": "project_path"
                 },
                 {
                  "type": "Literal",
                  "value": "userlist.json",
                  "raw": "\"userlist.json\""
                 }
                ]
               },
               {
                "type": "Literal",
                "value": "utf8",
                "raw": "'utf8'"
               }
              ]
             }
            ]
           }
          }
         ],
         "kind": "let"
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "ws"
           },
           "property": {
            "type": "Identifier",
            "name": "send"
           }
          },
          "arguments": [
           {
            "type": "BinaryExpression",
            "operator": "+",
            "left": {
             "type": "Literal",
             "value": "setUserList?",
             "raw": "\"setUserList?\""
            },
            "right": {
             "type": "CallExpression",
             "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
               "type": "Identifier",
               "name": "JSON"
              },
              "property": {
               "type": "Identifier",
               "name": "stringify"
              }
             },
             "arguments": [
              {
               "type": "Identifier",
               "name": "userlist"
              }
             ]
            }
           }
          ]
         }
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "ws"
           },
           "property": {
            "type": "Identifier",
            "name": "send"
           }
          },
          "arguments": [
           {
            "type": "BinaryExpression",
            "operator": "+",
            "left": {
             "type": "Literal",
             "value": "currentVersion?",
             "raw": "\"currentVersion?\""
            },
            "right": {
             "type": "CallExpression",
             "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
               "type": "Identifier",
               "name": "fs"
              },
              "property": {
               "type": "Identifier",
               "name": "readFileSync"
              }
             },
             "arguments": [
              {
               "type": "Literal",
               "value": "project.cpp",
               "raw": "\"project.cpp\""
              },
              {
               "type": "Literal",
               "value": "utf8",
               "raw": "\"utf8\""
              }
             ]
            }
           }
          ]
         }
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "Identifier",
           "name": "exec"
          },
          "arguments": [
           {
            "type": "Literal",
            "value": "git branch -v",
            "raw": "'git branch -v'"
           },
           {
            "type": "ObjectExpression",
            "properties": [
             {
              "type": "Property",
              "key": {
               "type": "Identifier",
               "name": "cwd"
              },
              "computed": false,
              "value": {
               "type": "Identifier",
               "name": "project_path"
              },
              "kind": "init",
              "method": false,
              "shorthand": false
             }
            ]
           },
           {
            "type": "ArrowFunctionExpression",
            "id": null,
            "params": [
             {
              "type": "Identifier",
              "name": "stdout"
             },
             {
              "type": "Identifier",
              "name": "err"
             },
             {
              "type": "Identifier",
              "name": "stderr"
             }
            ],
            "body": {
             "type": "BlockStatement",
             "body": [
              {
               "type": "ExpressionStatement",
               "expression": {
                "type": "CallExpression",
                "callee": {
                 "type": "MemberExpression",
                 "computed": false,
                 "object": {
                  "type": "Identifier",
                  "name": "ws"
                 },
                 "property": {
                  "type": "Identifier",
                  "name": "send"
                 }
                },
                "arguments": [
                 {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                   "type": "Literal",
                   "value": "setBranchList?",
                   "raw": "\"setBranchList?\""
                  },
                  "right": {
                   "type": "Identifier",
                   "name": "err"
                  }
                 }
                ]
               }
              }
             ]
            },
            "generator": false,
            "expression": false,
            "async": false
           }
          ]
         }
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "AssignmentExpression",
          "operator": "=",
          "left": {
           "type": "MemberExpression",
           "computed": true,
           "object": {
            "type": "Identifier",
            "name": "sessions"
           },
           "property": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
             "type": "Identifier",
             "name": "per_session_data"
            },
            "property": {
             "type": "Identifier",
             "name": "id"
            }
           }
          },
          "right": {
           "type": "Identifier",
           "name": "per_session_data"
          }
         }
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "console"
           },
           "property": {
            "type": "Identifier",
            "name": "log"
           }
          },
          "arguments": [
           {
            "type": "BinaryExpression",
            "operator": "+",
            "left": {
             "type": "Literal",
             "value": "server received a connection, new session ",
             "raw": "\"server received a connection, new session \""
            },
            "right": {
             "type": "MemberExpression",
             "computed": false,
             "object": {
              "type": "Identifier",
              "name": "per_session_data"
             },
             "property": {
              "type": "Identifier",
              "name": "id"
             }
            }
           }
          ]
         }
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "console"
           },
           "property": {
            "type": "Identifier",
            "name": "log"
           }
          },
          "arguments": [
           {
            "type": "BinaryExpression",
            "operator": "+",
            "left": {
             "type": "BinaryExpression",
             "operator": "+",
             "left": {
              "type": "Literal",
              "value": "server has ",
              "raw": "\"server has \""
             },
             "right": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
               "type": "MemberExpression",
               "computed": false,
               "object": {
                "type": "Identifier",
                "name": "wss"
               },
               "property": {
                "type": "Identifier",
                "name": "clients"
               }
              },
              "property": {
               "type": "Identifier",
               "name": "size"
              }
             }
            },
            "right": {
             "type": "Literal",
             "value": " connected clients",
             "raw": "\" connected clients\""
            }
           }
          ]
         }
        },
        {
         "type": "VariableDeclaration",
         "declarations": [
          {
           "type": "VariableDeclarator",
           "id": {
            "type": "Identifier",
            "name": "location"
           },
           "init": {
            "type": "CallExpression",
            "callee": {
             "type": "MemberExpression",
             "computed": false,
             "object": {
              "type": "Identifier",
              "name": "url"
             },
             "property": {
              "type": "Identifier",
              "name": "parse"
             }
            },
            "arguments": [
             {
              "type": "MemberExpression",
              "computed": false,
              "object": {
               "type": "Identifier",
               "name": "req"
              },
              "property": {
               "type": "Identifier",
               "name": "url"
              }
             },
             {
              "type": "Literal",
              "value": true,
              "raw": "true"
             }
            ]
           }
          }
         ],
         "kind": "const"
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "ws"
           },
           "property": {
            "type": "Identifier",
            "name": "on"
           }
          },
          "arguments": [
           {
            "type": "Literal",
            "value": "message",
            "raw": "'message'"
           },
           {
            "type": "FunctionExpression",
            "id": null,
            "params": [
             {
              "type": "Identifier",
              "name": "message"
             }
            ],
            "body": {
             "type": "BlockStatement",
             "body": [
              {
               "type": "VariableDeclaration",
               "declarations": [
                {
                 "type": "VariableDeclarator",
                 "id": {
                  "type": "Identifier",
                  "name": "userName"
                 },
                 "init": null
                }
               ],
               "kind": "var"
              },
              {
               "type": "VariableDeclaration",
               "declarations": [
                {
                 "type": "VariableDeclarator",
                 "id": {
                  "type": "Identifier",
                  "name": "userWorktree"
                 },
                 "init": null
                }
               ],
               "kind": "var"
              },
              {
               "type": "IfStatement",
               "test": {
                "type": "CallExpression",
                "callee": {
                 "type": "MemberExpression",
                 "computed": false,
                 "object": {
                  "type": "Identifier",
                  "name": "message"
                 },
                 "property": {
                  "type": "Identifier",
                  "name": "includes"
                 }
                },
                "arguments": [
                 {
                  "type": "Literal",
                  "value": "getCurrentBranch",
                  "raw": "\"getCurrentBranch\""
                 }
                ]
               },
               "consequent": {
                "type": "BlockStatement",
                "body": [
                 {
                  "type": "ExpressionStatement",
                  "expression": {
                   "type": "CallExpression",
                   "callee": {
                    "type": "Identifier",
                    "name": "exec"
                   },
                   "arguments": [
                    {
                     "type": "Literal",
                     "value": "git rev-parse --abbrev-ref HEAD",
                     "raw": "\"git rev-parse --abbrev-ref HEAD\""
                    },
                    {
                     "type": "ObjectExpression",
                     "properties": [
                      {
                       "type": "Property",
                       "key": {
                        "type": "Identifier",
                        "name": "cwd"
                       },
                       "computed": false,
                       "value": {
                        "type": "Identifier",
                        "name": "project_path"
                       },
                       "kind": "init",
                       "method": false,
                       "shorthand": false
                      }
                     ]
                    },
                    {
                     "type": "ArrowFunctionExpression",
                     "id": null,
                     "params": [
                      {
                       "type": "Identifier",
                       "name": "stdout"
                      },
                      {
                       "type": "Identifier",
                       "name": "stderr"
                      },
                      {
                       "type": "Identifier",
                       "name": "err"
                      }
                     ],
                     "body": {
                      "type": "BlockStatement",
                      "body": [
                       {
                        "type": "ExpressionStatement",
                        "expression": {
                         "type": "CallExpression",
                         "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                           "type": "Identifier",
                           "name": "ws"
                          },
                          "property": {
                           "type": "Identifier",
                           "name": "send"
                          }
                         },
                         "arguments": [
                          {
                           "type": "BinaryExpression",
                           "operator": "+",
                           "left": {
                            "type": "Literal",
                            "value": "branchname?",
                            "raw": "\"branchname?\""
                           },
                           "right": {
                            "type": "CallExpression",
                            "callee": {
                             "type": "MemberExpression",
                             "computed": false,
                             "object": {
                              "type": "Identifier",
                              "name": "stderr"
                             },
                             "property": {
                              "type": "Identifier",
                              "name": "replace"
                             }
                            },
                            "arguments": [
                             {
                              "type": "Literal",
                              "value": "\n",
                              "raw": "\"\\n\""
                             },
                             {
                              "type": "Literal",
                              "value": "",
                              "raw": "\"\""
                             }
                            ]
                           }
                          }
                         ]
                        }
                       }
                      ]
                     },
                     "generator": false,
                     "expression": false,
                     "async": false
                    }
                   ]
                  }
                 }
                ]
               },
               "alternate": null
              },
              {
               "type": "IfStatement",
               "test": {
                "type": "CallExpression",
                "callee": {
                 "type": "MemberExpression",
                 "computed": false,
                 "object": {
                  "type": "Identifier",
                  "name": "message"
                 },
                 "property": {
                  "type": "Identifier",
                  "name": "includes"
                 }
                },
                "arguments": [
                 {
                  "type": "Literal",
                  "value": "editedRightCode",
                  "raw": "\"editedRightCode\""
                 }
                ]
               },
               "consequent": {
                "type": "BlockStatement",
                "body": [
                 {
                  "type": "ExpressionStatement",
                  "expression": {
                   "type": "CallExpression",
                   "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                     "type": "Identifier",
                     "name": "console"
                    },
                    "property": {
                     "type": "Identifier",
                     "name": "log"
                    }
                   },
                   "arguments": [
                    {
                     "type": "Identifier",
                     "name": "message"
                    }
                   ]
                  }
                 },
                 {
                  "type": "VariableDeclaration",
                  "declarations": [
                   {
                    "type": "VariableDeclarator",
                    "id": {
                     "type": "Identifier",
                     "name": "gitCommand"
                    },
                    "init": {
                     "type": "CallExpression",
                     "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                       "type": "Identifier",
                       "name": "message"
                      },
                      "property": {
                       "type": "Identifier",
                       "name": "replace"
                      }
                     },
                     "arguments": [
                      {
                       "type": "Literal",
                       "value": "editedRightCode",
                       "raw": "\"editedRightCode\""
                      },
                      {
                       "type": "Literal",
                       "value": "",
                       "raw": "\"\""
                      }
                     ]
                    }
                   }
                  ],
                  "kind": "let"
                 },
                 {
                  "type": "VariableDeclaration",
                  "declarations": [
                   {
                    "type": "VariableDeclarator",
                    "id": {
                     "type": "Identifier",
                     "name": "onHash"
                    },
                    "init": null
                   }
                  ],
                  "kind": "let"
                 },
                 {
                  "type": "VariableDeclaration",
                  "declarations": [
                   {
                    "type": "VariableDeclarator",
                    "id": {
                     "type": "Identifier",
                     "name": "numBranches"
                    },
                    "init": null
                   }
                  ],
                  "kind": "let"
                 },
                 {
                  "type": "IfStatement",
                  "test": {
                   "type": "BinaryExpression",
                   "operator": "==",
                   "left": {
                    "type": "Identifier",
                    "name": "libext"
                   },
                   "right": {
                    "type": "Literal",
                    "value": "dylib",
                    "raw": "\"dylib\""
                   }
                  },
                  "consequent": {
                   "type": "BlockStatement",
                   "body": [
                    {
                     "type": "ExpressionStatement",
                     "expression": {
                      "type": "CallExpression",
                      "callee": {
                       "type": "Identifier",
                       "name": "exec"
                      },
                      "arguments": [
                       {
                        "type": "Literal",
                        "value": "git branch | wc -l",
                        "raw": "\"git branch | wc -l\""
                       },
                       {
                        "type": "ObjectExpression",
                        "properties": [
                         {
                          "type": "Property",
                          "key": {
                           "type": "Identifier",
                           "name": "cwd"
                          },
                          "computed": false,
                          "value": {
                           "type": "Identifier",
                           "name": "userWorktree"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": false
                         }
                        ]
                       },
                       {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [
                         {
                          "type": "Identifier",
                          "name": "stdout"
                         },
                         {
                          "type": "Identifier",
                          "name": "stderr"
                         },
                         {
                          "type": "Identifier",
                          "name": "err"
                         }
                        ],
                        "body": {
                         "type": "BlockStatement",
                         "body": [
                          {
                           "type": "ExpressionStatement",
                           "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                             "type": "Identifier",
                             "name": "onHash"
                            },
                            "right": {
                             "type": "CallExpression",
                             "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                               "type": "Identifier",
                               "name": "message"
                              },
                              "property": {
                               "type": "Identifier",
                               "name": "replace"
                              }
                             },
                             "arguments": [
                              {
                               "type": "Literal",
                               "value": "createNewBranch ",
                               "raw": "\"createNewBranch \""
                              },
                              {
                               "type": "Literal",
                               "value": "",
                               "raw": "\"\""
                              }
                             ]
                            }
                           }
                          },
                          {
                           "type": "ExpressionStatement",
                           "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                             "type": "Identifier",
                             "name": "numBranches"
                            },
                            "right": {
                             "type": "CallExpression",
                             "callee": {
                              "type": "Identifier",
                              "name": "Number"
                             },
                             "arguments": [
                              {
                               "type": "CallExpression",
                               "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                 "type": "Identifier",
                                 "name": "stderr"
                                },
                                "property": {
                                 "type": "Identifier",
                                 "name": "replace"
                                }
                               },
                               "arguments": [
                                {
                                 "type": "Literal",
                                 "value": {},
                                 "raw": "/\\s+/g",
                                 "regex": {
                                  "pattern": "\\s+",
                                  "flags": "g"
                                 }
                                },
                                {
                                 "type": "Literal",
                                 "value": "",
                                 "raw": "''"
                                }
                               ]
                              }
                             ]
                            }
                           }
                          }
                         ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                       }
                      ]
                     }
                    }
                   ]
                  },
                  "alternate": {
                   "type": "BlockStatement",
                   "body": [
                    {
                     "type": "ExpressionStatement",
                     "expression": {
                      "type": "CallExpression",
                      "callee": {
                       "type": "MemberExpression",
                       "computed": false,
                       "object": {
                        "type": "Identifier",
                        "name": "console"
                       },
                       "property": {
                        "type": "Identifier",
                        "name": "log"
                       }
                      },
                      "arguments": [
                       {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                         "type": "Literal",
                         "value": "working on windows machine\nchecked out new branch: ",
                         "raw": "\"working on windows machine\\nchecked out new branch: \""
                        },
                        "right": {
                         "type": "CallExpression",
                         "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                           "type": "Identifier",
                           "name": "gitCommand"
                          },
                          "property": {
                           "type": "Identifier",
                           "name": "substr"
                          }
                         },
                         "arguments": [
                          {
                           "type": "Literal",
                           "value": 0,
                           "raw": "0"
                          },
                          {
                           "type": "CallExpression",
                           "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                             "type": "Identifier",
                             "name": "gitCommand"
                            },
                            "property": {
                             "type": "Identifier",
                             "name": "indexOf"
                            }
                           },
                           "arguments": [
                            {
                             "type": "Literal",
                             "value": "_",
                             "raw": "'_'"
                            }
                           ]
                          }
                         ]
                        }
                       }
                      ]
                     }
                    },
                    {
                     "type": "ExpressionStatement",
                     "expression": {
                      "type": "CallExpression",
                      "callee": {
                       "type": "Identifier",
                       "name": "exec"
                      },
                      "arguments": [
                       {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                         "type": "Literal",
                         "value": "git checkout -b ",
                         "raw": "'git checkout -b '"
                        },
                        "right": {
                         "type": "Identifier",
                         "name": "gitCommand"
                        }
                       },
                       {
                        "type": "ObjectExpression",
                        "properties": [
                         {
                          "type": "Property",
                          "key": {
                           "type": "Identifier",
                           "name": "cwd"
                          },
                          "computed": false,
                          "value": {
                           "type": "Identifier",
                           "name": "userWorktree"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": false
                         }
                        ]
                       },
                       {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [
                         {
                          "type": "Identifier",
                          "name": "stdout"
                         },
                         {
                          "type": "Identifier",
                          "name": "err"
                         },
                         {
                          "type": "Identifier",
                          "name": "stderr"
                         }
                        ],
                        "body": {
                         "type": "BlockStatement",
                         "body": [
                          {
                           "type": "ExpressionStatement",
                           "expression": {
                            "type": "CallExpression",
                            "callee": {
                             "type": "MemberExpression",
                             "computed": false,
                             "object": {
                              "type": "Identifier",
                              "name": "console"
                             },
                             "property": {
                              "type": "Identifier",
                              "name": "log"
                             }
                            },
                            "arguments": [
                             {
                              "type": "BinaryExpression",
                              "operator": "+",
                              "left": {
                               "type": "BinaryExpression",
                               "operator": "+",
                               "left": {
                                "type": "Literal",
                                "value": "---\ngit: ",
                                "raw": "\"---\\ngit: \""
                               },
                               "right": {
                                "type": "Identifier",
                                "name": "stderr"
                               }
                              },
                              "right": {
                               "type": "Literal",
                               "value": "\n---",
                               "raw": "\"\\n---\""
                              }
                             }
                            ]
                           }
                          }
                         ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                       }
                      ]
                     }
                    }
                   ]
                  }
                 }
                ]
               },
               "alternate": null
              },
              {
               "type": "IfStatement",
               "test": {
                "type": "CallExpression",
                "callee": {
                 "type": "MemberExpression",
                 "computed": false,
                 "object": {
                  "type": "Identifier",
                  "name": "message"
                 },
                 "property": {
                  "type": "Identifier",
                  "name": "includes"
                 }
                },
                "arguments": [
                 {
                  "type": "Literal",
                  "value": "git show",
                  "raw": "\"git show\""
                 }
                ]
               },
               "consequent": {
                "type": "BlockStatement",
                "body": [
                 {
                  "type": "VariableDeclaration",
                  "declarations": [
                   {
                    "type": "VariableDeclarator",
                    "id": {
                     "type": "Identifier",
                     "name": "gitCommand"
                    },
                    "init": {
                     "type": "BinaryExpression",
                     "operator": "+",
                     "left": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                       "type": "Identifier",
                       "name": "message"
                      },
                      "right": {
                       "type": "Literal",
                       "value": ":",
                       "raw": "\":\""
                      }
                     },
                     "right": {
                      "type": "Literal",
                      "value": "project.cpp",
                      "raw": "\"project.cpp\""
                     }
                    }
                   }
                  ],
                  "kind": "var"
                 },
                 {
                  "type": "VariableDeclaration",
                  "declarations": [
                   {
                    "type": "VariableDeclarator",
                    "id": {
                     "type": "Identifier",
                     "name": "gitHash"
                    },
                    "init": {
                     "type": "CallExpression",
                     "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                       "type": "Identifier",
                       "name": "message"
                      },
                      "property": {
                       "type": "Identifier",
                       "name": "replace"
                      }
                     },
                     "arguments": [
                      {
                       "type": "Literal",
                       "value": "git show ",
                       "raw": "\"git show \""
                      },
                      {
                       "type": "Literal",
                       "value": "",
                       "raw": "\"\""
                      }
                     ]
                    }
                   }
                  ],
                  "kind": "var"
                 },
                 {
                  "type": "ExpressionStatement",
                  "expression": {
                   "type": "CallExpression",
                   "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                     "type": "Identifier",
                     "name": "console"
                    },
                    "property": {
                     "type": "Identifier",
                     "name": "log"
                    }
                   },
                   "arguments": [
                    {
                     "type": "BinaryExpression",
                     "operator": "+",
                     "left": {
                      "type": "Literal",
                      "value": "githash = ",
                      "raw": "\"githash = \""
                     },
                     "right": {
                      "type": "Identifier",
                      "name": "gitHash"
                     }
                    }
                   ]
                  }
                 },
                 {
                  "type": "ExpressionStatement",
                  "expression": {
                   "type": "CallExpression",
                   "callee": {
                    "type": "Identifier",
                    "name": "exec"
                   },
                   "arguments": [
                    {
                     "type": "Identifier",
                     "name": "gitCommand"
                    },
                    {
                     "type": "ObjectExpression",
                     "properties": [
                      {
                       "type": "Property",
                       "key": {
                        "type": "Identifier",
                        "name": "cwd"
                       },
                       "computed": false,
                       "value": {
                        "type": "Identifier",
                        "name": "project_path"
                       },
                       "kind": "init",
                       "method": false,
                       "shorthand": false
                      }
                     ]
                    },
                    {
                     "type": "ArrowFunctionExpression",
                     "id": null,
                     "params": [
                      {
                       "type": "Identifier",
                       "name": "err"
                      },
                      {
                       "type": "Identifier",
                       "name": "stdout"
                      }
                     ],
                     "body": {
                      "type": "BlockStatement",
                      "body": [
                       {
                        "type": "ExpressionStatement",
                        "expression": {
                         "type": "CallExpression",
                         "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                           "type": "Identifier",
                           "name": "ws"
                          },
                          "property": {
                           "type": "Identifier",
                           "name": "send"
                          }
                         },
                         "arguments": [
                          {
                           "type": "BinaryExpression",
                           "operator": "+",
                           "left": {
                            "type": "Literal",
                            "value": "show?",
                            "raw": "\"show?\""
                           },
                           "right": {
                            "type": "Identifier",
                            "name": "stdout"
                           }
                          }
                         ]
                        }
                       },
                       {
                        "type": "ExpressionStatement",
                        "expression": {
                         "type": "CallExpression",
                         "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                           "type": "Identifier",
                           "name": "console"
                          },
                          "property": {
                           "type": "Identifier",
                           "name": "log"
                          }
                         },
                         "arguments": [
                          {
                           "type": "Literal",
                           "value": "sending show",
                           "raw": "\"sending show\""
                          }
                         ]
                        }
                       }
                      ]
                     },
                     "generator": false,
                     "expression": false,
                     "async": false
                    }
                   ]
                  }
                 }
                ]
               },
               "alternate": null
              },
              {
               "type": "IfStatement",
               "test": {
                "type": "CallExpression",
                "callee": {
                 "type": "MemberExpression",
                 "computed": false,
                 "object": {
                  "type": "Identifier",
                  "name": "message"
                 },
                 "property": {
                  "type": "Identifier",
                  "name": "includes"
                 }
                },
                "arguments": [
                 {
                  "type": "Literal",
                  "value": "git return to master",
                  "raw": "\"git return to master\""
                 }
                ]
               },
               "consequent": {
                "type": "BlockStatement",
                "body": [
                 {
                  "type": "ExpressionStatement",
                  "expression": {
                   "type": "CallExpression",
                   "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                     "type": "Identifier",
                     "name": "console"
                    },
                    "property": {
                     "type": "Identifier",
                     "name": "log"
                    }
                   },
                   "arguments": [
                    {
                     "type": "Literal",
                     "value": "\n\n\n\n git return to master triggered \n\n\n\n\n\n",
                     "raw": "\"\\n\\n\\n\\n git return to master triggered \\n\\n\\n\\n\\n\\n\""
                    }
                   ]
                  }
                 },
                 {
                  "type": "ExpressionStatement",
                  "expression": {
                   "type": "CallExpression",
                   "callee": {
                    "type": "Identifier",
                    "name": "exec"
                   },
                   "arguments": [
                    {
                     "type": "BinaryExpression",
                     "operator": "+",
                     "left": {
                      "type": "Literal",
                      "value": "git show master:",
                      "raw": "\"git show master:\""
                     },
                     "right": {
                      "type": "CallExpression",
                      "callee": {
                       "type": "MemberExpression",
                       "computed": false,
                       "object": {
                        "type": "Identifier",
                        "name": "path"
                       },
                       "property": {
                        "type": "Identifier",
                        "name": "join"
                       }
                      },
                      "arguments": [
                       {
                        "type": "Identifier",
                        "name": "project_path"
                       },
                       {
                        "type": "Literal",
                        "value": "project.cpp",
                        "raw": "\"project.cpp\""
                       }
                      ]
                     }
                    },
                    {
                     "type": "ArrowFunctionExpression",
                     "id": null,
                     "params": [
                      {
                       "type": "Identifier",
                       "name": "stderr"
                      },
                      {
                       "type": "Identifier",
                       "name": "err"
                      },
                      {
                       "type": "Identifier",
                       "name": "stdout"
                      }
                     ],
                     "body": {
                      "type": "BlockStatement",
                      "body": [
                       {
                        "type": "ExpressionStatement",
                        "expression": {
                         "type": "CallExpression",
                         "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                           "type": "Identifier",
                           "name": "ws"
                          },
                          "property": {
                           "type": "Identifier",
                           "name": "send"
                          }
                         },
                         "arguments": [
                          {
                           "type": "BinaryExpression",
                           "operator": "+",
                           "left": {
                            "type": "Literal",
                            "value": "edit?",
                            "raw": "\"edit?\""
                           },
                           "right": {
                            "type": "Identifier",
                            "name": "err"
                           }
                          }
                         ]
                        }
                       }
                      ]
                     },
                     "generator": false,
                     "expression": false,
                     "async": false
                    }
                   ]
                  }
                 }
                ]
               },
               "alternate": null
              },
              {
               "type": "VariableDeclaration",
               "declarations": [
                {
                 "type": "VariableDeclarator",
                 "id": {
                  "type": "Identifier",
                  "name": "q"
                 },
                 "init": {
                  "type": "CallExpression",
                  "callee": {
                   "type": "MemberExpression",
                   "computed": false,
                   "object": {
                    "type": "Identifier",
                    "name": "message"
                   },
                   "property": {
                    "type": "Identifier",
                    "name": "indexOf"
                   }
                  },
                  "arguments": [
                   {
                    "type": "Literal",
                    "value": "?",
                    "raw": "\"?\""
                   }
                  ]
                 }
                }
               ],
               "kind": "let"
              },
              {
               "type": "IfStatement",
               "test": {
                "type": "BinaryExpression",
                "operator": ">",
                "left": {
                 "type": "Identifier",
                 "name": "q"
                },
                "right": {
                 "type": "Literal",
                 "value": 0,
                 "raw": "0"
                }
               },
               "consequent": {
                "type": "BlockStatement",
                "body": [
                 {
                  "type": "VariableDeclaration",
                  "declarations": [
                   {
                    "type": "VariableDeclarator",
                    "id": {
                     "type": "Identifier",
                     "name": "cmd"
                    },
                    "init": {
                     "type": "CallExpression",
                     "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                       "type": "Identifier",
                       "name": "message"
                      },
                      "property": {
                       "type": "Identifier",
                       "name": "substring"
                      }
                     },
                     "arguments": [
                      {
                       "type": "Literal",
                       "value": 0,
                       "raw": "0"
                      },
                      {
                       "type": "Identifier",
                       "name": "q"
                      }
                     ]
                    }
                   }
                  ],
                  "kind": "let"
                 },
                 {
                  "type": "VariableDeclaration",
                  "declarations": [
                   {
                    "type": "VariableDeclarator",
                    "id": {
                     "type": "Identifier",
                     "name": "arg"
                    },
                    "init": {
                     "type": "CallExpression",
                     "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                       "type": "Identifier",
                       "name": "message"
                      },
                      "property": {
                       "type": "Identifier",
                       "name": "substring"
                      }
                     },
                     "arguments": [
                      {
                       "type": "BinaryExpression",
                       "operator": "+",
                       "left": {
                        "type": "Identifier",
                        "name": "q"
                       },
                       "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                       }
                      }
                     ]
                    }
                   }
                  ],
                  "kind": "let"
                 },
                 {
                  "type": "SwitchStatement",
                  "discriminant": {
                   "type": "Identifier",
                   "name": "cmd"
                  },
                  "cases": [
                   {
                    "type": "SwitchCase",
                    "test": {
                     "type": "Literal",
                     "value": "newUser",
                     "raw": "\"newUser\""
                    },
                    "consequent": [
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "AssignmentExpression",
                       "operator": "=",
                       "left": {
                        "type": "Identifier",
                        "name": "userName"
                       },
                       "right": {
                        "type": "CallExpression",
                        "callee": {
                         "type": "MemberExpression",
                         "computed": false,
                         "object": {
                          "type": "Identifier",
                          "name": "arg"
                         },
                         "property": {
                          "type": "Identifier",
                          "name": "substr"
                         }
                        },
                        "arguments": [
                         {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                         },
                         {
                          "type": "CallExpression",
                          "callee": {
                           "type": "MemberExpression",
                           "computed": false,
                           "object": {
                            "type": "Identifier",
                            "name": "arg"
                           },
                           "property": {
                            "type": "Identifier",
                            "name": "indexOf"
                           }
                          },
                          "arguments": [
                           {
                            "type": "Literal",
                            "value": "$?$",
                            "raw": "\"$?$\""
                           }
                          ]
                         }
                        ]
                       }
                      }
                     },
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "AssignmentExpression",
                       "operator": "=",
                       "left": {
                        "type": "Identifier",
                        "name": "useremail"
                       },
                       "right": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                         "type": "CallExpression",
                         "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                           "type": "Identifier",
                           "name": "arg"
                          },
                          "property": {
                           "type": "Identifier",
                           "name": "split"
                          }
                         },
                         "arguments": [
                          {
                           "type": "Literal",
                           "value": "$?$",
                           "raw": "'$?$'"
                          }
                         ]
                        },
                        "property": {
                         "type": "Literal",
                         "value": 1,
                         "raw": "1"
                        }
                       }
                      }
                     },
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "AssignmentExpression",
                       "operator": "=",
                       "left": {
                        "type": "Identifier",
                        "name": "clientOrigRightWorktree"
                       },
                       "right": {
                        "type": "Identifier",
                        "name": "userName"
                       }
                      }
                     },
                     {
                      "type": "VariableDeclaration",
                      "declarations": [
                       {
                        "type": "VariableDeclarator",
                        "id": {
                         "type": "Identifier",
                         "name": "userlist"
                        },
                        "init": {
                         "type": "CallExpression",
                         "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                           "type": "Identifier",
                           "name": "JSON"
                          },
                          "property": {
                           "type": "Identifier",
                           "name": "parse"
                          }
                         },
                         "arguments": [
                          {
                           "type": "CallExpression",
                           "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                             "type": "Identifier",
                             "name": "fs"
                            },
                            "property": {
                             "type": "Identifier",
                             "name": "readFileSync"
                            }
                           },
                           "arguments": [
                            {
                             "type": "CallExpression",
                             "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                               "type": "Identifier",
                               "name": "path"
                              },
                              "property": {
                               "type": "Identifier",
                               "name": "join"
                              }
                             },
                             "arguments": [
                              {
                               "type": "Identifier",
                               "name": "project_path"
                              },
                              {
                               "type": "Literal",
                               "value": "userlist.json",
                               "raw": "\"userlist.json\""
                              }
                             ]
                            },
                            {
                             "type": "Literal",
                             "value": "utf8",
                             "raw": "'utf8'"
                            }
                           ]
                          }
                         ]
                        }
                       }
                      ],
                      "kind": "let"
                     },
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "AssignmentExpression",
                       "operator": "=",
                       "left": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                         "type": "Identifier",
                         "name": "userlist"
                        },
                        "property": {
                         "type": "Identifier",
                         "name": "userName"
                        }
                       },
                       "right": {
                        "type": "Identifier",
                        "name": "userEmail"
                       }
                      }
                     },
                     {
                      "type": "VariableDeclaration",
                      "declarations": [
                       {
                        "type": "VariableDeclarator",
                        "id": {
                         "type": "Identifier",
                         "name": "jsonstring"
                        },
                        "init": {
                         "type": "CallExpression",
                         "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                           "type": "Identifier",
                           "name": "JSON"
                          },
                          "property": {
                           "type": "Identifier",
                           "name": "stringify"
                          }
                         },
                         "arguments": [
                          {
                           "type": "Identifier",
                           "name": "userlist"
                          }
                         ]
                        }
                       }
                      ],
                      "kind": "var"
                     },
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "CallExpression",
                       "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                         "type": "Identifier",
                         "name": "console"
                        },
                        "property": {
                         "type": "Identifier",
                         "name": "log"
                        }
                       },
                       "arguments": [
                        {
                         "type": "BinaryExpression",
                         "operator": "+",
                         "left": {
                          "type": "Literal",
                          "value": "user:",
                          "raw": "\"user:\""
                         },
                         "right": {
                          "type": "Identifier",
                          "name": "jsonstring"
                         }
                        }
                       ]
                      }
                     },
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "CallExpression",
                       "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                         "type": "Identifier",
                         "name": "fs"
                        },
                        "property": {
                         "type": "Identifier",
                         "name": "writeFileSync"
                        }
                       },
                       "arguments": [
                        {
                         "type": "CallExpression",
                         "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                           "type": "Identifier",
                           "name": "path"
                          },
                          "property": {
                           "type": "Identifier",
                           "name": "join"
                          }
                         },
                         "arguments": [
                          {
                           "type": "Identifier",
                           "name": "project_path"
                          },
                          {
                           "type": "Literal",
                           "value": "userlist.json",
                           "raw": "\"userlist.json\""
                          }
                         ]
                        },
                        {
                         "type": "Identifier",
                         "name": "jsonstring"
                        },
                        {
                         "type": "Literal",
                         "value": "utf8",
                         "raw": "'utf8'"
                        }
                       ]
                      }
                     },
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "CallExpression",
                       "callee": {
                        "type": "Identifier",
                        "name": "exec"
                       },
                       "arguments": [
                        {
                         "type": "Literal",
                         "value": "git rev-parse ",
                         "raw": "\"git rev-parse \""
                        }
                       ]
                      }
                     },
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "CallExpression",
                       "callee": {
                        "type": "Identifier",
                        "name": "exec"
                       },
                       "arguments": [
                        {
                         "type": "BinaryExpression",
                         "operator": "+",
                         "left": {
                          "type": "Literal",
                          "value": "git worktree add --checkout +",
                          "raw": "\"git worktree add --checkout +\""
                         },
                         "right": {
                          "type": "CallExpression",
                          "callee": {
                           "type": "MemberExpression",
                           "computed": false,
                           "object": {
                            "type": "CallExpression",
                            "callee": {
                             "type": "MemberExpression",
                             "computed": false,
                             "object": {
                              "type": "Identifier",
                              "name": "userName"
                             },
                             "property": {
                              "type": "Identifier",
                              "name": "split"
                             }
                            },
                            "arguments": [
                             {
                              "type": "Literal",
                              "value": " ",
                              "raw": "' '"
                             }
                            ]
                           },
                           "property": {
                            "type": "Identifier",
                            "name": "join"
                           }
                          },
                          "arguments": [
                           {
                            "type": "Literal",
                            "value": "_",
                            "raw": "'_'"
                           }
                          ]
                         }
                        },
                        {
                         "type": "ArrowFunctionExpression",
                         "id": null,
                         "params": [
                          {
                           "type": "Identifier",
                           "name": "stdout"
                          },
                          {
                           "type": "Identifier",
                           "name": "err"
                          },
                          {
                           "type": "Identifier",
                           "name": "stderr"
                          }
                         ],
                         "body": {
                          "type": "BlockStatement",
                          "body": []
                         },
                         "generator": false,
                         "expression": false,
                         "async": false
                        }
                       ]
                      }
                     },
                     {
                      "type": "BreakStatement",
                      "label": null
                     }
                    ]
                   },
                   {
                    "type": "SwitchCase",
                    "test": {
                     "type": "Literal",
                     "value": "selectUser",
                     "raw": "\"selectUser\""
                    },
                    "consequent": [
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "CallExpression",
                       "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                         "type": "Identifier",
                         "name": "console"
                        },
                        "property": {
                         "type": "Identifier",
                         "name": "log"
                        }
                       },
                       "arguments": [
                        {
                         "type": "Identifier",
                         "name": "arg"
                        }
                       ]
                      }
                     },
                     {
                      "type": "SwitchStatement",
                      "discriminant": {
                       "type": "Identifier",
                       "name": "arg"
                      },
                      "cases": [
                       {
                        "type": "SwitchCase",
                        "test": {
                         "type": "Literal",
                         "value": "Guest",
                         "raw": "\"Guest\""
                        },
                        "consequent": [
                         {
                          "type": "ExpressionStatement",
                          "expression": {
                           "type": "AssignmentExpression",
                           "operator": "=",
                           "left": {
                            "type": "Identifier",
                            "name": "userName"
                           },
                           "right": {
                            "type": "Literal",
                            "value": "Guest",
                            "raw": "\"Guest\""
                           }
                          }
                         },
                         {
                          "type": "ExpressionStatement",
                          "expression": {
                           "type": "AssignmentExpression",
                           "operator": "=",
                           "left": {
                            "type": "Identifier",
                            "name": "userEmail"
                           },
                           "right": {
                            "type": "Literal",
                            "value": "grrrwaaa@gmail.com",
                            "raw": "\"grrrwaaa@gmail.com\""
                           }
                          }
                         },
                         {
                          "type": "ExpressionStatement",
                          "expression": {
                           "type": "AssignmentExpression",
                           "operator": "=",
                           "left": {
                            "type": "Identifier",
                            "name": "userWorktree"
                           },
                           "right": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                             "type": "Identifier",
                             "name": "project_path"
                            },
                            "right": {
                             "type": "CallExpression",
                             "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                               "type": "Identifier",
                               "name": "path"
                              },
                              "property": {
                               "type": "Identifier",
                               "name": "join"
                              }
                             },
                             "arguments": [
                              {
                               "type": "BinaryExpression",
                               "operator": "+",
                               "left": {
                                "type": "Literal",
                                "value": "/+",
                                "raw": "\"/+\""
                               },
                               "right": {
                                "type": "CallExpression",
                                "callee": {
                                 "type": "MemberExpression",
                                 "computed": false,
                                 "object": {
                                  "type": "CallExpression",
                                  "callee": {
                                   "type": "MemberExpression",
                                   "computed": false,
                                   "object": {
                                    "type": "Identifier",
                                    "name": "userName"
                                   },
                                   "property": {
                                    "type": "Identifier",
                                    "name": "split"
                                   }
                                  },
                                  "arguments": [
                                   {
                                    "type": "Literal",
                                    "value": " ",
                                    "raw": "' '"
                                   }
                                  ]
                                 },
                                 "property": {
                                  "type": "Identifier",
                                  "name": "join"
                                 }
                                },
                                "arguments": [
                                 {
                                  "type": "Literal",
                                  "value": "_",
                                  "raw": "'_'"
                                 }
                                ]
                               }
                              }
                             ]
                            }
                           }
                          }
                         },
                         {
                          "type": "ExpressionStatement",
                          "expression": {
                           "type": "CallExpression",
                           "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                             "type": "Identifier",
                             "name": "console"
                            },
                            "property": {
                             "type": "Identifier",
                             "name": "log"
                            }
                           },
                           "arguments": [
                            {
                             "type": "BinaryExpression",
                             "operator": "+",
                             "left": {
                              "type": "BinaryExpression",
                              "operator": "+",
                              "left": {
                               "type": "BinaryExpression",
                               "operator": "+",
                               "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                 "type": "Literal",
                                 "value": "---\ngit user: ",
                                 "raw": "\"---\\ngit user: \""
                                },
                                "right": {
                                 "type": "Identifier",
                                 "name": "userName"
                                }
                               },
                               "right": {
                                "type": "Literal",
                                "value": "\nemail: ",
                                "raw": "\"\\nemail: \""
                               }
                              },
                              "right": {
                               "type": "Identifier",
                               "name": "userEmail"
                              }
                             },
                             "right": {
                              "type": "Literal",
                              "value": "\n---",
                              "raw": "\"\\n---\""
                             }
                            }
                           ]
                          }
                         },
                         {
                          "type": "ExpressionStatement",
                          "expression": {
                           "type": "CallExpression",
                           "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                             "type": "Identifier",
                             "name": "console"
                            },
                            "property": {
                             "type": "Identifier",
                             "name": "log"
                            }
                           },
                           "arguments": [
                            {
                             "type": "BinaryExpression",
                             "operator": "+",
                             "left": {
                              "type": "BinaryExpression",
                              "operator": "+",
                              "left": {
                               "type": "BinaryExpression",
                               "operator": "+",
                               "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                 "type": "Literal",
                                 "value": "\n---\nClient Session ",
                                 "raw": "\"\\n---\\nClient Session \""
                                },
                                "right": {
                                 "type": "MemberExpression",
                                 "computed": false,
                                 "object": {
                                  "type": "Identifier",
                                  "name": "per_session_data"
                                 },
                                 "property": {
                                  "type": "Identifier",
                                  "name": "id"
                                 }
                                }
                               },
                               "right": {
                                "type": "Literal",
                                "value": ": rightEditor working from worktree '",
                                "raw": "\": rightEditor working from worktree '\""
                               }
                              },
                              "right": {
                               "type": "Identifier",
                               "name": "userWorktree"
                              }
                             },
                             "right": {
                              "type": "Literal",
                              "value": "'\n---",
                              "raw": "\"'\\n---\""
                             }
                            }
                           ]
                          }
                         },
                         {
                          "type": "BreakStatement",
                          "label": null
                         }
                        ]
                       },
                       {
                        "type": "SwitchCase",
                        "test": null,
                        "consequent": [
                         {
                          "type": "ExpressionStatement",
                          "expression": {
                           "type": "AssignmentExpression",
                           "operator": "=",
                           "left": {
                            "type": "Identifier",
                            "name": "userName"
                           },
                           "right": {
                            "type": "Identifier",
                            "name": "arg"
                           }
                          }
                         },
                         {
                          "type": "ExpressionStatement",
                          "expression": {
                           "type": "AssignmentExpression",
                           "operator": "=",
                           "left": {
                            "type": "Identifier",
                            "name": "userEntry"
                           },
                           "right": {
                            "type": "CallExpression",
                            "callee": {
                             "type": "MemberExpression",
                             "computed": false,
                             "object": {
                              "type": "Identifier",
                              "name": "JSON"
                             },
                             "property": {
                              "type": "Identifier",
                              "name": "parse"
                             }
                            },
                            "arguments": [
                             {
                              "type": "CallExpression",
                              "callee": {
                               "type": "MemberExpression",
                               "computed": false,
                               "object": {
                                "type": "Identifier",
                                "name": "fs"
                               },
                               "property": {
                                "type": "Identifier",
                                "name": "readFileSync"
                               }
                              },
                              "arguments": [
                               {
                                "type": "CallExpression",
                                "callee": {
                                 "type": "MemberExpression",
                                 "computed": false,
                                 "object": {
                                  "type": "Identifier",
                                  "name": "path"
                                 },
                                 "property": {
                                  "type": "Identifier",
                                  "name": "join"
                                 }
                                },
                                "arguments": [
                                 {
                                  "type": "Identifier",
                                  "name": "project_path"
                                 },
                                 {
                                  "type": "Literal",
                                  "value": "userlist.json",
                                  "raw": "\"userlist.json\""
                                 }
                                ]
                               },
                               {
                                "type": "Literal",
                                "value": "utf8",
                                "raw": "'utf8'"
                               }
                              ]
                             }
                            ]
                           }
                          }
                         },
                         {
                          "type": "ExpressionStatement",
                          "expression": {
                           "type": "AssignmentExpression",
                           "operator": "=",
                           "left": {
                            "type": "Identifier",
                            "name": "userWorktree"
                           },
                           "right": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                             "type": "Identifier",
                             "name": "project_path"
                            },
                            "right": {
                             "type": "CallExpression",
                             "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                               "type": "Identifier",
                               "name": "path"
                              },
                              "property": {
                               "type": "Identifier",
                               "name": "join"
                              }
                             },
                             "arguments": [
                              {
                               "type": "BinaryExpression",
                               "operator": "+",
                               "left": {
                                "type": "Literal",
                                "value": "/+",
                                "raw": "\"/+\""
                               },
                               "right": {
                                "type": "CallExpression",
                                "callee": {
                                 "type": "MemberExpression",
                                 "computed": false,
                                 "object": {
                                  "type": "CallExpression",
                                  "callee": {
                                   "type": "MemberExpression",
                                   "computed": false,
                                   "object": {
                                    "type": "Identifier",
                                    "name": "userName"
                                   },
                                   "property": {
                                    "type": "Identifier",
                                    "name": "split"
                                   }
                                  },
                                  "arguments": [
                                   {
                                    "type": "Literal",
                                    "value": " ",
                                    "raw": "' '"
                                   }
                                  ]
                                 },
                                 "property": {
                                  "type": "Identifier",
                                  "name": "join"
                                 }
                                },
                                "arguments": [
                                 {
                                  "type": "Literal",
                                  "value": "_",
                                  "raw": "'_'"
                                 }
                                ]
                               }
                              }
                             ]
                            }
                           }
                          }
                         },
                         {
                          "type": "IfStatement",
                          "test": {
                           "type": "CallExpression",
                           "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                             "type": "Identifier",
                             "name": "fs"
                            },
                            "property": {
                             "type": "Identifier",
                             "name": "existsSync"
                            }
                           },
                           "arguments": [
                            {
                             "type": "Identifier",
                             "name": "userWorktree"
                            }
                           ]
                          },
                          "consequent": {
                           "type": "BlockStatement",
                           "body": [
                            {
                             "type": "ExpressionStatement",
                             "expression": {
                              "type": "CallExpression",
                              "callee": {
                               "type": "MemberExpression",
                               "computed": false,
                               "object": {
                                "type": "Identifier",
                                "name": "console"
                               },
                               "property": {
                                "type": "Identifier",
                                "name": "log"
                               }
                              },
                              "arguments": [
                               {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                 "type": "BinaryExpression",
                                 "operator": "+",
                                 "left": {
                                  "type": "BinaryExpression",
                                  "operator": "+",
                                  "left": {
                                   "type": "BinaryExpression",
                                   "operator": "+",
                                   "left": {
                                    "type": "Literal",
                                    "value": "\n---\nClient Session ",
                                    "raw": "\"\\n---\\nClient Session \""
                                   },
                                   "right": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                     "type": "Identifier",
                                     "name": "per_session_data"
                                    },
                                    "property": {
                                     "type": "Identifier",
                                     "name": "id"
                                    }
                                   }
                                  },
                                  "right": {
                                   "type": "Literal",
                                   "value": ": rightEditor working from worktree '",
                                   "raw": "\": rightEditor working from worktree '\""
                                  }
                                 },
                                 "right": {
                                  "type": "Identifier",
                                  "name": "userWorktree"
                                 }
                                },
                                "right": {
                                 "type": "Literal",
                                 "value": "'\n---",
                                 "raw": "\"'\\n---\""
                                }
                               }
                              ]
                             }
                            },
                            {
                             "type": "ExpressionStatement",
                             "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                               "type": "Identifier",
                               "name": "userEmail"
                              },
                              "right": {
                               "type": "MemberExpression",
                               "computed": true,
                               "object": {
                                "type": "Identifier",
                                "name": "userEntry"
                               },
                               "property": {
                                "type": "Identifier",
                                "name": "arg"
                               }
                              }
                             }
                            }
                           ]
                          },
                          "alternate": {
                           "type": "BlockStatement",
                           "body": [
                            {
                             "type": "ExpressionStatement",
                             "expression": {
                              "type": "CallExpression",
                              "callee": {
                               "type": "Identifier",
                               "name": "exec"
                              },
                              "arguments": [
                               {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                 "type": "Literal",
                                 "value": "git worktree add --no-checkout ",
                                 "raw": "'git worktree add --no-checkout '"
                                },
                                "right": {
                                 "type": "Identifier",
                                 "name": "userWorktree"
                                }
                               },
                               {
                                "type": "ObjectExpression",
                                "properties": [
                                 {
                                  "type": "Property",
                                  "key": {
                                   "type": "Identifier",
                                   "name": "cwd"
                                  },
                                  "computed": false,
                                  "value": {
                                   "type": "Identifier",
                                   "name": "project_path"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                 }
                                ]
                               },
                               {
                                "type": "ArrowFunctionExpression",
                                "id": null,
                                "params": [
                                 {
                                  "type": "Identifier",
                                  "name": "stdout"
                                 },
                                 {
                                  "type": "Identifier",
                                  "name": "stderr"
                                 },
                                 {
                                  "type": "Identifier",
                                  "name": "err"
                                 }
                                ],
                                "body": {
                                 "type": "BlockStatement",
                                 "body": [
                                  {
                                   "type": "ExpressionStatement",
                                   "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                     "type": "MemberExpression",
                                     "computed": false,
                                     "object": {
                                      "type": "Identifier",
                                      "name": "console"
                                     },
                                     "property": {
                                      "type": "Identifier",
                                      "name": "log"
                                     }
                                    },
                                    "arguments": [
                                     {
                                      "type": "Identifier",
                                      "name": "err"
                                     },
                                     {
                                      "type": "Identifier",
                                      "name": "stderr"
                                     },
                                     {
                                      "type": "Identifier",
                                      "name": "stdout"
                                     }
                                    ]
                                   }
                                  }
                                 ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                               }
                              ]
                             }
                            }
                           ]
                          }
                         },
                         {
                          "type": "BreakStatement",
                          "label": null
                         }
                        ]
                       }
                      ]
                     },
                     {
                      "type": "BreakStatement",
                      "label": null
                     }
                    ]
                   },
                   {
                    "type": "SwitchCase",
                    "test": {
                     "type": "Literal",
                     "value": "client_SVG",
                     "raw": "\"client_SVG\""
                    },
                    "consequent": [
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "CallExpression",
                       "callee": {
                        "type": "Identifier",
                        "name": "exec"
                       },
                       "arguments": [
                        {
                         "type": "BinaryExpression",
                         "operator": "+",
                         "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                           "type": "Literal",
                           "value": "git log --all --full-history --reflog --topo-order --date=short --pretty=\"%h|%p|%d|%cd|%aN|%s%b|\" --stat > ",
                           "raw": "'git log --all --full-history --reflog --topo-order --date=short --pretty=\"%h|%p|%d|%cd|%aN|%s%b|\" --stat > '"
                          },
                          "right": {
                           "type": "Identifier",
                           "name": "__dirname"
                          }
                         },
                         "right": {
                          "type": "Literal",
                          "value": "/tmp/gitlog.txt",
                          "raw": "\"/tmp/gitlog.txt\""
                         }
                        },
                        {
                         "type": "ObjectExpression",
                         "properties": [
                          {
                           "type": "Property",
                           "key": {
                            "type": "Identifier",
                            "name": "cwd"
                           },
                           "computed": false,
                           "value": {
                            "type": "Identifier",
                            "name": "project_path"
                           },
                           "kind": "init",
                           "method": false,
                           "shorthand": false
                          }
                         ]
                        },
                        {
                         "type": "ArrowFunctionExpression",
                         "id": null,
                         "params": [
                          {
                           "type": "Identifier",
                           "name": "stdout"
                          },
                          {
                           "type": "Identifier",
                           "name": "stderr"
                          },
                          {
                           "type": "Identifier",
                           "name": "err"
                          }
                         ],
                         "body": {
                          "type": "BlockStatement",
                          "body": [
                           {
                            "type": "ExpressionStatement",
                            "expression": {
                             "type": "CallExpression",
                             "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                               "type": "Identifier",
                               "name": "fs"
                              },
                              "property": {
                               "type": "Identifier",
                               "name": "readFile"
                              }
                             },
                             "arguments": [
                              {
                               "type": "BinaryExpression",
                               "operator": "+",
                               "left": {
                                "type": "Identifier",
                                "name": "__dirname"
                               },
                               "right": {
                                "type": "Literal",
                                "value": "/tmp/gitlog.txt",
                                "raw": "'/tmp/gitlog.txt'"
                               }
                              },
                              {
                               "type": "Literal",
                               "value": "utf8",
                               "raw": "'utf8'"
                              },
                              {
                               "type": "FunctionExpression",
                               "id": null,
                               "params": [
                                {
                                 "type": "Identifier",
                                 "name": "err"
                                },
                                {
                                 "type": "Identifier",
                                 "name": "data"
                                }
                               ],
                               "body": {
                                "type": "BlockStatement",
                                "body": [
                                 {
                                  "type": "IfStatement",
                                  "test": {
                                   "type": "Identifier",
                                   "name": "err"
                                  },
                                  "consequent": {
                                   "type": "ThrowStatement",
                                   "argument": {
                                    "type": "Identifier",
                                    "name": "err"
                                   }
                                  },
                                  "alternate": null
                                 },
                                 {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                   {
                                    "type": "VariableDeclarator",
                                    "id": {
                                     "type": "Identifier",
                                     "name": "gitlog"
                                    },
                                    "init": {
                                     "type": "Identifier",
                                     "name": "data"
                                    }
                                   }
                                  ],
                                  "kind": "let"
                                 },
                                 {
                                  "type": "FunctionDeclaration",
                                  "id": {
                                   "type": "Identifier",
                                   "name": "make_graph_from_gitlog"
                                  },
                                  "params": [
                                   {
                                    "type": "Identifier",
                                    "name": "gitlog"
                                   }
                                  ],
                                  "body": {
                                   "type": "BlockStatement",
                                   "body": [
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "commits"
                                       },
                                       "init": {
                                        "type": "ArrayExpression",
                                        "elements": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "roots"
                                       },
                                       "init": {
                                        "type": "ArrayExpression",
                                        "elements": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "maxcolumn"
                                       },
                                       "init": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "commit_map"
                                       },
                                       "init": {
                                        "type": "ObjectExpression",
                                        "properties": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "forward_refs"
                                       },
                                       "init": {
                                        "type": "ObjectExpression",
                                        "properties": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "lines"
                                       },
                                       "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                         "type": "MemberExpression",
                                         "computed": false,
                                         "object": {
                                          "type": "Identifier",
                                          "name": "gitlog"
                                         },
                                         "property": {
                                          "type": "Identifier",
                                          "name": "split"
                                         }
                                        },
                                        "arguments": [
                                         {
                                          "type": "Literal",
                                          "value": ")\n",
                                          "raw": "\")\\n\""
                                         }
                                        ]
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "ForStatement",
                                     "init": {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                       {
                                        "type": "VariableDeclarator",
                                        "id": {
                                         "type": "Identifier",
                                         "name": "i"
                                        },
                                        "init": {
                                         "type": "Literal",
                                         "value": 0,
                                         "raw": "0"
                                        }
                                       }
                                      ],
                                      "kind": "let"
                                     },
                                     "test": {
                                      "type": "BinaryExpression",
                                      "operator": "<",
                                      "left": {
                                       "type": "Identifier",
                                       "name": "i"
                                      },
                                      "right": {
                                       "type": "MemberExpression",
                                       "computed": false,
                                       "object": {
                                        "type": "Identifier",
                                        "name": "lines"
                                       },
                                       "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                       }
                                      }
                                     },
                                     "update": {
                                      "type": "UpdateExpression",
                                      "operator": "++",
                                      "argument": {
                                       "type": "Identifier",
                                       "name": "i"
                                      },
                                      "prefix": false
                                     },
                                     "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                       {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                         {
                                          "type": "VariableDeclarator",
                                          "id": {
                                           "type": "Identifier",
                                           "name": "line"
                                          },
                                          "init": {
                                           "type": "CallExpression",
                                           "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                             "type": "MemberExpression",
                                             "computed": true,
                                             "object": {
                                              "type": "Identifier",
                                              "name": "lines"
                                             },
                                             "property": {
                                              "type": "Identifier",
                                              "name": "i"
                                             }
                                            },
                                            "property": {
                                             "type": "Identifier",
                                             "name": "split"
                                            }
                                           },
                                           "arguments": [
                                            {
                                             "type": "Literal",
                                             "value": "|",
                                             "raw": "\"|\""
                                            }
                                           ]
                                          }
                                         }
                                        ],
                                        "kind": "let"
                                       },
                                       {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                         {
                                          "type": "VariableDeclarator",
                                          "id": {
                                           "type": "Identifier",
                                           "name": "hash"
                                          },
                                          "init": {
                                           "type": "MemberExpression",
                                           "computed": true,
                                           "object": {
                                            "type": "Identifier",
                                            "name": "line"
                                           },
                                           "property": {
                                            "type": "Literal",
                                            "value": 0,
                                            "raw": "0"
                                           }
                                          }
                                         }
                                        ],
                                        "kind": "let"
                                       },
                                       {
                                        "type": "IfStatement",
                                        "test": {
                                         "type": "MemberExpression",
                                         "computed": false,
                                         "object": {
                                          "type": "Identifier",
                                          "name": "hash"
                                         },
                                         "property": {
                                          "type": "Identifier",
                                          "name": "length"
                                         }
                                        },
                                        "consequent": {
                                         "type": "BlockStatement",
                                         "body": [
                                          {
                                           "type": "VariableDeclaration",
                                           "declarations": [
                                            {
                                             "type": "VariableDeclarator",
                                             "id": {
                                              "type": "Identifier",
                                              "name": "commit"
                                             },
                                             "init": {
                                              "type": "ObjectExpression",
                                              "properties": [
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "hash"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "Identifier",
                                                 "name": "hash"
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "children"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "ConditionalExpression",
                                                 "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                   "type": "Identifier",
                                                   "name": "line"
                                                  },
                                                  "property": {
                                                   "type": "Literal",
                                                   "value": 1,
                                                   "raw": "1"
                                                  }
                                                 },
                                                 "consequent": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "line"
                                                    },
                                                    "property": {
                                                     "type": "Literal",
                                                     "value": 1,
                                                     "raw": "1"
                                                    }
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "split"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Literal",
                                                    "value": " ",
                                                    "raw": "\" \""
                                                   }
                                                  ]
                                                 },
                                                 "alternate": {
                                                  "type": "ArrayExpression",
                                                  "elements": []
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "ref"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "ConditionalExpression",
                                                 "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                   "type": "Identifier",
                                                   "name": "line"
                                                  },
                                                  "property": {
                                                   "type": "Literal",
                                                   "value": 2,
                                                   "raw": "2"
                                                  }
                                                 },
                                                 "consequent": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "line"
                                                    },
                                                    "property": {
                                                     "type": "Literal",
                                                     "value": 2,
                                                     "raw": "2"
                                                    }
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "split"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Literal",
                                                    "value": ", ",
                                                    "raw": "\", \""
                                                   }
                                                  ]
                                                 },
                                                 "alternate": {
                                                  "type": "ArrayExpression",
                                                  "elements": []
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "row"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "BinaryExpression",
                                                 "operator": "+",
                                                 "left": {
                                                  "type": "Identifier",
                                                  "name": "i"
                                                 },
                                                 "right": {
                                                  "type": "Literal",
                                                  "value": 1,
                                                  "raw": "1"
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "col"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "Literal",
                                                 "value": 0,
                                                 "raw": "0"
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "commit_date"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "ConditionalExpression",
                                                 "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                   "type": "Identifier",
                                                   "name": "line"
                                                  },
                                                  "property": {
                                                   "type": "Literal",
                                                   "value": 3,
                                                   "raw": "3"
                                                  }
                                                 },
                                                 "consequent": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "line"
                                                    },
                                                    "property": {
                                                     "type": "Literal",
                                                     "value": 3,
                                                     "raw": "3"
                                                    }
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "split"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Literal",
                                                    "value": ", ",
                                                    "raw": "\", \""
                                                   }
                                                  ]
                                                 },
                                                 "alternate": {
                                                  "type": "ArrayExpression",
                                                  "elements": []
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "committer_name"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "ConditionalExpression",
                                                 "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                   "type": "Identifier",
                                                   "name": "line"
                                                  },
                                                  "property": {
                                                   "type": "Literal",
                                                   "value": 4,
                                                   "raw": "4"
                                                  }
                                                 },
                                                 "consequent": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "line"
                                                    },
                                                    "property": {
                                                     "type": "Literal",
                                                     "value": 4,
                                                     "raw": "4"
                                                    }
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "split"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Literal",
                                                    "value": ", ",
                                                    "raw": "\", \""
                                                   }
                                                  ]
                                                 },
                                                 "alternate": {
                                                  "type": "ArrayExpression",
                                                  "elements": []
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "commit_msg"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "ConditionalExpression",
                                                 "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                   "type": "Identifier",
                                                   "name": "line"
                                                  },
                                                  "property": {
                                                   "type": "Literal",
                                                   "value": 5,
                                                   "raw": "5"
                                                  }
                                                 },
                                                 "consequent": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "line"
                                                    },
                                                    "property": {
                                                     "type": "Literal",
                                                     "value": 5,
                                                     "raw": "5"
                                                    }
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "split"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Literal",
                                                    "value": ", ",
                                                    "raw": "\", \""
                                                   }
                                                  ]
                                                 },
                                                 "alternate": {
                                                  "type": "ArrayExpression",
                                                  "elements": []
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "commit_files"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "ConditionalExpression",
                                                 "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                   "type": "Identifier",
                                                   "name": "line"
                                                  },
                                                  "property": {
                                                   "type": "Literal",
                                                   "value": 6,
                                                   "raw": "6"
                                                  }
                                                 },
                                                 "consequent": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "Identifier",
                                                    "name": "line"
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "slice"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Literal",
                                                    "value": 6,
                                                    "raw": "6"
                                                   }
                                                  ]
                                                 },
                                                 "alternate": {
                                                  "type": "ArrayExpression",
                                                  "elements": []
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               }
                                              ]
                                             }
                                            }
                                           ],
                                           "kind": "let"
                                          },
                                          {
                                           "type": "IfStatement",
                                           "test": {
                                            "type": "UnaryExpression",
                                            "operator": "!",
                                            "argument": {
                                             "type": "MemberExpression",
                                             "computed": true,
                                             "object": {
                                              "type": "Identifier",
                                              "name": "forward_refs"
                                             },
                                             "property": {
                                              "type": "Identifier",
                                              "name": "hash"
                                             }
                                            },
                                            "prefix": true
                                           },
                                           "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                             {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                               "type": "CallExpression",
                                               "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "roots"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "push"
                                                }
                                               },
                                               "arguments": [
                                                {
                                                 "type": "Identifier",
                                                 "name": "hash"
                                                }
                                               ]
                                              }
                                             },
                                             {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                               "type": "AssignmentExpression",
                                               "operator": "=",
                                               "left": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "commit"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "root"
                                                }
                                               },
                                               "right": {
                                                "type": "Literal",
                                                "value": true,
                                                "raw": "true"
                                               }
                                              }
                                             }
                                            ]
                                           },
                                           "alternate": null
                                          },
                                          {
                                           "type": "ExpressionStatement",
                                           "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                             "type": "MemberExpression",
                                             "computed": false,
                                             "object": {
                                              "type": "Identifier",
                                              "name": "commits"
                                             },
                                             "property": {
                                              "type": "Identifier",
                                              "name": "push"
                                             }
                                            },
                                            "arguments": [
                                             {
                                              "type": "Identifier",
                                              "name": "commit"
                                             }
                                            ]
                                           }
                                          },
                                          {
                                           "type": "ExpressionStatement",
                                           "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                             "type": "MemberExpression",
                                             "computed": true,
                                             "object": {
                                              "type": "Identifier",
                                              "name": "commit_map"
                                             },
                                             "property": {
                                              "type": "Identifier",
                                              "name": "hash"
                                             }
                                            },
                                            "right": {
                                             "type": "Identifier",
                                             "name": "commit"
                                            }
                                           }
                                          },
                                          {
                                           "type": "ForOfStatement",
                                           "left": {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                             {
                                              "type": "VariableDeclarator",
                                              "id": {
                                               "type": "Identifier",
                                               "name": "c"
                                              },
                                              "init": null
                                             }
                                            ],
                                            "kind": "let"
                                           },
                                           "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                             "type": "Identifier",
                                             "name": "commit"
                                            },
                                            "property": {
                                             "type": "Identifier",
                                             "name": "children"
                                            }
                                           },
                                           "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                             {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                               "type": "AssignmentExpression",
                                               "operator": "=",
                                               "left": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "forward_refs"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "c"
                                                }
                                               },
                                               "right": {
                                                "type": "Literal",
                                                "value": true,
                                                "raw": "true"
                                               }
                                              }
                                             }
                                            ]
                                           }
                                          }
                                         ]
                                        },
                                        "alternate": null
                                       }
                                      ]
                                     }
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "stack"
                                       },
                                       "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                         "type": "MemberExpression",
                                         "computed": false,
                                         "object": {
                                          "type": "CallExpression",
                                          "callee": {
                                           "type": "MemberExpression",
                                           "computed": false,
                                           "object": {
                                            "type": "Identifier",
                                            "name": "roots"
                                           },
                                           "property": {
                                            "type": "Identifier",
                                            "name": "map"
                                           }
                                          },
                                          "arguments": [
                                           {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [
                                             {
                                              "type": "Identifier",
                                              "name": "hash"
                                             }
                                            ],
                                            "body": {
                                             "type": "BlockStatement",
                                             "body": [
                                              {
                                               "type": "ReturnStatement",
                                               "argument": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "commit_map"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "hash"
                                                }
                                               }
                                              }
                                             ]
                                            },
                                            "generator": false,
                                            "expression": false,
                                            "async": false
                                           }
                                          ]
                                         },
                                         "property": {
                                          "type": "Identifier",
                                          "name": "reverse"
                                         }
                                        },
                                        "arguments": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "visited"
                                       },
                                       "init": {
                                        "type": "ObjectExpression",
                                        "properties": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "paths"
                                       },
                                       "init": {
                                        "type": "ArrayExpression",
                                        "elements": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "WhileStatement",
                                     "test": {
                                      "type": "BinaryExpression",
                                      "operator": ">",
                                      "left": {
                                       "type": "MemberExpression",
                                       "computed": false,
                                       "object": {
                                        "type": "Identifier",
                                        "name": "stack"
                                       },
                                       "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                       }
                                      },
                                      "right": {
                                       "type": "Literal",
                                       "value": 0,
                                       "raw": "0"
                                      }
                                     },
                                     "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                       {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                         {
                                          "type": "VariableDeclarator",
                                          "id": {
                                           "type": "Identifier",
                                           "name": "commit"
                                          },
                                          "init": {
                                           "type": "CallExpression",
                                           "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                             "type": "Identifier",
                                             "name": "stack"
                                            },
                                            "property": {
                                             "type": "Identifier",
                                             "name": "pop"
                                            }
                                           },
                                           "arguments": []
                                          }
                                         }
                                        ],
                                        "kind": "let"
                                       },
                                       {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                         "type": "AssignmentExpression",
                                         "operator": "=",
                                         "left": {
                                          "type": "MemberExpression",
                                          "computed": true,
                                          "object": {
                                           "type": "Identifier",
                                           "name": "visited"
                                          },
                                          "property": {
                                           "type": "MemberExpression",
                                           "computed": false,
                                           "object": {
                                            "type": "Identifier",
                                            "name": "commit"
                                           },
                                           "property": {
                                            "type": "Identifier",
                                            "name": "hash"
                                           }
                                          }
                                         },
                                         "right": {
                                          "type": "Literal",
                                          "value": true,
                                          "raw": "true"
                                         }
                                        }
                                       },
                                       {
                                        "type": "IfStatement",
                                        "test": {
                                         "type": "UnaryExpression",
                                         "operator": "!",
                                         "argument": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                           "type": "Identifier",
                                           "name": "commit"
                                          },
                                          "property": {
                                           "type": "Identifier",
                                           "name": "col"
                                          }
                                         },
                                         "prefix": true
                                        },
                                        "consequent": {
                                         "type": "BlockStatement",
                                         "body": [
                                          {
                                           "type": "ExpressionStatement",
                                           "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                             "type": "MemberExpression",
                                             "computed": false,
                                             "object": {
                                              "type": "Identifier",
                                              "name": "commit"
                                             },
                                             "property": {
                                              "type": "Identifier",
                                              "name": "col"
                                             }
                                            },
                                            "right": {
                                             "type": "UpdateExpression",
                                             "operator": "++",
                                             "argument": {
                                              "type": "Identifier",
                                              "name": "maxcolumn"
                                             },
                                             "prefix": false
                                            }
                                           }
                                          }
                                         ]
                                        },
                                        "alternate": {
                                         "type": "BlockStatement",
                                         "body": [
                                          {
                                           "type": "ExpressionStatement",
                                           "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                             "type": "Identifier",
                                             "name": "maxcolumn"
                                            },
                                            "right": {
                                             "type": "CallExpression",
                                             "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                               "type": "Identifier",
                                               "name": "Math"
                                              },
                                              "property": {
                                               "type": "Identifier",
                                               "name": "max"
                                              }
                                             },
                                             "arguments": [
                                              {
                                               "type": "Identifier",
                                               "name": "maxcolumn"
                                              },
                                              {
                                               "type": "MemberExpression",
                                               "computed": false,
                                               "object": {
                                                "type": "Identifier",
                                                "name": "commit"
                                               },
                                               "property": {
                                                "type": "Identifier",
                                                "name": "col"
                                               }
                                              }
                                             ]
                                            }
                                           }
                                          }
                                         ]
                                        }
                                       },
                                       {
                                        "type": "ForStatement",
                                        "init": {
                                         "type": "VariableDeclaration",
                                         "declarations": [
                                          {
                                           "type": "VariableDeclarator",
                                           "id": {
                                            "type": "Identifier",
                                            "name": "i"
                                           },
                                           "init": {
                                            "type": "BinaryExpression",
                                            "operator": "-",
                                            "left": {
                                             "type": "MemberExpression",
                                             "computed": false,
                                             "object": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                               "type": "Identifier",
                                               "name": "commit"
                                              },
                                              "property": {
                                               "type": "Identifier",
                                               "name": "children"
                                              }
                                             },
                                             "property": {
                                              "type": "Identifier",
                                              "name": "length"
                                             }
                                            },
                                            "right": {
                                             "type": "Literal",
                                             "value": 1,
                                             "raw": "1"
                                            }
                                           }
                                          }
                                         ],
                                         "kind": "let"
                                        },
                                        "test": {
                                         "type": "BinaryExpression",
                                         "operator": ">=",
                                         "left": {
                                          "type": "Identifier",
                                          "name": "i"
                                         },
                                         "right": {
                                          "type": "Literal",
                                          "value": 0,
                                          "raw": "0"
                                         }
                                        },
                                        "update": {
                                         "type": "UpdateExpression",
                                         "operator": "--",
                                         "argument": {
                                          "type": "Identifier",
                                          "name": "i"
                                         },
                                         "prefix": false
                                        },
                                        "body": {
                                         "type": "BlockStatement",
                                         "body": [
                                          {
                                           "type": "VariableDeclaration",
                                           "declarations": [
                                            {
                                             "type": "VariableDeclarator",
                                             "id": {
                                              "type": "Identifier",
                                              "name": "child_hash"
                                             },
                                             "init": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                               "type": "MemberExpression",
                                               "computed": false,
                                               "object": {
                                                "type": "Identifier",
                                                "name": "commit"
                                               },
                                               "property": {
                                                "type": "Identifier",
                                                "name": "children"
                                               }
                                              },
                                              "property": {
                                               "type": "Identifier",
                                               "name": "i"
                                              }
                                             }
                                            }
                                           ],
                                           "kind": "let"
                                          },
                                          {
                                           "type": "VariableDeclaration",
                                           "declarations": [
                                            {
                                             "type": "VariableDeclarator",
                                             "id": {
                                              "type": "Identifier",
                                              "name": "child"
                                             },
                                             "init": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                               "type": "Identifier",
                                               "name": "commit_map"
                                              },
                                              "property": {
                                               "type": "MemberExpression",
                                               "computed": true,
                                               "object": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "commit"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "children"
                                                }
                                               },
                                               "property": {
                                                "type": "Identifier",
                                                "name": "i"
                                               }
                                              }
                                             }
                                            }
                                           ],
                                           "kind": "let"
                                          },
                                          {
                                           "type": "IfStatement",
                                           "test": {
                                            "type": "Identifier",
                                            "name": "child"
                                           },
                                           "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                             {
                                              "type": "IfStatement",
                                              "test": {
                                               "type": "UnaryExpression",
                                               "operator": "!",
                                               "argument": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "visited"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "child_hash"
                                                }
                                               },
                                               "prefix": true
                                              },
                                              "consequent": {
                                               "type": "BlockStatement",
                                               "body": [
                                                {
                                                 "type": "ExpressionStatement",
                                                 "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "Identifier",
                                                    "name": "child"
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "col"
                                                   }
                                                  },
                                                  "right": {
                                                   "type": "BinaryExpression",
                                                   "operator": "+",
                                                   "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "commit"
                                                    },
                                                    "property": {
                                                     "type": "Identifier",
                                                     "name": "col"
                                                    }
                                                   },
                                                   "right": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                   }
                                                  }
                                                 }
                                                },
                                                {
                                                 "type": "ExpressionStatement",
                                                 "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "Identifier",
                                                    "name": "stack"
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "push"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Identifier",
                                                    "name": "child"
                                                   }
                                                  ]
                                                 }
                                                }
                                               ]
                                              },
                                              "alternate": null
                                             },
                                             {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                               "type": "CallExpression",
                                               "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "paths"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "push"
                                                }
                                               },
                                               "arguments": [
                                                {
                                                 "type": "ObjectExpression",
                                                 "properties": [
                                                  {
                                                   "type": "Property",
                                                   "key": {
                                                    "type": "Identifier",
                                                    "name": "from"
                                                   },
                                                   "computed": false,
                                                   "value": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "commit"
                                                    },
                                                    "property": {
                                                     "type": "Identifier",
                                                     "name": "hash"
                                                    }
                                                   },
                                                   "kind": "init",
                                                   "method": false,
                                                   "shorthand": false
                                                  },
                                                  {
                                                   "type": "Property",
                                                   "key": {
                                                    "type": "Identifier",
                                                    "name": "to"
                                                   },
                                                   "computed": false,
                                                   "value": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "child"
                                                    },
                                                    "property": {
                                                     "type": "Identifier",
                                                     "name": "hash"
                                                    }
                                                   },
                                                   "kind": "init",
                                                   "method": false,
                                                   "shorthand": false
                                                  }
                                                 ]
                                                }
                                               ]
                                              }
                                             }
                                            ]
                                           },
                                           "alternate": null
                                          }
                                         ]
                                        }
                                       }
                                      ]
                                     }
                                    },
                                    {
                                     "type": "ReturnStatement",
                                     "argument": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                       {
                                        "type": "Property",
                                        "key": {
                                         "type": "Identifier",
                                         "name": "maxcolumn"
                                        },
                                        "computed": false,
                                        "value": {
                                         "type": "Identifier",
                                         "name": "maxcolumn"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                       },
                                       {
                                        "type": "Property",
                                        "key": {
                                         "type": "Identifier",
                                         "name": "roots"
                                        },
                                        "computed": false,
                                        "value": {
                                         "type": "Identifier",
                                         "name": "roots"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                       },
                                       {
                                        "type": "Property",
                                        "key": {
                                         "type": "Identifier",
                                         "name": "commits"
                                        },
                                        "computed": false,
                                        "value": {
                                         "type": "Identifier",
                                         "name": "commits"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                       },
                                       {
                                        "type": "Property",
                                        "key": {
                                         "type": "Identifier",
                                         "name": "paths"
                                        },
                                        "computed": false,
                                        "value": {
                                         "type": "Identifier",
                                         "name": "paths"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                       }
                                      ]
                                     }
                                    }
                                   ]
                                  },
                                  "generator": false,
                                  "expression": false,
                                  "async": false
                                 },
                                 {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                   {
                                    "type": "VariableDeclarator",
                                    "id": {
                                     "type": "Identifier",
                                     "name": "graph"
                                    },
                                    "init": {
                                     "type": "CallExpression",
                                     "callee": {
                                      "type": "Identifier",
                                      "name": "make_graph_from_gitlog"
                                     },
                                     "arguments": [
                                      {
                                       "type": "Identifier",
                                       "name": "gitlog"
                                      }
                                     ]
                                    }
                                   }
                                  ],
                                  "kind": "let"
                                 },
                                 {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                   {
                                    "type": "VariableDeclarator",
                                    "id": {
                                     "type": "Identifier",
                                     "name": "graphjson"
                                    },
                                    "init": {
                                     "type": "CallExpression",
                                     "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                       "type": "Identifier",
                                       "name": "pako"
                                      },
                                      "property": {
                                       "type": "Identifier",
                                       "name": "deflate"
                                      }
                                     },
                                     "arguments": [
                                      {
                                       "type": "CallExpression",
                                       "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                         "type": "Identifier",
                                         "name": "JSON"
                                        },
                                        "property": {
                                         "type": "Identifier",
                                         "name": "stringify"
                                        }
                                       },
                                       "arguments": [
                                        {
                                         "type": "Identifier",
                                         "name": "graph"
                                        }
                                       ]
                                      },
                                      {
                                       "type": "ObjectExpression",
                                       "properties": [
                                        {
                                         "type": "Property",
                                         "key": {
                                          "type": "Identifier",
                                          "name": "to"
                                         },
                                         "computed": false,
                                         "value": {
                                          "type": "Literal",
                                          "value": "string",
                                          "raw": "'string'"
                                         },
                                         "kind": "init",
                                         "method": false,
                                         "shorthand": false
                                        }
                                       ]
                                      }
                                     ]
                                    }
                                   }
                                  ],
                                  "kind": "let"
                                 },
                                 {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                   "type": "CallExpression",
                                   "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                     "type": "Identifier",
                                     "name": "ws"
                                    },
                                    "property": {
                                     "type": "Identifier",
                                     "name": "send"
                                    }
                                   },
                                   "arguments": [
                                    {
                                     "type": "BinaryExpression",
                                     "operator": "+",
                                     "left": {
                                      "type": "Literal",
                                      "value": "gitLog?",
                                      "raw": "\"gitLog?\""
                                     },
                                     "right": {
                                      "type": "Identifier",
                                      "name": "graphjson"
                                     }
                                    }
                                   ]
                                  }
                                 }
                                ]
                               },
                               "generator": false,
                               "expression": false,
                               "async": false
                              }
                             ]
                            }
                           }
                          ]
                         },
                         "generator": false,
                         "expression": false,
                         "async": false
                        }
                       ]
                      }
                     },
                     {
                      "type": "BreakStatement",
                      "label": null
                     }
                    ]
                   },
                   {
                    "type": "SwitchCase",
                    "test": {
                     "type": "Literal",
                     "value": "edit",
                     "raw": "\"edit\""
                    },
                    "consequent": [
                     {
                      "type": "VariableDeclaration",
                      "declarations": [
                       {
                        "type": "VariableDeclarator",
                        "id": {
                         "type": "Identifier",
                         "name": "commitMsg"
                        },
                        "init": {
                         "type": "CallExpression",
                         "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                           "type": "CallExpression",
                           "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                             "type": "Identifier",
                             "name": "arg"
                            },
                            "property": {
                             "type": "Identifier",
                             "name": "substring"
                            }
                           },
                           "arguments": [
                            {
                             "type": "BinaryExpression",
                             "operator": "+",
                             "left": {
                              "type": "CallExpression",
                              "callee": {
                               "type": "MemberExpression",
                               "computed": false,
                               "object": {
                                "type": "Identifier",
                                "name": "arg"
                               },
                               "property": {
                                "type": "Identifier",
                                "name": "lastIndexOf"
                               }
                              },
                              "arguments": [
                               {
                                "type": "Literal",
                                "value": "?commit",
                                "raw": "\"?commit\""
                               }
                              ]
                             },
                             "right": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                             }
                            },
                            {
                             "type": "CallExpression",
                             "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                               "type": "Identifier",
                               "name": "arg"
                              },
                              "property": {
                               "type": "Identifier",
                               "name": "lastIndexOf"
                              }
                             },
                             "arguments": [
                              {
                               "type": "Literal",
                               "value": "?code",
                               "raw": "\"?code\""
                              }
                             ]
                            }
                           ]
                          },
                          "property": {
                           "type": "Identifier",
                           "name": "replace"
                          }
                         },
                         "arguments": [
                          {
                           "type": "Literal",
                           "value": "commit",
                           "raw": "\"commit\""
                          },
                          {
                           "type": "Literal",
                           "value": "",
                           "raw": "\"\""
                          }
                         ]
                        }
                       }
                      ],
                      "kind": "let"
                     },
                     {
                      "type": "VariableDeclaration",
                      "declarations": [
                       {
                        "type": "VariableDeclarator",
                        "id": {
                         "type": "Identifier",
                         "name": "newCode"
                        },
                        "init": {
                         "type": "MemberExpression",
                         "computed": true,
                         "object": {
                          "type": "CallExpression",
                          "callee": {
                           "type": "MemberExpression",
                           "computed": false,
                           "object": {
                            "type": "Identifier",
                            "name": "arg"
                           },
                           "property": {
                            "type": "Identifier",
                            "name": "split"
                           }
                          },
                          "arguments": [
                           {
                            "type": "Literal",
                            "value": "?code",
                            "raw": "'?code'"
                           }
                          ]
                         },
                         "property": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                         }
                        }
                       }
                      ],
                      "kind": "let"
                     },
                     {
                      "type": "VariableDeclaration",
                      "declarations": [
                       {
                        "type": "VariableDeclarator",
                        "id": {
                         "type": "Identifier",
                         "name": "thisAuthor"
                        },
                        "init": {
                         "type": "CallExpression",
                         "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                           "type": "CallExpression",
                           "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                             "type": "Identifier",
                             "name": "arg"
                            },
                            "property": {
                             "type": "Identifier",
                             "name": "substring"
                            }
                           },
                           "arguments": [
                            {
                             "type": "BinaryExpression",
                             "operator": "+",
                             "left": {
                              "type": "CallExpression",
                              "callee": {
                               "type": "MemberExpression",
                               "computed": false,
                               "object": {
                                "type": "Identifier",
                                "name": "arg"
                               },
                               "property": {
                                "type": "Identifier",
                                "name": "lastIndexOf"
                               }
                              },
                              "arguments": [
                               {
                                "type": "Literal",
                                "value": "?author",
                                "raw": "\"?author\""
                               }
                              ]
                             },
                             "right": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                             }
                            },
                            {
                             "type": "CallExpression",
                             "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                               "type": "Identifier",
                               "name": "arg"
                              },
                              "property": {
                               "type": "Identifier",
                               "name": "lastIndexOf"
                              }
                             },
                             "arguments": [
                              {
                               "type": "Literal",
                               "value": "?commit",
                               "raw": "\"?commit\""
                              }
                             ]
                            }
                           ]
                          },
                          "property": {
                           "type": "Identifier",
                           "name": "replace"
                          }
                         },
                         "arguments": [
                          {
                           "type": "Literal",
                           "value": "author",
                           "raw": "\"author\""
                          },
                          {
                           "type": "Literal",
                           "value": "",
                           "raw": "\"\""
                          }
                         ]
                        }
                       }
                      ],
                      "kind": "let"
                     },
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "CallExpression",
                       "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                         "type": "Identifier",
                         "name": "fs"
                        },
                        "property": {
                         "type": "Identifier",
                         "name": "writeFileSync"
                        }
                       },
                       "arguments": [
                        {
                         "type": "Literal",
                         "value": "project.cpp",
                         "raw": "\"project.cpp\""
                        },
                        {
                         "type": "Identifier",
                         "name": "newCode"
                        },
                        {
                         "type": "Literal",
                         "value": "utf8",
                         "raw": "\"utf8\""
                        }
                       ]
                      }
                     },
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "CallExpression",
                       "callee": {
                        "type": "Identifier",
                        "name": "execSync"
                       },
                       "arguments": [
                        {
                         "type": "Literal",
                         "value": "git add .",
                         "raw": "'git add .'"
                        },
                        {
                         "type": "ObjectExpression",
                         "properties": [
                          {
                           "type": "Property",
                           "key": {
                            "type": "Identifier",
                            "name": "cwd"
                           },
                           "computed": false,
                           "value": {
                            "type": "Identifier",
                            "name": "project_path"
                           },
                           "kind": "init",
                           "method": false,
                           "shorthand": false
                          }
                         ]
                        },
                        {
                         "type": "ArrowFunctionExpression",
                         "id": null,
                         "params": [],
                         "body": {
                          "type": "BlockStatement",
                          "body": [
                           {
                            "type": "ExpressionStatement",
                            "expression": {
                             "type": "CallExpression",
                             "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                               "type": "Identifier",
                               "name": "console"
                              },
                              "property": {
                               "type": "Identifier",
                               "name": "log"
                              }
                             },
                             "arguments": [
                              {
                               "type": "Literal",
                               "value": "git added",
                               "raw": "\"git added\""
                              }
                             ]
                            }
                           }
                          ]
                         },
                         "generator": false,
                         "expression": false,
                         "async": false
                        }
                       ]
                      }
                     },
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "CallExpression",
                       "callee": {
                        "type": "Identifier",
                        "name": "execSync"
                       },
                       "arguments": [
                        {
                         "type": "BinaryExpression",
                         "operator": "+",
                         "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                           "type": "BinaryExpression",
                           "operator": "+",
                           "left": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                             "type": "Literal",
                             "value": "git commit --author=\"",
                             "raw": "'git commit --author=\\\"'"
                            },
                            "right": {
                             "type": "Identifier",
                             "name": "thisAuthor"
                            }
                           },
                           "right": {
                            "type": "Literal",
                            "value": "\" -m \"",
                            "raw": "'\\\" -m \\\"'"
                           }
                          },
                          "right": {
                           "type": "Identifier",
                           "name": "commitMsg"
                          }
                         },
                         "right": {
                          "type": "Literal",
                          "value": "\"",
                          "raw": "'\\\"'"
                         }
                        },
                        {
                         "type": "ObjectExpression",
                         "properties": [
                          {
                           "type": "Property",
                           "key": {
                            "type": "Identifier",
                            "name": "cwd"
                           },
                           "computed": false,
                           "value": {
                            "type": "Identifier",
                            "name": "project_path"
                           },
                           "kind": "init",
                           "method": false,
                           "shorthand": false
                          }
                         ]
                        },
                        {
                         "type": "ArrowFunctionExpression",
                         "id": null,
                         "params": [],
                         "body": {
                          "type": "BlockStatement",
                          "body": [
                           {
                            "type": "ExpressionStatement",
                            "expression": {
                             "type": "CallExpression",
                             "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                               "type": "Identifier",
                               "name": "console"
                              },
                              "property": {
                               "type": "Identifier",
                               "name": "log"
                              }
                             },
                             "arguments": [
                              {
                               "type": "Literal",
                               "value": "git committed",
                               "raw": "\"git committed\""
                              }
                             ]
                            }
                           }
                          ]
                         },
                         "generator": false,
                         "expression": false,
                         "async": false
                        }
                       ]
                      }
                     },
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "CallExpression",
                       "callee": {
                        "type": "Identifier",
                        "name": "execSync"
                       },
                       "arguments": [
                        {
                         "type": "Literal",
                         "value": "git status",
                         "raw": "'git status'"
                        },
                        {
                         "type": "ObjectExpression",
                         "properties": [
                          {
                           "type": "Property",
                           "key": {
                            "type": "Identifier",
                            "name": "cwd"
                           },
                           "computed": false,
                           "value": {
                            "type": "Identifier",
                            "name": "project_path"
                           },
                           "kind": "init",
                           "method": false,
                           "shorthand": false
                          }
                         ]
                        },
                        {
                         "type": "ArrowFunctionExpression",
                         "id": null,
                         "params": [
                          {
                           "type": "Identifier",
                           "name": "stdout"
                          }
                         ],
                         "body": {
                          "type": "BlockStatement",
                          "body": [
                           {
                            "type": "ExpressionStatement",
                            "expression": {
                             "type": "CallExpression",
                             "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                               "type": "Identifier",
                               "name": "console"
                              },
                              "property": {
                               "type": "Identifier",
                               "name": "log"
                              }
                             },
                             "arguments": [
                              {
                               "type": "BinaryExpression",
                               "operator": "+",
                               "left": {
                                "type": "Literal",
                                "value": "\ngit status: \n",
                                "raw": "\"\\ngit status: \\n\""
                               },
                               "right": {
                                "type": "Identifier",
                                "name": "stdout"
                               }
                              }
                             ]
                            }
                           }
                          ]
                         },
                         "generator": false,
                         "expression": false,
                         "async": false
                        }
                       ]
                      }
                     },
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "CallExpression",
                       "callee": {
                        "type": "Identifier",
                        "name": "exec"
                       },
                       "arguments": [
                        {
                         "type": "BinaryExpression",
                         "operator": "+",
                         "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                           "type": "Literal",
                           "value": "git log --all --ignore-missing --full-history --reflog --topo-order --date=short --pretty=\"%h|%p|%d|%cd|%cN|%s%b|\" --stat > ",
                           "raw": "'git log --all --ignore-missing --full-history --reflog --topo-order --date=short --pretty=\"%h|%p|%d|%cd|%cN|%s%b|\" --stat > '"
                          },
                          "right": {
                           "type": "Identifier",
                           "name": "__dirname"
                          }
                         },
                         "right": {
                          "type": "Literal",
                          "value": "/tmp/gitlog.txt",
                          "raw": "\"/tmp/gitlog.txt\""
                         }
                        },
                        {
                         "type": "ObjectExpression",
                         "properties": [
                          {
                           "type": "Property",
                           "key": {
                            "type": "Identifier",
                            "name": "cwd"
                           },
                           "computed": false,
                           "value": {
                            "type": "Identifier",
                            "name": "project_path"
                           },
                           "kind": "init",
                           "method": false,
                           "shorthand": false
                          }
                         ]
                        },
                        {
                         "type": "ArrowFunctionExpression",
                         "id": null,
                         "params": [
                          {
                           "type": "Identifier",
                           "name": "stdout"
                          },
                          {
                           "type": "Identifier",
                           "name": "stderr"
                          },
                          {
                           "type": "Identifier",
                           "name": "err"
                          }
                         ],
                         "body": {
                          "type": "BlockStatement",
                          "body": [
                           {
                            "type": "ExpressionStatement",
                            "expression": {
                             "type": "CallExpression",
                             "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                               "type": "Identifier",
                               "name": "fs"
                              },
                              "property": {
                               "type": "Identifier",
                               "name": "readFile"
                              }
                             },
                             "arguments": [
                              {
                               "type": "BinaryExpression",
                               "operator": "+",
                               "left": {
                                "type": "Identifier",
                                "name": "__dirname"
                               },
                               "right": {
                                "type": "Literal",
                                "value": "/tmp/gitlog.txt",
                                "raw": "'/tmp/gitlog.txt'"
                               }
                              },
                              {
                               "type": "Literal",
                               "value": "utf8",
                               "raw": "'utf8'"
                              },
                              {
                               "type": "FunctionExpression",
                               "id": null,
                               "params": [
                                {
                                 "type": "Identifier",
                                 "name": "err"
                                },
                                {
                                 "type": "Identifier",
                                 "name": "data"
                                }
                               ],
                               "body": {
                                "type": "BlockStatement",
                                "body": [
                                 {
                                  "type": "IfStatement",
                                  "test": {
                                   "type": "Identifier",
                                   "name": "err"
                                  },
                                  "consequent": {
                                   "type": "ThrowStatement",
                                   "argument": {
                                    "type": "Identifier",
                                    "name": "err"
                                   }
                                  },
                                  "alternate": null
                                 },
                                 {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                   {
                                    "type": "VariableDeclarator",
                                    "id": {
                                     "type": "Identifier",
                                     "name": "gitlog"
                                    },
                                    "init": {
                                     "type": "Identifier",
                                     "name": "data"
                                    }
                                   }
                                  ],
                                  "kind": "let"
                                 },
                                 {
                                  "type": "FunctionDeclaration",
                                  "id": {
                                   "type": "Identifier",
                                   "name": "make_graph_from_gitlog"
                                  },
                                  "params": [
                                   {
                                    "type": "Identifier",
                                    "name": "gitlog"
                                   }
                                  ],
                                  "body": {
                                   "type": "BlockStatement",
                                   "body": [
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "commits"
                                       },
                                       "init": {
                                        "type": "ArrayExpression",
                                        "elements": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "roots"
                                       },
                                       "init": {
                                        "type": "ArrayExpression",
                                        "elements": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "maxcolumn"
                                       },
                                       "init": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "commit_map"
                                       },
                                       "init": {
                                        "type": "ObjectExpression",
                                        "properties": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "forward_refs"
                                       },
                                       "init": {
                                        "type": "ObjectExpression",
                                        "properties": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "lines"
                                       },
                                       "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                         "type": "MemberExpression",
                                         "computed": false,
                                         "object": {
                                          "type": "Identifier",
                                          "name": "gitlog"
                                         },
                                         "property": {
                                          "type": "Identifier",
                                          "name": "split"
                                         }
                                        },
                                        "arguments": [
                                         {
                                          "type": "Literal",
                                          "value": ")\n",
                                          "raw": "\")\\n\""
                                         }
                                        ]
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "ForStatement",
                                     "init": {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                       {
                                        "type": "VariableDeclarator",
                                        "id": {
                                         "type": "Identifier",
                                         "name": "i"
                                        },
                                        "init": {
                                         "type": "Literal",
                                         "value": 0,
                                         "raw": "0"
                                        }
                                       }
                                      ],
                                      "kind": "let"
                                     },
                                     "test": {
                                      "type": "BinaryExpression",
                                      "operator": "<",
                                      "left": {
                                       "type": "Identifier",
                                       "name": "i"
                                      },
                                      "right": {
                                       "type": "MemberExpression",
                                       "computed": false,
                                       "object": {
                                        "type": "Identifier",
                                        "name": "lines"
                                       },
                                       "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                       }
                                      }
                                     },
                                     "update": {
                                      "type": "UpdateExpression",
                                      "operator": "++",
                                      "argument": {
                                       "type": "Identifier",
                                       "name": "i"
                                      },
                                      "prefix": false
                                     },
                                     "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                       {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                         {
                                          "type": "VariableDeclarator",
                                          "id": {
                                           "type": "Identifier",
                                           "name": "line"
                                          },
                                          "init": {
                                           "type": "CallExpression",
                                           "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                             "type": "MemberExpression",
                                             "computed": true,
                                             "object": {
                                              "type": "Identifier",
                                              "name": "lines"
                                             },
                                             "property": {
                                              "type": "Identifier",
                                              "name": "i"
                                             }
                                            },
                                            "property": {
                                             "type": "Identifier",
                                             "name": "split"
                                            }
                                           },
                                           "arguments": [
                                            {
                                             "type": "Literal",
                                             "value": "|",
                                             "raw": "\"|\""
                                            }
                                           ]
                                          }
                                         }
                                        ],
                                        "kind": "let"
                                       },
                                       {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                         {
                                          "type": "VariableDeclarator",
                                          "id": {
                                           "type": "Identifier",
                                           "name": "hash"
                                          },
                                          "init": {
                                           "type": "MemberExpression",
                                           "computed": true,
                                           "object": {
                                            "type": "Identifier",
                                            "name": "line"
                                           },
                                           "property": {
                                            "type": "Literal",
                                            "value": 0,
                                            "raw": "0"
                                           }
                                          }
                                         }
                                        ],
                                        "kind": "let"
                                       },
                                       {
                                        "type": "IfStatement",
                                        "test": {
                                         "type": "MemberExpression",
                                         "computed": false,
                                         "object": {
                                          "type": "Identifier",
                                          "name": "hash"
                                         },
                                         "property": {
                                          "type": "Identifier",
                                          "name": "length"
                                         }
                                        },
                                        "consequent": {
                                         "type": "BlockStatement",
                                         "body": [
                                          {
                                           "type": "VariableDeclaration",
                                           "declarations": [
                                            {
                                             "type": "VariableDeclarator",
                                             "id": {
                                              "type": "Identifier",
                                              "name": "commit"
                                             },
                                             "init": {
                                              "type": "ObjectExpression",
                                              "properties": [
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "hash"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "Identifier",
                                                 "name": "hash"
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "children"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "ConditionalExpression",
                                                 "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                   "type": "Identifier",
                                                   "name": "line"
                                                  },
                                                  "property": {
                                                   "type": "Literal",
                                                   "value": 1,
                                                   "raw": "1"
                                                  }
                                                 },
                                                 "consequent": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "line"
                                                    },
                                                    "property": {
                                                     "type": "Literal",
                                                     "value": 1,
                                                     "raw": "1"
                                                    }
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "split"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Literal",
                                                    "value": " ",
                                                    "raw": "\" \""
                                                   }
                                                  ]
                                                 },
                                                 "alternate": {
                                                  "type": "ArrayExpression",
                                                  "elements": []
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "ref"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "ConditionalExpression",
                                                 "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                   "type": "Identifier",
                                                   "name": "line"
                                                  },
                                                  "property": {
                                                   "type": "Literal",
                                                   "value": 2,
                                                   "raw": "2"
                                                  }
                                                 },
                                                 "consequent": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "line"
                                                    },
                                                    "property": {
                                                     "type": "Literal",
                                                     "value": 2,
                                                     "raw": "2"
                                                    }
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "split"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Literal",
                                                    "value": ", ",
                                                    "raw": "\", \""
                                                   }
                                                  ]
                                                 },
                                                 "alternate": {
                                                  "type": "ArrayExpression",
                                                  "elements": []
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "row"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "BinaryExpression",
                                                 "operator": "+",
                                                 "left": {
                                                  "type": "Identifier",
                                                  "name": "i"
                                                 },
                                                 "right": {
                                                  "type": "Literal",
                                                  "value": 1,
                                                  "raw": "1"
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "col"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "Literal",
                                                 "value": 0,
                                                 "raw": "0"
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "commit_date"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "ConditionalExpression",
                                                 "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                   "type": "Identifier",
                                                   "name": "line"
                                                  },
                                                  "property": {
                                                   "type": "Literal",
                                                   "value": 3,
                                                   "raw": "3"
                                                  }
                                                 },
                                                 "consequent": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "line"
                                                    },
                                                    "property": {
                                                     "type": "Literal",
                                                     "value": 3,
                                                     "raw": "3"
                                                    }
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "split"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Literal",
                                                    "value": ", ",
                                                    "raw": "\", \""
                                                   }
                                                  ]
                                                 },
                                                 "alternate": {
                                                  "type": "ArrayExpression",
                                                  "elements": []
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "committer_name"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "ConditionalExpression",
                                                 "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                   "type": "Identifier",
                                                   "name": "line"
                                                  },
                                                  "property": {
                                                   "type": "Literal",
                                                   "value": 4,
                                                   "raw": "4"
                                                  }
                                                 },
                                                 "consequent": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "line"
                                                    },
                                                    "property": {
                                                     "type": "Literal",
                                                     "value": 4,
                                                     "raw": "4"
                                                    }
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "split"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Literal",
                                                    "value": ", ",
                                                    "raw": "\", \""
                                                   }
                                                  ]
                                                 },
                                                 "alternate": {
                                                  "type": "ArrayExpression",
                                                  "elements": []
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "commit_msg"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "ConditionalExpression",
                                                 "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                   "type": "Identifier",
                                                   "name": "line"
                                                  },
                                                  "property": {
                                                   "type": "Literal",
                                                   "value": 5,
                                                   "raw": "5"
                                                  }
                                                 },
                                                 "consequent": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "line"
                                                    },
                                                    "property": {
                                                     "type": "Literal",
                                                     "value": 5,
                                                     "raw": "5"
                                                    }
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "split"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Literal",
                                                    "value": ", ",
                                                    "raw": "\", \""
                                                   }
                                                  ]
                                                 },
                                                 "alternate": {
                                                  "type": "ArrayExpression",
                                                  "elements": []
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               },
                                               {
                                                "type": "Property",
                                                "key": {
                                                 "type": "Identifier",
                                                 "name": "commit_files"
                                                },
                                                "computed": false,
                                                "value": {
                                                 "type": "ConditionalExpression",
                                                 "test": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                   "type": "Identifier",
                                                   "name": "line"
                                                  },
                                                  "property": {
                                                   "type": "Literal",
                                                   "value": 6,
                                                   "raw": "6"
                                                  }
                                                 },
                                                 "consequent": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "Identifier",
                                                    "name": "line"
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "slice"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Literal",
                                                    "value": 6,
                                                    "raw": "6"
                                                   }
                                                  ]
                                                 },
                                                 "alternate": {
                                                  "type": "ArrayExpression",
                                                  "elements": []
                                                 }
                                                },
                                                "kind": "init",
                                                "method": false,
                                                "shorthand": false
                                               }
                                              ]
                                             }
                                            }
                                           ],
                                           "kind": "let"
                                          },
                                          {
                                           "type": "IfStatement",
                                           "test": {
                                            "type": "UnaryExpression",
                                            "operator": "!",
                                            "argument": {
                                             "type": "MemberExpression",
                                             "computed": true,
                                             "object": {
                                              "type": "Identifier",
                                              "name": "forward_refs"
                                             },
                                             "property": {
                                              "type": "Identifier",
                                              "name": "hash"
                                             }
                                            },
                                            "prefix": true
                                           },
                                           "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                             {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                               "type": "CallExpression",
                                               "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "roots"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "push"
                                                }
                                               },
                                               "arguments": [
                                                {
                                                 "type": "Identifier",
                                                 "name": "hash"
                                                }
                                               ]
                                              }
                                             },
                                             {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                               "type": "AssignmentExpression",
                                               "operator": "=",
                                               "left": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "commit"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "root"
                                                }
                                               },
                                               "right": {
                                                "type": "Literal",
                                                "value": true,
                                                "raw": "true"
                                               }
                                              }
                                             }
                                            ]
                                           },
                                           "alternate": null
                                          },
                                          {
                                           "type": "ExpressionStatement",
                                           "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                             "type": "MemberExpression",
                                             "computed": false,
                                             "object": {
                                              "type": "Identifier",
                                              "name": "commits"
                                             },
                                             "property": {
                                              "type": "Identifier",
                                              "name": "push"
                                             }
                                            },
                                            "arguments": [
                                             {
                                              "type": "Identifier",
                                              "name": "commit"
                                             }
                                            ]
                                           }
                                          },
                                          {
                                           "type": "ExpressionStatement",
                                           "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                             "type": "MemberExpression",
                                             "computed": true,
                                             "object": {
                                              "type": "Identifier",
                                              "name": "commit_map"
                                             },
                                             "property": {
                                              "type": "Identifier",
                                              "name": "hash"
                                             }
                                            },
                                            "right": {
                                             "type": "Identifier",
                                             "name": "commit"
                                            }
                                           }
                                          },
                                          {
                                           "type": "ForOfStatement",
                                           "left": {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                             {
                                              "type": "VariableDeclarator",
                                              "id": {
                                               "type": "Identifier",
                                               "name": "c"
                                              },
                                              "init": null
                                             }
                                            ],
                                            "kind": "let"
                                           },
                                           "right": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                             "type": "Identifier",
                                             "name": "commit"
                                            },
                                            "property": {
                                             "type": "Identifier",
                                             "name": "children"
                                            }
                                           },
                                           "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                             {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                               "type": "AssignmentExpression",
                                               "operator": "=",
                                               "left": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "forward_refs"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "c"
                                                }
                                               },
                                               "right": {
                                                "type": "Literal",
                                                "value": true,
                                                "raw": "true"
                                               }
                                              }
                                             }
                                            ]
                                           }
                                          }
                                         ]
                                        },
                                        "alternate": null
                                       }
                                      ]
                                     }
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "stack"
                                       },
                                       "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                         "type": "MemberExpression",
                                         "computed": false,
                                         "object": {
                                          "type": "CallExpression",
                                          "callee": {
                                           "type": "MemberExpression",
                                           "computed": false,
                                           "object": {
                                            "type": "Identifier",
                                            "name": "roots"
                                           },
                                           "property": {
                                            "type": "Identifier",
                                            "name": "map"
                                           }
                                          },
                                          "arguments": [
                                           {
                                            "type": "FunctionExpression",
                                            "id": null,
                                            "params": [
                                             {
                                              "type": "Identifier",
                                              "name": "hash"
                                             }
                                            ],
                                            "body": {
                                             "type": "BlockStatement",
                                             "body": [
                                              {
                                               "type": "ReturnStatement",
                                               "argument": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "commit_map"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "hash"
                                                }
                                               }
                                              }
                                             ]
                                            },
                                            "generator": false,
                                            "expression": false,
                                            "async": false
                                           }
                                          ]
                                         },
                                         "property": {
                                          "type": "Identifier",
                                          "name": "reverse"
                                         }
                                        },
                                        "arguments": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "visited"
                                       },
                                       "init": {
                                        "type": "ObjectExpression",
                                        "properties": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "VariableDeclaration",
                                     "declarations": [
                                      {
                                       "type": "VariableDeclarator",
                                       "id": {
                                        "type": "Identifier",
                                        "name": "paths"
                                       },
                                       "init": {
                                        "type": "ArrayExpression",
                                        "elements": []
                                       }
                                      }
                                     ],
                                     "kind": "let"
                                    },
                                    {
                                     "type": "WhileStatement",
                                     "test": {
                                      "type": "BinaryExpression",
                                      "operator": ">",
                                      "left": {
                                       "type": "MemberExpression",
                                       "computed": false,
                                       "object": {
                                        "type": "Identifier",
                                        "name": "stack"
                                       },
                                       "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                       }
                                      },
                                      "right": {
                                       "type": "Literal",
                                       "value": 0,
                                       "raw": "0"
                                      }
                                     },
                                     "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                       {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                         {
                                          "type": "VariableDeclarator",
                                          "id": {
                                           "type": "Identifier",
                                           "name": "commit"
                                          },
                                          "init": {
                                           "type": "CallExpression",
                                           "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                             "type": "Identifier",
                                             "name": "stack"
                                            },
                                            "property": {
                                             "type": "Identifier",
                                             "name": "pop"
                                            }
                                           },
                                           "arguments": []
                                          }
                                         }
                                        ],
                                        "kind": "let"
                                       },
                                       {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                         "type": "AssignmentExpression",
                                         "operator": "=",
                                         "left": {
                                          "type": "MemberExpression",
                                          "computed": true,
                                          "object": {
                                           "type": "Identifier",
                                           "name": "visited"
                                          },
                                          "property": {
                                           "type": "MemberExpression",
                                           "computed": false,
                                           "object": {
                                            "type": "Identifier",
                                            "name": "commit"
                                           },
                                           "property": {
                                            "type": "Identifier",
                                            "name": "hash"
                                           }
                                          }
                                         },
                                         "right": {
                                          "type": "Literal",
                                          "value": true,
                                          "raw": "true"
                                         }
                                        }
                                       },
                                       {
                                        "type": "IfStatement",
                                        "test": {
                                         "type": "UnaryExpression",
                                         "operator": "!",
                                         "argument": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                           "type": "Identifier",
                                           "name": "commit"
                                          },
                                          "property": {
                                           "type": "Identifier",
                                           "name": "col"
                                          }
                                         },
                                         "prefix": true
                                        },
                                        "consequent": {
                                         "type": "BlockStatement",
                                         "body": [
                                          {
                                           "type": "ExpressionStatement",
                                           "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                             "type": "MemberExpression",
                                             "computed": false,
                                             "object": {
                                              "type": "Identifier",
                                              "name": "commit"
                                             },
                                             "property": {
                                              "type": "Identifier",
                                              "name": "col"
                                             }
                                            },
                                            "right": {
                                             "type": "UpdateExpression",
                                             "operator": "++",
                                             "argument": {
                                              "type": "Identifier",
                                              "name": "maxcolumn"
                                             },
                                             "prefix": false
                                            }
                                           }
                                          }
                                         ]
                                        },
                                        "alternate": {
                                         "type": "BlockStatement",
                                         "body": [
                                          {
                                           "type": "ExpressionStatement",
                                           "expression": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                             "type": "Identifier",
                                             "name": "maxcolumn"
                                            },
                                            "right": {
                                             "type": "CallExpression",
                                             "callee": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                               "type": "Identifier",
                                               "name": "Math"
                                              },
                                              "property": {
                                               "type": "Identifier",
                                               "name": "max"
                                              }
                                             },
                                             "arguments": [
                                              {
                                               "type": "Identifier",
                                               "name": "maxcolumn"
                                              },
                                              {
                                               "type": "MemberExpression",
                                               "computed": false,
                                               "object": {
                                                "type": "Identifier",
                                                "name": "commit"
                                               },
                                               "property": {
                                                "type": "Identifier",
                                                "name": "col"
                                               }
                                              }
                                             ]
                                            }
                                           }
                                          }
                                         ]
                                        }
                                       },
                                       {
                                        "type": "ForStatement",
                                        "init": {
                                         "type": "VariableDeclaration",
                                         "declarations": [
                                          {
                                           "type": "VariableDeclarator",
                                           "id": {
                                            "type": "Identifier",
                                            "name": "i"
                                           },
                                           "init": {
                                            "type": "BinaryExpression",
                                            "operator": "-",
                                            "left": {
                                             "type": "MemberExpression",
                                             "computed": false,
                                             "object": {
                                              "type": "MemberExpression",
                                              "computed": false,
                                              "object": {
                                               "type": "Identifier",
                                               "name": "commit"
                                              },
                                              "property": {
                                               "type": "Identifier",
                                               "name": "children"
                                              }
                                             },
                                             "property": {
                                              "type": "Identifier",
                                              "name": "length"
                                             }
                                            },
                                            "right": {
                                             "type": "Literal",
                                             "value": 1,
                                             "raw": "1"
                                            }
                                           }
                                          }
                                         ],
                                         "kind": "let"
                                        },
                                        "test": {
                                         "type": "BinaryExpression",
                                         "operator": ">=",
                                         "left": {
                                          "type": "Identifier",
                                          "name": "i"
                                         },
                                         "right": {
                                          "type": "Literal",
                                          "value": 0,
                                          "raw": "0"
                                         }
                                        },
                                        "update": {
                                         "type": "UpdateExpression",
                                         "operator": "--",
                                         "argument": {
                                          "type": "Identifier",
                                          "name": "i"
                                         },
                                         "prefix": false
                                        },
                                        "body": {
                                         "type": "BlockStatement",
                                         "body": [
                                          {
                                           "type": "VariableDeclaration",
                                           "declarations": [
                                            {
                                             "type": "VariableDeclarator",
                                             "id": {
                                              "type": "Identifier",
                                              "name": "child_hash"
                                             },
                                             "init": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                               "type": "MemberExpression",
                                               "computed": false,
                                               "object": {
                                                "type": "Identifier",
                                                "name": "commit"
                                               },
                                               "property": {
                                                "type": "Identifier",
                                                "name": "children"
                                               }
                                              },
                                              "property": {
                                               "type": "Identifier",
                                               "name": "i"
                                              }
                                             }
                                            }
                                           ],
                                           "kind": "let"
                                          },
                                          {
                                           "type": "VariableDeclaration",
                                           "declarations": [
                                            {
                                             "type": "VariableDeclarator",
                                             "id": {
                                              "type": "Identifier",
                                              "name": "child"
                                             },
                                             "init": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                               "type": "Identifier",
                                               "name": "commit_map"
                                              },
                                              "property": {
                                               "type": "MemberExpression",
                                               "computed": true,
                                               "object": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "commit"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "children"
                                                }
                                               },
                                               "property": {
                                                "type": "Identifier",
                                                "name": "i"
                                               }
                                              }
                                             }
                                            }
                                           ],
                                           "kind": "let"
                                          },
                                          {
                                           "type": "IfStatement",
                                           "test": {
                                            "type": "Identifier",
                                            "name": "child"
                                           },
                                           "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                             {
                                              "type": "IfStatement",
                                              "test": {
                                               "type": "UnaryExpression",
                                               "operator": "!",
                                               "argument": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "visited"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "child_hash"
                                                }
                                               },
                                               "prefix": true
                                              },
                                              "consequent": {
                                               "type": "BlockStatement",
                                               "body": [
                                                {
                                                 "type": "ExpressionStatement",
                                                 "expression": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "Identifier",
                                                    "name": "child"
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "col"
                                                   }
                                                  },
                                                  "right": {
                                                   "type": "BinaryExpression",
                                                   "operator": "+",
                                                   "left": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "commit"
                                                    },
                                                    "property": {
                                                     "type": "Identifier",
                                                     "name": "col"
                                                    }
                                                   },
                                                   "right": {
                                                    "type": "Identifier",
                                                    "name": "i"
                                                   }
                                                  }
                                                 }
                                                },
                                                {
                                                 "type": "ExpressionStatement",
                                                 "expression": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                   "type": "MemberExpression",
                                                   "computed": false,
                                                   "object": {
                                                    "type": "Identifier",
                                                    "name": "stack"
                                                   },
                                                   "property": {
                                                    "type": "Identifier",
                                                    "name": "push"
                                                   }
                                                  },
                                                  "arguments": [
                                                   {
                                                    "type": "Identifier",
                                                    "name": "child"
                                                   }
                                                  ]
                                                 }
                                                }
                                               ]
                                              },
                                              "alternate": null
                                             },
                                             {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                               "type": "CallExpression",
                                               "callee": {
                                                "type": "MemberExpression",
                                                "computed": false,
                                                "object": {
                                                 "type": "Identifier",
                                                 "name": "paths"
                                                },
                                                "property": {
                                                 "type": "Identifier",
                                                 "name": "push"
                                                }
                                               },
                                               "arguments": [
                                                {
                                                 "type": "ObjectExpression",
                                                 "properties": [
                                                  {
                                                   "type": "Property",
                                                   "key": {
                                                    "type": "Identifier",
                                                    "name": "from"
                                                   },
                                                   "computed": false,
                                                   "value": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "commit"
                                                    },
                                                    "property": {
                                                     "type": "Identifier",
                                                     "name": "hash"
                                                    }
                                                   },
                                                   "kind": "init",
                                                   "method": false,
                                                   "shorthand": false
                                                  },
                                                  {
                                                   "type": "Property",
                                                   "key": {
                                                    "type": "Identifier",
                                                    "name": "to"
                                                   },
                                                   "computed": false,
                                                   "value": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                     "type": "Identifier",
                                                     "name": "child"
                                                    },
                                                    "property": {
                                                     "type": "Identifier",
                                                     "name": "hash"
                                                    }
                                                   },
                                                   "kind": "init",
                                                   "method": false,
                                                   "shorthand": false
                                                  }
                                                 ]
                                                }
                                               ]
                                              }
                                             }
                                            ]
                                           },
                                           "alternate": null
                                          }
                                         ]
                                        }
                                       }
                                      ]
                                     }
                                    },
                                    {
                                     "type": "ReturnStatement",
                                     "argument": {
                                      "type": "ObjectExpression",
                                      "properties": [
                                       {
                                        "type": "Property",
                                        "key": {
                                         "type": "Identifier",
                                         "name": "maxcolumn"
                                        },
                                        "computed": false,
                                        "value": {
                                         "type": "Identifier",
                                         "name": "maxcolumn"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                       },
                                       {
                                        "type": "Property",
                                        "key": {
                                         "type": "Identifier",
                                         "name": "roots"
                                        },
                                        "computed": false,
                                        "value": {
                                         "type": "Identifier",
                                         "name": "roots"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                       },
                                       {
                                        "type": "Property",
                                        "key": {
                                         "type": "Identifier",
                                         "name": "commits"
                                        },
                                        "computed": false,
                                        "value": {
                                         "type": "Identifier",
                                         "name": "commits"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                       },
                                       {
                                        "type": "Property",
                                        "key": {
                                         "type": "Identifier",
                                         "name": "paths"
                                        },
                                        "computed": false,
                                        "value": {
                                         "type": "Identifier",
                                         "name": "paths"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": false
                                       }
                                      ]
                                     }
                                    }
                                   ]
                                  },
                                  "generator": false,
                                  "expression": false,
                                  "async": false
                                 },
                                 {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                   {
                                    "type": "VariableDeclarator",
                                    "id": {
                                     "type": "Identifier",
                                     "name": "graph"
                                    },
                                    "init": {
                                     "type": "CallExpression",
                                     "callee": {
                                      "type": "Identifier",
                                      "name": "make_graph_from_gitlog"
                                     },
                                     "arguments": [
                                      {
                                       "type": "Identifier",
                                       "name": "gitlog"
                                      }
                                     ]
                                    }
                                   }
                                  ],
                                  "kind": "let"
                                 },
                                 {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                   {
                                    "type": "VariableDeclarator",
                                    "id": {
                                     "type": "Identifier",
                                     "name": "graphjson"
                                    },
                                    "init": {
                                     "type": "CallExpression",
                                     "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                       "type": "Identifier",
                                       "name": "pako"
                                      },
                                      "property": {
                                       "type": "Identifier",
                                       "name": "deflate"
                                      }
                                     },
                                     "arguments": [
                                      {
                                       "type": "CallExpression",
                                       "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                         "type": "Identifier",
                                         "name": "JSON"
                                        },
                                        "property": {
                                         "type": "Identifier",
                                         "name": "stringify"
                                        }
                                       },
                                       "arguments": [
                                        {
                                         "type": "Identifier",
                                         "name": "graph"
                                        }
                                       ]
                                      },
                                      {
                                       "type": "ObjectExpression",
                                       "properties": [
                                        {
                                         "type": "Property",
                                         "key": {
                                          "type": "Identifier",
                                          "name": "to"
                                         },
                                         "computed": false,
                                         "value": {
                                          "type": "Literal",
                                          "value": "string",
                                          "raw": "'string'"
                                         },
                                         "kind": "init",
                                         "method": false,
                                         "shorthand": false
                                        }
                                       ]
                                      }
                                     ]
                                    }
                                   }
                                  ],
                                  "kind": "let"
                                 },
                                 {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                   "type": "CallExpression",
                                   "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                     "type": "Identifier",
                                     "name": "ws"
                                    },
                                    "property": {
                                     "type": "Identifier",
                                     "name": "send"
                                    }
                                   },
                                   "arguments": [
                                    {
                                     "type": "BinaryExpression",
                                     "operator": "+",
                                     "left": {
                                      "type": "Literal",
                                      "value": "gitLog?",
                                      "raw": "\"gitLog?\""
                                     },
                                     "right": {
                                      "type": "Identifier",
                                      "name": "graphjson"
                                     }
                                    }
                                   ]
                                  }
                                 }
                                ]
                               },
                               "generator": false,
                               "expression": false,
                               "async": false
                              }
                             ]
                            }
                           }
                          ]
                         },
                         "generator": false,
                         "expression": false,
                         "async": false
                        }
                       ]
                      }
                     },
                     {
                      "type": "BreakStatement",
                      "label": null
                     }
                    ]
                   },
                   {
                    "type": "SwitchCase",
                    "test": null,
                    "consequent": [
                     {
                      "type": "ExpressionStatement",
                      "expression": {
                       "type": "CallExpression",
                       "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                         "type": "Identifier",
                         "name": "console"
                        },
                        "property": {
                         "type": "Identifier",
                         "name": "log"
                        }
                       },
                       "arguments": [
                        {
                         "type": "Literal",
                         "value": "unknown cmd",
                         "raw": "\"unknown cmd\""
                        },
                        {
                         "type": "Identifier",
                         "name": "cmd"
                        },
                        {
                         "type": "Literal",
                         "value": "arg",
                         "raw": "\"arg\""
                        },
                        {
                         "type": "Identifier",
                         "name": "arg"
                        }
                       ]
                      }
                     }
                    ]
                   }
                  ]
                 }
                ]
               },
               "alternate": {
                "type": "BlockStatement",
                "body": []
               }
              }
             ]
            },
            "generator": false,
            "expression": false,
            "async": false
           }
          ]
         }
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "ws"
           },
           "property": {
            "type": "Identifier",
            "name": "on"
           }
          },
          "arguments": [
           {
            "type": "Literal",
            "value": "error",
            "raw": "'error'"
           },
           {
            "type": "FunctionExpression",
            "id": null,
            "params": [
             {
              "type": "Identifier",
              "name": "e"
             }
            ],
            "body": {
             "type": "BlockStatement",
             "body": [
              {
               "type": "IfStatement",
               "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                 "type": "MemberExpression",
                 "computed": false,
                 "object": {
                  "type": "Identifier",
                  "name": "e"
                 },
                 "property": {
                  "type": "Identifier",
                  "name": "message"
                 }
                },
                "right": {
                 "type": "Literal",
                 "value": "read ECONNRESET",
                 "raw": "\"read ECONNRESET\""
                }
               },
               "consequent": {
                "type": "BlockStatement",
                "body": []
               },
               "alternate": {
                "type": "BlockStatement",
                "body": [
                 {
                  "type": "ExpressionStatement",
                  "expression": {
                   "type": "CallExpression",
                   "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                     "type": "Identifier",
                     "name": "console"
                    },
                    "property": {
                     "type": "Identifier",
                     "name": "error"
                    }
                   },
                   "arguments": [
                    {
                     "type": "Literal",
                     "value": "websocket error: ",
                     "raw": "\"websocket error: \""
                    },
                    {
                     "type": "MemberExpression",
                     "computed": false,
                     "object": {
                      "type": "Identifier",
                      "name": "e"
                     },
                     "property": {
                      "type": "Identifier",
                      "name": "message"
                     }
                    }
                   ]
                  }
                 }
                ]
               }
              }
             ]
            },
            "generator": false,
            "expression": false,
            "async": false
           }
          ]
         }
        },
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "ws"
           },
           "property": {
            "type": "Identifier",
            "name": "on"
           }
          },
          "arguments": [
           {
            "type": "Literal",
            "value": "close",
            "raw": "'close'"
           },
           {
            "type": "FunctionExpression",
            "id": null,
            "params": [
             {
              "type": "Identifier",
              "name": "connection"
             }
            ],
            "body": {
             "type": "BlockStatement",
             "body": [
              {
               "type": "ExpressionStatement",
               "expression": {
                "type": "CallExpression",
                "callee": {
                 "type": "MemberExpression",
                 "computed": false,
                 "object": {
                  "type": "Identifier",
                  "name": "console"
                 },
                 "property": {
                  "type": "Identifier",
                  "name": "log"
                 }
                },
                "arguments": [
                 {
                  "type": "Literal",
                  "value": "client connection closed",
                  "raw": "\"client connection closed\""
                 }
                ]
               }
              },
              {
               "type": "ExpressionStatement",
               "expression": {
                "type": "UnaryExpression",
                "operator": "delete",
                "argument": {
                 "type": "MemberExpression",
                 "computed": true,
                 "object": {
                  "type": "Identifier",
                  "name": "sessions"
                 },
                 "property": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                   "type": "Identifier",
                   "name": "per_session_data"
                  },
                  "property": {
                   "type": "Identifier",
                   "name": "id"
                  }
                 }
                },
                "prefix": true
               }
              }
             ]
            },
            "generator": false,
            "expression": false,
            "async": false
           }
          ]
         }
        }
       ]
      },
      "generator": false,
      "expression": false,
      "async": false
     }
    ]
   }
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "Identifier",
      "name": "server"
     },
     "property": {
      "type": "Identifier",
      "name": "listen"
     }
    },
    "arguments": [
     {
      "type": "Literal",
      "value": 8080,
      "raw": "8080"
     },
     {
      "type": "FunctionExpression",
      "id": null,
      "params": [],
      "body": {
       "type": "BlockStatement",
       "body": [
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "console"
           },
           "property": {
            "type": "Identifier",
            "name": "log"
           }
          },
          "arguments": [
           {
            "type": "Literal",
            "value": "server listening on %d",
            "raw": "'server listening on %d'"
           },
           {
            "type": "MemberExpression",
            "computed": false,
            "object": {
             "type": "CallExpression",
             "callee": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
               "type": "Identifier",
               "name": "server"
              },
              "property": {
               "type": "Identifier",
               "name": "address"
              }
             },
             "arguments": []
            },
            "property": {
             "type": "Identifier",
             "name": "port"
            }
           }
          ]
         }
        }
       ]
      },
      "generator": false,
      "expression": false,
      "async": false
     }
    ]
   }
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "Identifier",
     "name": "setInterval"
    },
    "arguments": [
     {
      "type": "FunctionExpression",
      "id": null,
      "params": [],
      "body": {
       "type": "BlockStatement",
       "body": []
      },
      "generator": false,
      "expression": false,
      "async": false
     },
     {
      "type": "Literal",
      "value": 100,
      "raw": "100"
     }
    ]
   }
  },
  {
   "type": "FunctionDeclaration",
   "id": {
    "type": "Identifier",
    "name": "loadsim"
   },
   "params": [],
   "body": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "Identifier",
        "name": "alice_command"
       },
       "arguments": [
        {
         "type": "Literal",
         "value": "openlib",
         "raw": "\"openlib\""
        },
        {
         "type": "Identifier",
         "name": "projectlib"
        }
       ]
      }
     }
    ]
   },
   "generator": false,
   "expression": false,
   "async": false
  },
  {
   "type": "FunctionDeclaration",
   "id": {
    "type": "Identifier",
    "name": "unloadsim"
   },
   "params": [],
   "body": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "ExpressionStatement",
      "expression": {
       "type": "CallExpression",
       "callee": {
        "type": "Identifier",
        "name": "alice_command"
       },
       "arguments": [
        {
         "type": "Literal",
         "value": "closelib",
         "raw": "\"closelib\""
        },
        {
         "type": "Identifier",
         "name": "projectlib"
        }
       ]
      }
     }
    ]
   },
   "generator": false,
   "expression": false,
   "async": false
  },
  {
   "type": "VariableDeclaration",
   "declarations": [
    {
     "type": "VariableDeclarator",
     "id": {
      "type": "Identifier",
      "name": "watcher"
     },
     "init": {
      "type": "CallExpression",
      "callee": {
       "type": "MemberExpression",
       "computed": false,
       "object": {
        "type": "Identifier",
        "name": "chokidar"
       },
       "property": {
        "type": "Identifier",
        "name": "watch"
       }
      },
      "arguments": [
       {
        "type": "Identifier",
        "name": "project_path"
       },
       {
        "type": "ObjectExpression",
        "properties": [
         {
          "type": "Property",
          "key": {
           "type": "Identifier",
           "name": "ignored"
          },
          "computed": false,
          "value": {
           "type": "LogicalExpression",
           "operator": "||",
           "left": {
            "type": "BinaryExpression",
            "operator": "+",
            "left": {
             "type": "Identifier",
             "name": "project_path"
            },
            "right": {
             "type": "Literal",
             "value": "/.git",
             "raw": "\"/.git\""
            }
           },
           "right": {
            "type": "BinaryExpression",
            "operator": "+",
            "left": {
             "type": "Identifier",
             "name": "project_path"
            },
            "right": {
             "type": "Literal",
             "value": "+*",
             "raw": "\"+\\*\""
            }
           }
          },
          "kind": "init",
          "method": false,
          "shorthand": false
         }
        ]
       }
      ]
     }
    }
   ],
   "kind": "let"
  },
  {
   "type": "ExpressionStatement",
   "expression": {
    "type": "CallExpression",
    "callee": {
     "type": "MemberExpression",
     "computed": false,
     "object": {
      "type": "CallExpression",
      "callee": {
       "type": "MemberExpression",
       "computed": false,
       "object": {
        "type": "Identifier",
        "name": "watcher"
       },
       "property": {
        "type": "Identifier",
        "name": "on"
       }
      },
      "arguments": [
       {
        "type": "Literal",
        "value": "error",
        "raw": "'error'"
       },
       {
        "type": "ArrowFunctionExpression",
        "id": null,
        "params": [
         {
          "type": "Identifier",
          "name": "error"
         }
        ],
        "body": {
         "type": "CallExpression",
         "callee": {
          "type": "MemberExpression",
          "computed": false,
          "object": {
           "type": "Identifier",
           "name": "console"
          },
          "property": {
           "type": "Identifier",
           "name": "log"
          }
         },
         "arguments": [
          {
           "type": "TemplateLiteral",
           "quasis": [
            {
             "type": "TemplateElement",
             "value": {
              "raw": "Watcher error: ",
              "cooked": "Watcher error: "
             },
             "tail": false
            },
            {
             "type": "TemplateElement",
             "value": {
              "raw": "",
              "cooked": ""
             },
             "tail": true
            }
           ],
           "expressions": [
            {
             "type": "Identifier",
             "name": "error"
            }
           ]
          }
         ]
        },
        "generator": false,
        "expression": true,
        "async": false
       }
      ]
     },
     "property": {
      "type": "Identifier",
      "name": "on"
     }
    },
    "arguments": [
     {
      "type": "Literal",
      "value": "change",
      "raw": "'change'"
     },
     {
      "type": "ArrowFunctionExpression",
      "id": null,
      "params": [
       {
        "type": "Identifier",
        "name": "filepath"
       },
       {
        "type": "Identifier",
        "name": "stats"
       }
      ],
      "body": {
       "type": "BlockStatement",
       "body": [
        {
         "type": "SwitchStatement",
         "discriminant": {
          "type": "CallExpression",
          "callee": {
           "type": "MemberExpression",
           "computed": false,
           "object": {
            "type": "Identifier",
            "name": "path"
           },
           "property": {
            "type": "Identifier",
            "name": "extname"
           }
          },
          "arguments": [
           {
            "type": "Identifier",
            "name": "filepath"
           }
          ]
         },
         "cases": [
          {
           "type": "SwitchCase",
           "test": {
            "type": "Literal",
            "value": ".h",
            "raw": "\".h\""
           },
           "consequent": []
          },
          {
           "type": "SwitchCase",
           "test": {
            "type": "Literal",
            "value": ".cpp",
            "raw": "\".cpp\""
           },
           "consequent": [
            {
             "type": "BlockStatement",
             "body": [
              {
               "type": "TryStatement",
               "block": {
                "type": "BlockStatement",
                "body": [
                 {
                  "type": "ExpressionStatement",
                  "expression": {
                   "type": "CallExpression",
                   "callee": {
                    "type": "Identifier",
                    "name": "send_all_clients"
                   },
                   "arguments": [
                    {
                     "type": "BinaryExpression",
                     "operator": "+",
                     "left": {
                      "type": "Literal",
                      "value": "edit?",
                      "raw": "\"edit?\""
                     },
                     "right": {
                      "type": "CallExpression",
                      "callee": {
                       "type": "MemberExpression",
                       "computed": false,
                       "object": {
                        "type": "Identifier",
                        "name": "fs"
                       },
                       "property": {
                        "type": "Identifier",
                        "name": "readFileSync"
                       }
                      },
                      "arguments": [
                       {
                        "type": "Literal",
                        "value": "project.cpp",
                        "raw": "\"project.cpp\""
                       },
                       {
                        "type": "Literal",
                        "value": "utf8",
                        "raw": "\"utf8\""
                       }
                      ]
                     }
                    }
                   ]
                  }
                 }
                ]
               },
               "handler": {
                "type": "CatchClause",
                "param": {
                 "type": "Identifier",
                 "name": "e"
                },
                "body": {
                 "type": "BlockStatement",
                 "body": [
                  {
                   "type": "ExpressionStatement",
                   "expression": {
                    "type": "CallExpression",
                    "callee": {
                     "type": "MemberExpression",
                     "computed": false,
                     "object": {
                      "type": "Identifier",
                      "name": "console"
                     },
                     "property": {
                      "type": "Identifier",
                      "name": "error"
                     }
                    },
                    "arguments": [
                     {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                       "type": "Identifier",
                       "name": "e"
                      },
                      "property": {
                       "type": "Identifier",
                       "name": "message"
                      }
                     }
                    ]
                   }
                  }
                 ]
                }
               },
               "finalizer": null
              }
             ]
            },
            {
             "type": "BreakStatement",
             "label": null
            }
           ]
          },
          {
           "type": "SwitchCase",
           "test": null,
           "consequent": [
            {
             "type": "BlockStatement",
             "body": []
            }
           ]
          }
         ]
        }
       ]
      },
      "generator": false,
      "expression": false,
      "async": false
     }
    ]
   }
  },
  {
   "type": "FunctionDeclaration",
   "id": {
    "type": "Identifier",
    "name": "codeForensics"
   },
   "params": [],
   "body": {
    "type": "BlockStatement",
    "body": [
     {
      "type": "IfStatement",
      "test": {
       "type": "BinaryExpression",
       "operator": "==",
       "left": {
        "type": "MemberExpression",
        "computed": true,
        "object": {
         "type": "MemberExpression",
         "computed": false,
         "object": {
          "type": "Identifier",
          "name": "process"
         },
         "property": {
          "type": "Identifier",
          "name": "argv"
         }
        },
        "property": {
         "type": "Literal",
         "value": 3,
         "raw": "3"
        }
       },
       "right": {
        "type": "Literal",
        "value": "--forensics",
        "raw": "\"--forensics\""
       }
      },
      "consequent": {
       "type": "BlockStatement",
       "body": [
        {
         "type": "ExpressionStatement",
         "expression": {
          "type": "CallExpression",
          "callee": {
           "type": "Identifier",
           "name": "exec"
          },
          "arguments": [
           {
            "type": "Literal",
            "value": "gulp webserver",
            "raw": "'gulp webserver'"
           },
           {
            "type": "ObjectExpression",
            "properties": [
             {
              "type": "Property",
              "key": {
               "type": "Identifier",
               "name": "cwd"
              },
              "computed": false,
              "value": {
               "type": "Identifier",
               "name": "__dirname"
              },
              "kind": "init",
              "method": false,
              "shorthand": false
             }
            ]
           }
          ]
         }
        }
       ]
      },
      "alternate": null
     }
    ]
   },
   "generator": false,
   "expression": false,
   "async": false
  }
 ],
 "sourceType": "script"
}