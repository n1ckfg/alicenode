
Server has these roles:
- start up the alice processes (in part according to a project-level config)
- open a webserver for remote IDE of project source etc.
- manage git history etc. of this
- support hot-reloading sim.dll without interrupting services
- all run via a nodemon, so even a catastrophic crash can relaunch

Q: how can project-level JS code run in this server?
- project config can specify a startup script to run in server?

Q: does alice run in same process as node script (as dll), or spawned as separate process (as exe)?
- dll
	+ talk via FFI
	+ user script is also in same proc
	- harder to divert stdout to browser
	- render in separate thread (FFI needs to be thread safe though)
	- crash requires server restart
- exe
	- talk via IPC (more complicated)
	- user script also has to talk via IPC
	+ easy to divert stdout to browser
	+ render in main thread of separate process
	+ crash is just exe restart (better for debugging)



Browser talks to

	Editor proc (js) spawns
	--------------------------------
		+ Alice proc (c++) hot-loads 
		
		  Project dll (c++)
		  
		+ Project proc (js) 
			
			

///////
Code mirror + git:

DONE: how to get the current content of the ‘edit’ div. using this, we could replace the current  ‘editorCM’ with ‘mergeEditor’

DONE: Clicking on a git commit node should now inject the result of the ‘git show’ into an origRight. 

DONE: Need to resize the code mirror panes

Changing the code in the origEditor starts a new branch from that commit. i.e. “git checkout -b <newbranchname> <commit hash>” (this also checks out that branch)
	— set a dirty flag so that it ignores all new change events 
	- check to make sure we’re not already on a branch other than master
		if on master, make a new branch with “git checkout -b <newbranchname> <commit hash>”


GOOD NEWS: to work on multiple branches, we can use ‘git-worktree’

MAJOR ISSUE: can git-bit-picture look into the branches that are in the worktree? (Likely, as its only just looking at branches…)

Maybe useful when just devving: “git branch --list 'playBranch*' | xargs git branch -d” <<<<this will remove all branches created by the server.js (won’t delete master, and won’t delete branches created manually by user”


using work trees, If someone wants to checkout a branch that someone else has already , could do this ”git co -b TEMP/original-branch-name feature/original-branch-name
“ See https://spin.atomicobject.com/2016/06/26/parallelize-development-git-worktrees/
is there a better way to zoom in/navigate the git version tree graph in the browser?

Change server.js and merge.html, so that instead of:

	clicking on a commit node:
		-> git show hash:project.cpp
			-> put this code into origRight
				Then when user edits code in origRight, create new worktree @ newBranchName + onHash
					-> ‘cd onHash’
			****** The problem with this code above is that when a new branch is created, 

	 clicking on a commit:
		-> create new worktree @ newBranchName + onHash
			-> ‘cd onHash’
				-> ‘git show project.cpp’ //send this code to the origRight editor.
				-> store newBranchName in a table on disk alongside its onHash.


