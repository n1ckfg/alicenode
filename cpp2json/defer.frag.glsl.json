{
    "ast": "TranslationUnit",
    "filename": "/Users/mp/alicenode_inhabitat/defer.frag.glsl",
    "nodes": [
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 256,
                    "col": 1,
                    "line": 19
                },
                "end": {
                    "char": 273,
                    "col": 18,
                    "line": 19
                }
            },
            "name": "sampler2D",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 282,
                    "col": 1,
                    "line": 20
                },
                "end": {
                    "char": 299,
                    "col": 18,
                    "line": 20
                }
            },
            "name": "sampler2D",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 309,
                    "col": 1,
                    "line": 21
                },
                "end": {
                    "char": 326,
                    "col": 18,
                    "line": 21
                }
            },
            "name": "sampler2D",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 338,
                    "col": 1,
                    "line": 22
                },
                "end": {
                    "char": 355,
                    "col": 18,
                    "line": 22
                }
            },
            "name": "sampler3D",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 400,
                    "col": 1,
                    "line": 24
                },
                "end": {
                    "char": 417,
                    "col": 18,
                    "line": 24
                }
            },
            "name": "sampler3D",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 431,
                    "col": 1,
                    "line": 25
                },
                "end": {
                    "char": 448,
                    "col": 18,
                    "line": 25
                }
            },
            "name": "sampler3D",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 485,
                    "col": 1,
                    "line": 28
                },
                "end": {
                    "char": 497,
                    "col": 13,
                    "line": 28
                }
            },
            "name": "vec2",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 504,
                    "col": 1,
                    "line": 29
                },
                "end": {
                    "char": 516,
                    "col": 13,
                    "line": 29
                }
            },
            "name": "mat4",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 530,
                    "col": 1,
                    "line": 30
                },
                "end": {
                    "char": 542,
                    "col": 13,
                    "line": 30
                }
            },
            "name": "mat4",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 578,
                    "col": 1,
                    "line": 33
                },
                "end": {
                    "char": 585,
                    "col": 8,
                    "line": 33
                }
            },
            "name": "vec2",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 596,
                    "col": 1,
                    "line": 34
                },
                "end": {
                    "char": 603,
                    "col": 8,
                    "line": 34
                }
            },
            "name": "vec3",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 646,
                    "col": 1,
                    "line": 36
                },
                "end": {
                    "char": 654,
                    "col": 9,
                    "line": 36
                }
            },
            "name": "vec4",
            "type": "int"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 693,
                    "col": 1,
                    "line": 40
                },
                "end": {
                    "char": 935,
                    "col": 2,
                    "line": 50
                }
            },
            "mangled_name": "__Z3skyi",
            "name": "sky",
            "nodes": [
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 712,
                            "col": 20,
                            "line": 40
                        },
                        "end": {
                            "char": 935,
                            "col": 2,
                            "line": 50
                        }
                    },
                    "text": "{\n\tvec3 n = dir*0.5+0.5;\n\tfloat a = time * 0.3;\n\t// detail\n\tn.r = sin(2.*PI* n.r*n.g + a)*0.5+0.5;\n\tn.g = cos(2.*PI* n.r*n.g - a)*0.5+0.5;\n\t// simplify\n\tn.g = mix(n.g, n.r, 0.5);\n\t// lighten\n\treturn mix(n, vec3(0.), 0.5);\n}"
                }
            ],
            "type": "int (int)",
            "type_args": [
                "int"
            ],
            "type_ret": "int"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 937,
                    "col": 1,
                    "line": 52
                },
                "end": {
                    "char": 1046,
                    "col": 2,
                    "line": 55
                }
            },
            "mangled_name": "__Z6fScenei",
            "name": "fScene",
            "nodes": [
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 950,
                            "col": 14,
                            "line": 52
                        },
                        "end": {
                            "char": 956,
                            "col": 20,
                            "line": 52
                        }
                    },
                    "name": "p",
                    "type": "int"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 958,
                            "col": 22,
                            "line": 52
                        },
                        "end": {
                            "char": 1046,
                            "col": 2,
                            "line": 55
                        }
                    },
                    "text": "{\n\tvec3 tc = (uFluidMatrix * vec4(p, 1.)).xyz;\n    return texture(uDistanceTex, tc).x;\n}"
                }
            ],
            "type": "float (int)",
            "type_args": [
                "int"
            ],
            "type_ret": "float"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 1048,
                    "col": 1,
                    "line": 57
                },
                "end": {
                    "char": 1396,
                    "col": 2,
                    "line": 66
                }
            },
            "mangled_name": "__Z7normal4i",
            "name": "normal4",
            "nodes": [
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 1083,
                            "col": 36,
                            "line": 57
                        },
                        "end": {
                            "char": 1396,
                            "col": 2,
                            "line": 66
                        }
                    },
                    "text": "{\n\tvec2 e = vec2(-eps, eps);\n\t// tetrahedral points\n\tfloat t1 = fScene(p + e.yxx), t2 = fScene(p + e.xxy), t3 = fScene(p + e.xyx), t4 = fScene(p + e.yyy); \n\tvec3 n = (e.yxx*t1 + e.xxy*t2 + e.xyx*t3 + e.yyy*t4);\n\t// normalize for a consistent SDF:\n\t//return n / (4.*eps*eps);\n\t// otherwise:\n\treturn normalize(n);\n}"
                }
            ],
            "type": "int (int)",
            "type_args": [
                "int"
            ],
            "type_ret": "int"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 1398,
                    "col": 1,
                    "line": 68
                },
                "end": {
                    "char": 6763,
                    "col": 2,
                    "line": 234
                }
            },
            "mangled_name": "_main",
            "name": "main",
            "nodes": [
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 1410,
                            "col": 13,
                            "line": 68
                        },
                        "end": {
                            "char": 6763,
                            "col": 2,
                            "line": 234
                        }
                    },
                    "text": "{\n\tvec2 inverseDim = 1./uDim;\n\tvec3 sides = vec3(inverseDim, 0.);\n\tvec4 basecolor = texture(gColor, texCoord);\n\tvec3 normal = texture(gNormal, texCoord).xyz;\n\tvec3 position = texture(gPosition, texCoord).xyz;\n\n\t// TODO: fluid scale / transform?\n\tvec3 fluidtexcoord = (uFluidMatrix * vec4(position, 1.)).xyz;\n\t//vec3 fluidtexcoord = position; //\n\tvec3 fluid = texture(uFluidTex, fluidtexcoord).xyz;\n\tvec3 density = texture(uDensityTex, fluidtexcoord).xyz;\n\t//float land = texture(uLandTex, fluidtexcoord).x;\n\n\tfloat dist = texture(uDistanceTex, fluidtexcoord).x;\n\t\n\n\tvec3 view_position = (uViewMatrix * vec4(position, 1.)).xyz;\n\tfloat depth = length(view_position); \n\tfloat normalized_depth = depth/uFarClip;\n\tvec3 rd = normalize(ray_direction);\n\n\n\tvec3 color;\n\n\t// compare with next point:\n\tvec2 texCoordl = texCoord - sides.xz;\n\tvec2 texCoordr = texCoord + sides.xz;\n\tvec2 texCoordu = texCoord - sides.zy;\n\tvec2 texCoordd = texCoord + sides.zy;\n\n/*\n\tvec3 positionl = texture(gPosition, texCoordl).xyz;\n\tfloat depthl = length((uViewMatrix * vec4(positionl, 1.)).xyz); \n\tvec3 positionr = texture(gPosition, texCoordr).xyz;\n\tfloat depthr = length((uViewMatrix * vec4(positionr, 1.)).xyz); \n\tvec3 positionu = texture(gPosition, texCoordu).xyz;\n\tfloat depthu = length((uViewMatrix * vec4(positionu, 1.)).xyz); \n\tvec3 positiond = texture(gPosition, texCoordd).xyz;\n\tfloat depthd = length((uViewMatrix * vec4(positiond, 1.)).xyz); \n\tfloat depthn = (depthl + depthr + depthu + depthd) / 4.;\n\n\t// ao should kick in if the near pixels are closer (depthx is smaller)\n\t// but this should also decay exponentially\n\tfloat aol = 1.-abs(max(depth - depthn, 0.) - inverseDim.y*20.);\n\n\t// what we are really looking for here is the curvature (convex or concave)\n\t// and this depends on the normal\n\t// that is, the normal should tell us what the expected depth would be\n\t// dot of the normal with the ray, scaled by pixel size?\n\tfloat rayDotN = dot(rd, normal);\n\tfloat expectedDepthl = depth + rayDotN*sides.x;\n\tfloat diffl = depthl - expectedDepthl;\n*/\n\t// except, that we should be ignoring them if they are too large\n\n\t// set peak around 0.1, null around 1.\n\t//color.r = bump1(diff1, 0.1, 1.);\n\t\n\tcolor = basecolor.rgb;\n\t\n\t// reflection vector \n\tvec3 ref = reflect(rd, normal);\n\tfloat acute = abs(dot(normal, rd)); // how much surface faces us\n\tfloat oblique = 1.0 - acute; // how much surface is perpendicular to us\n\tcolor *= 1. - 0.5*oblique;\t\n\n\t// get environmental light from emissive sources\n\t// by lookup in the normal direction\n\tfloat nearby = .25;\n\tvec3 texcoord_for_normal = (uFluidMatrix * vec4(position + normal*nearby, 1.)).xyz;\n\tvec3 envcolor = texture(uDensityTex, texcoord_for_normal).rgb;\n\tvec3 texcoord_for_ref = (uFluidMatrix * vec4(position + ref*nearby, 1.)).xyz;\n\tvec3 envcolor_ref = texture(uDensityTex, texcoord_for_ref).rgb;\n\n\t//float metallic = acute;\n\tfloat metallic = acute;\n\t//color.rgb = mix(vec3(0.5), normal*0.5+0.5, 0.2);\n\tcolor.rgb = mix(sky(ref), sky(normal), metallic);\n\t\n\t// edge finding by depth difference:\n\t//float edges = 1.-clamp(depth-depthn, 0., 1.)*.5;\n\t//color.rgb *= edges;\n\n\t// patterning\n\tvec2 tc = basecolor.xy;\n\ttc = tc * 4.5/4.;\n\ttc = mod(tc, 2.) - 1.;\n\tfloat d = length(tc) - 0.9;\n\tcolor.rgb += d < -0.1 ? vec3(0.3) : vec3(0.);\n\n\t// env color\n\t//color.rgb = mix(color.rgb, envcolor, clamp(d + 0.5, 0., 1.));\n\t//color.rgb = envcolor;\n\t//color.rgb += 0.1*basecolor.xyz;\n\n\t//color.rgb = color.rgb * 0.1 + density;\n\t\n\t// fog effect:\n\tvec3 fogcolor = sky(rd);\n\t//float fogmix = clamp(normalized_depth, 0., 1.);\n\tfloat fogmix = smoothstep(uFarClip*0.25, uFarClip, depth);\n\n\n\n\t// base viz:\n\tcolor.rgb = basecolor.xyz;\n\n\t\n\n\t// uv grid viz:\n\tvec2 uvgrid = clamp(pow((mod(8.*basecolor.xy,1.)-0.5)*2., vec2(16.)), 0., 1.);\n\t//color.rgb = vec3(uvgrid.y);\n\t//color.rgb = vec3(sin(basecolor.xy * 2 * PI) *0.5 + 0.5, 0.);\n\t//color.rgb += vec3(max(uvgrid.x, uvgrid.y));\n\n\t// uv application test\n\tvec2 uvgridTest = clamp(pow((mod(8.*basecolor.xy,1.)-0.5)*2., vec2(16.)), 0., 1.);\n\t//vec2 uvgridTest = clamp(pow((8.*basecolor.xy-0.5)*2., vec2(16.)), 0., 1.);\n\t//color.rgb = vec3(sin(basecolor.xy * 2 * PI) *0.5 + 0.5, 0.);\n\t//color.rgb += vec3(max(uvgridTest.x, uvgridTest.y));\n\n\t// pos viz:\n\t//color.rgb = position.xyz;\n\t//color.rgb = mod(position.xyz * vec3(1.), 1.);\n\t\n\t// viewspace:\n\t//color.rgb = view_position;\n\n\t// normal viz:\n\t//color.rgb = normal*0.5+0.5;\n\n\t// reflection vectors\n\t//color.rgb = ref.xyz*0.5+0.5;\n\n\t// depth viz:\n\t//color.rgb = vec3(normalized_depth);\n\t//color.rgb = vec3(mod(normalized_depth * vec3(1., 8., 64.), 1.));\n\n\t// fluid viz:\n\t//color.rgb = mod(fluidtexcoord, 1.);\n\t//color.rgb = mod(fluidtexcoord * 32., 1);\n\t//color.rgb += fluid.xyz*50. - 0.25;\n\t//color.rgb = 0.5 + fluid.xyz*100;\n\n\t// paint bright when normals point in the same direction as fluid:\n\tfloat sameness =  dot(fluid.xyz * 100., normal);\n\t//color.rgb = mix(vec3(0.25), color.rgb, sameness);\n\t//color.rgb = density;\n\t//color.rgb = (normalize(density)*0.5+0.5) * length(density);\n\n\t//color.rg = vec2(land / 32.);\n\n\tfloat gamma = 1.4;\n\t//color = pow(color, vec3(gamma));\n\n\t//color.rgb = vec3(texCoord, 0.);\n\t//color.rgb = rd;\n\n\t//color.rgb = vec3(vec2(mod(dist * 16., 1.)), mod(position.x, 1.));\n\n\t//color += normal*0.25;\n\t\n\t//color.rgb = mix(color.rgb, fogcolor, fogmix);\n\tFragColor.rgb = color;\t\n\t//FragColor.rgb += vec3(texCoord, 0.);\n}"
                }
            ],
            "type": "void ()",
            "type_args": [],
            "type_ret": "void"
        }
    ]
}
