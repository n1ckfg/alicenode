{
    "ast": "TranslationUnit",
    "filename": "/Users/nicoleskrypuch/alicenode_inhabitat/project.cpp",
    "nodes": [
        {
            "ast": "StructDecl",
            "loc": {
                "begin": {
                    "char": 378,
                    "col": 1,
                    "line": 20
                },
                "end": {
                    "char": 3421,
                    "col": 2,
                    "line": 121
                }
            },
            "name": "GBuffer",
            "nodes": [
                {
                    "ast": "VarDecl",
                    "loc": {
                        "begin": {
                            "char": 397,
                            "col": 2,
                            "line": 22
                        },
                        "end": {
                            "char": 428,
                            "col": 33,
                            "line": 22
                        }
                    },
                    "name": "numBuffers",
                    "nodes": [
                        {
                            "ast": "IntegerLiteral",
                            "loc": {
                                "begin": {
                                    "char": 427,
                                    "col": 32,
                                    "line": 22
                                },
                                "end": {
                                    "char": 428,
                                    "col": 33,
                                    "line": 22
                                }
                            },
                            "type": "int",
                            "value": 3
                        }
                    ],
                    "type": "const int"
                },
                {
                    "ast": "FieldDecl",
                    "loc": {
                        "begin": {
                            "char": 432,
                            "col": 2,
                            "line": 24
                        },
                        "end": {
                            "char": 448,
                            "col": 18,
                            "line": 24
                        }
                    },
                    "name": "fbo",
                    "offsetof": 0,
                    "sizeof": 4,
                    "type": "unsigned int"
                },
                {
                    "ast": "FieldDecl",
                    "loc": {
                        "begin": {
                            "char": 451,
                            "col": 2,
                            "line": 25
                        },
                        "end": {
                            "char": 467,
                            "col": 18,
                            "line": 25
                        }
                    },
                    "name": "rbo",
                    "offsetof": 0,
                    "sizeof": 4,
                    "type": "unsigned int"
                },
                {
                    "ast": "FieldDecl",
                    "loc": {
                        "begin": {
                            "char": 470,
                            "col": 2,
                            "line": 26
                        },
                        "end": {
                            "char": 504,
                            "col": 36,
                            "line": 26
                        }
                    },
                    "name": "textures",
                    "offsetof": 0,
                    "sizeof": 4,
                    "type": "int"
                },
                {
                    "ast": "FieldDecl",
                    "loc": {
                        "begin": {
                            "char": 507,
                            "col": 2,
                            "line": 27
                        },
                        "end": {
                            "char": 544,
                            "col": 39,
                            "line": 27
                        }
                    },
                    "name": "attachments",
                    "offsetof": 0,
                    "sizeof": 4,
                    "type": "int"
                },
                {
                    "ast": "FieldDecl",
                    "comment": {
                        "text": "//GLint min_filter = GL_LINEAR; \n\t//GLint mag_filter = GL_LINEAR;"
                    },
                    "loc": {
                        "begin": {
                            "char": 615,
                            "col": 2,
                            "line": 31
                        },
                        "end": {
                            "char": 644,
                            "col": 31,
                            "line": 31
                        }
                    },
                    "name": "min_filter",
                    "nodes": [
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 615,
                                    "col": 2,
                                    "line": 31
                                },
                                "end": {
                                    "char": 620,
                                    "col": 7,
                                    "line": 31
                                }
                            },
                            "name": "GLint",
                            "type": "GLint"
                        },
                        {
                            "ast": "IntegerLiteral",
                            "loc": {
                                "begin": {
                                    "char": 634,
                                    "col": 21,
                                    "line": 31
                                },
                                "end": {
                                    "char": 644,
                                    "col": 31,
                                    "line": 31
                                }
                            },
                            "type": "int",
                            "value": 9728
                        }
                    ],
                    "offsetof": 0,
                    "sizeof": 4,
                    "type": "GLint"
                },
                {
                    "ast": "FieldDecl",
                    "loc": {
                        "begin": {
                            "char": 647,
                            "col": 2,
                            "line": 32
                        },
                        "end": {
                            "char": 676,
                            "col": 31,
                            "line": 32
                        }
                    },
                    "name": "mag_filter",
                    "nodes": [
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 647,
                                    "col": 2,
                                    "line": 32
                                },
                                "end": {
                                    "char": 652,
                                    "col": 7,
                                    "line": 32
                                }
                            },
                            "name": "GLint",
                            "type": "GLint"
                        },
                        {
                            "ast": "IntegerLiteral",
                            "loc": {
                                "begin": {
                                    "char": 666,
                                    "col": 21,
                                    "line": 32
                                },
                                "end": {
                                    "char": 676,
                                    "col": 31,
                                    "line": 32
                                }
                            },
                            "type": "int",
                            "value": 9728
                        }
                    ],
                    "offsetof": 0,
                    "sizeof": 4,
                    "type": "GLint"
                },
                {
                    "ast": "FieldDecl",
                    "loc": {
                        "begin": {
                            "char": 680,
                            "col": 2,
                            "line": 34
                        },
                        "end": {
                            "char": 694,
                            "col": 16,
                            "line": 34
                        }
                    },
                    "name": "dim",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 680,
                                    "col": 2,
                                    "line": 34
                                },
                                "end": {
                                    "char": 683,
                                    "col": 5,
                                    "line": 34
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 685,
                                    "col": 7,
                                    "line": 34
                                },
                                "end": {
                                    "char": 690,
                                    "col": 12,
                                    "line": 34
                                }
                            },
                            "name": "glm::ivec2",
                            "type": "glm::ivec2"
                        }
                    ],
                    "offsetof": 0,
                    "sizeof": -2,
                    "type": "glm::ivec2"
                },
                {
                    "ast": "CXXConstructor",
                    "loc": {
                        "begin": {
                            "char": 723,
                            "col": 2,
                            "line": 36
                        },
                        "end": {
                            "char": 820,
                            "col": 3,
                            "line": 39
                        }
                    },
                    "name": "GBuffer",
                    "nodes": [
                        {
                            "ast": "ParmDecl",
                            "loc": {
                                "begin": {
                                    "char": 731,
                                    "col": 10,
                                    "line": 36
                                },
                                "end": {
                                    "char": 749,
                                    "col": 28,
                                    "line": 36
                                }
                            },
                            "name": "numbuffers",
                            "nodes": [
                                {
                                    "ast": "IntegerLiteral",
                                    "loc": {
                                        "begin": {
                                            "char": 748,
                                            "col": 27,
                                            "line": 36
                                        },
                                        "end": {
                                            "char": 749,
                                            "col": 28,
                                            "line": 36
                                        }
                                    },
                                    "type": "int",
                                    "value": 3
                                }
                            ],
                            "type": "int"
                        },
                        {
                            "ast": "CompoundStmt",
                            "loc": {
                                "begin": {
                                    "char": 751,
                                    "col": 30,
                                    "line": 36
                                },
                                "end": {
                                    "char": 820,
                                    "col": 3,
                                    "line": 39
                                }
                            },
                            "text": "{\n\t\ttextures.resize(numbuffers);\n\t\tattachments.resize(numbuffers);\n\t}"
                        }
                    ],
                    "type": "void (int)"
                },
                {
                    "ast": "CXXMethod",
                    "loc": {
                        "begin": {
                            "char": 823,
                            "col": 2,
                            "line": 41
                        },
                        "end": {
                            "char": 1474,
                            "col": 3,
                            "line": 50
                        }
                    },
                    "mangled_name": "__ZN7GBuffer16configureTextureEiijj",
                    "name": "configureTexture",
                    "nodes": [
                        {
                            "ast": "ParmDecl",
                            "loc": {
                                "begin": {
                                    "char": 845,
                                    "col": 24,
                                    "line": 41
                                },
                                "end": {
                                    "char": 861,
                                    "col": 40,
                                    "line": 41
                                }
                            },
                            "name": "attachment",
                            "nodes": [
                                {
                                    "ast": "IntegerLiteral",
                                    "loc": {
                                        "begin": {
                                            "char": 860,
                                            "col": 39,
                                            "line": 41
                                        },
                                        "end": {
                                            "char": 861,
                                            "col": 40,
                                            "line": 41
                                        }
                                    },
                                    "type": "int",
                                    "value": 0
                                }
                            ],
                            "type": "int"
                        },
                        {
                            "ast": "ParmDecl",
                            "loc": {
                                "begin": {
                                    "char": 863,
                                    "col": 42,
                                    "line": 41
                                },
                                "end": {
                                    "char": 893,
                                    "col": 72,
                                    "line": 41
                                }
                            },
                            "name": "internalFormat",
                            "nodes": [
                                {
                                    "ast": "TypeRef",
                                    "loc": {
                                        "begin": {
                                            "char": 863,
                                            "col": 42,
                                            "line": 41
                                        },
                                        "end": {
                                            "char": 868,
                                            "col": 47,
                                            "line": 41
                                        }
                                    },
                                    "name": "GLint",
                                    "type": "GLint"
                                },
                                {
                                    "ast": "IntegerLiteral",
                                    "loc": {
                                        "begin": {
                                            "char": 886,
                                            "col": 65,
                                            "line": 41
                                        },
                                        "end": {
                                            "char": 893,
                                            "col": 72,
                                            "line": 41
                                        }
                                    },
                                    "type": "int",
                                    "value": 6408
                                }
                            ],
                            "type": "GLint"
                        },
                        {
                            "ast": "ParmDecl",
                            "loc": {
                                "begin": {
                                    "char": 895,
                                    "col": 74,
                                    "line": 41
                                },
                                "end": {
                                    "char": 918,
                                    "col": 97,
                                    "line": 41
                                }
                            },
                            "name": "format",
                            "nodes": [
                                {
                                    "ast": "TypeRef",
                                    "loc": {
                                        "begin": {
                                            "char": 895,
                                            "col": 74,
                                            "line": 41
                                        },
                                        "end": {
                                            "char": 901,
                                            "col": 80,
                                            "line": 41
                                        }
                                    },
                                    "name": "GLenum",
                                    "type": "GLenum"
                                },
                                {
                                    "ast": "IntegerLiteral",
                                    "loc": {
                                        "begin": {
                                            "char": 911,
                                            "col": 90,
                                            "line": 41
                                        },
                                        "end": {
                                            "char": 918,
                                            "col": 97,
                                            "line": 41
                                        }
                                    },
                                    "type": "int"
                                }
                            ],
                            "type": "GLenum"
                        },
                        {
                            "ast": "ParmDecl",
                            "loc": {
                                "begin": {
                                    "char": 920,
                                    "col": 99,
                                    "line": 41
                                },
                                "end": {
                                    "char": 950,
                                    "col": 129,
                                    "line": 41
                                }
                            },
                            "name": "type",
                            "nodes": [
                                {
                                    "ast": "TypeRef",
                                    "loc": {
                                        "begin": {
                                            "char": 920,
                                            "col": 99,
                                            "line": 41
                                        },
                                        "end": {
                                            "char": 926,
                                            "col": 105,
                                            "line": 41
                                        }
                                    },
                                    "name": "GLenum",
                                    "type": "GLenum"
                                },
                                {
                                    "ast": "IntegerLiteral",
                                    "loc": {
                                        "begin": {
                                            "char": 934,
                                            "col": 113,
                                            "line": 41
                                        },
                                        "end": {
                                            "char": 950,
                                            "col": 129,
                                            "line": 41
                                        }
                                    },
                                    "type": "int"
                                }
                            ],
                            "type": "GLenum"
                        },
                        {
                            "ast": "CompoundStmt",
                            "loc": {
                                "begin": {
                                    "char": 952,
                                    "col": 131,
                                    "line": 41
                                },
                                "end": {
                                    "char": 1474,
                                    "col": 3,
                                    "line": 50
                                }
                            },
                            "text": "{\n\t\tattachments[attachment] = GL_COLOR_ATTACHMENT0+attachment;\n\t\tglBindTexture(GL_TEXTURE_2D, textures[attachment]);\n\t\tglTexImage2D(GL_TEXTURE_2D, 0, internalFormat, dim.x, dim.y, 0, format, type, NULL);\n\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, min_filter);\n\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, mag_filter);\n\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);\n\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE); \n\t\tglBindTexture(GL_TEXTURE_2D, 0);\n\t}"
                        }
                    ],
                    "type": "void (int, GLint, GLenum, GLenum)",
                    "type_args": [
                        "int",
                        "GLint",
                        "GLenum",
                        "GLenum"
                    ],
                    "type_ret": "void"
                },
                {
                    "ast": "CXXMethod",
                    "loc": {
                        "begin": {
                            "char": 1478,
                            "col": 2,
                            "line": 52
                        },
                        "end": {
                            "char": 2702,
                            "col": 3,
                            "line": 87
                        }
                    },
                    "mangled_name": "__ZN7GBuffer12dest_changedEv",
                    "name": "dest_changed",
                    "nodes": [
                        {
                            "ast": "CompoundStmt",
                            "loc": {
                                "begin": {
                                    "char": 1498,
                                    "col": 22,
                                    "line": 52
                                },
                                "end": {
                                    "char": 2702,
                                    "col": 3,
                                    "line": 87
                                }
                            },
                            "text": "{\n\t\tdest_closing();\n\n\t\t// create the GPU objects:\n\t\tglGenFramebuffers(1, &fbo);\n\t\tglGenRenderbuffers(1, &rbo);\n\t\tglGenTextures(textures.size(), &textures[0]);\n\n\t\t// configure textures:\n\t\t// color buffer\n\t\tconfigureTexture(0, GL_RGBA, GL_RGBA, GL_UNSIGNED_BYTE);\n\t\t// normal buffer\n\t\tconfigureTexture(1, GL_RGB16F, GL_RGB, GL_FLOAT);\n\t\t// position buffer\n\t\tconfigureTexture(2, GL_RGB16F, GL_RGB, GL_FLOAT);\n\t\t\n\t\t// configure RBO:\n\t\tglBindRenderbuffer(GL_RENDERBUFFER, rbo);\n\t\tglRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT, dim.x, dim.y);\n\t\t// configure FBO:\n\t\tglBindFramebuffer(GL_FRAMEBUFFER, fbo);\n\t\t// specify RBO:\n\t\tglFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, rbo);\n\t\t// specify drawbuffers:\n\t\tglDrawBuffers(attachments.size(), &attachments[0]);\n\t\t// specify colour attachments:\n\t\tfor (int i=0; i<textures.size(); i++) {\n\t\t\tglFramebufferTexture2D(GL_FRAMEBUFFER, attachments[i], GL_TEXTURE_2D, textures[i], 0);\n\t\t}\n\t\t// check if framebuffer is complete\n\t\tif (glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE) {\n\t\t\tstd::cout << \"Framebuffer not complete!\" << std::endl;\n\t\t\tdest_closing();\n\t\t}\n\t\tglBindFramebuffer(GL_FRAMEBUFFER, 0);\n\t}"
                        }
                    ],
                    "type": "void ()",
                    "type_args": [],
                    "type_ret": "void"
                },
                {
                    "ast": "CXXMethod",
                    "loc": {
                        "begin": {
                            "char": 2705,
                            "col": 2,
                            "line": 89
                        },
                        "end": {
                            "char": 2963,
                            "col": 3,
                            "line": 103
                        }
                    },
                    "mangled_name": "__ZN7GBuffer12dest_closingEv",
                    "name": "dest_closing",
                    "nodes": [
                        {
                            "ast": "CompoundStmt",
                            "loc": {
                                "begin": {
                                    "char": 2725,
                                    "col": 22,
                                    "line": 89
                                },
                                "end": {
                                    "char": 2963,
                                    "col": 3,
                                    "line": 103
                                }
                            },
                            "text": "{\n\t\t// TODO\n\t\tif (fbo) {\n\t\t\tglDeleteFramebuffers(1, &fbo);\n\t\t\tfbo = 0;\n\t\t}\n\t\tif (rbo) {\n\t\t\tglDeleteRenderbuffers(1, &rbo);\n\t\t\trbo = 0;\n\t\t}\n\t\tif (textures[0]) {\n\t\t\tglDeleteTextures(textures.size(), &textures[0]);\n\t\t\ttextures[0] = 0;\n\t\t}\n\t}"
                        }
                    ],
                    "type": "void ()",
                    "type_args": [],
                    "type_ret": "void"
                },
                {
                    "ast": "CXXMethod",
                    "loc": {
                        "begin": {
                            "char": 2966,
                            "col": 2,
                            "line": 105
                        },
                        "end": {
                            "char": 3022,
                            "col": 58,
                            "line": 105
                        }
                    },
                    "mangled_name": "__ZN7GBuffer5beginEv",
                    "name": "begin",
                    "nodes": [
                        {
                            "ast": "CompoundStmt",
                            "loc": {
                                "begin": {
                                    "char": 2979,
                                    "col": 15,
                                    "line": 105
                                },
                                "end": {
                                    "char": 3022,
                                    "col": 58,
                                    "line": 105
                                }
                            },
                            "text": "{ glBindFramebuffer(GL_FRAMEBUFFER, fbo); }"
                        }
                    ],
                    "type": "void ()",
                    "type_args": [],
                    "type_ret": "void"
                },
                {
                    "ast": "CXXMethod",
                    "loc": {
                        "begin": {
                            "char": 3024,
                            "col": 2,
                            "line": 106
                        },
                        "end": {
                            "char": 3083,
                            "col": 61,
                            "line": 106
                        }
                    },
                    "mangled_name": "__ZN7GBuffer3endEv",
                    "name": "end",
                    "nodes": [
                        {
                            "ast": "CompoundStmt",
                            "loc": {
                                "begin": {
                                    "char": 3042,
                                    "col": 20,
                                    "line": 106
                                },
                                "end": {
                                    "char": 3083,
                                    "col": 61,
                                    "line": 106
                                }
                            },
                            "text": "{ glBindFramebuffer(GL_FRAMEBUFFER, 0); }"
                        }
                    ],
                    "type": "void ()",
                    "type_args": [],
                    "type_ret": "void"
                },
                {
                    "ast": "CXXMethod",
                    "loc": {
                        "begin": {
                            "char": 3086,
                            "col": 2,
                            "line": 108
                        },
                        "end": {
                            "char": 3252,
                            "col": 3,
                            "line": 113
                        }
                    },
                    "mangled_name": "__ZN7GBuffer12bindTexturesEv",
                    "name": "bindTextures",
                    "nodes": [
                        {
                            "ast": "CompoundStmt",
                            "loc": {
                                "begin": {
                                    "char": 3106,
                                    "col": 22,
                                    "line": 108
                                },
                                "end": {
                                    "char": 3252,
                                    "col": 3,
                                    "line": 113
                                }
                            },
                            "text": "{\n\t\tfor (int i=textures.size()-1; i>=0; i--) {\n        \tglActiveTexture(GL_TEXTURE0+i);\n        \tglBindTexture(GL_TEXTURE_2D, textures[i]);\n\t\t}\n\t}"
                        }
                    ],
                    "type": "void ()",
                    "type_args": [],
                    "type_ret": "void"
                },
                {
                    "ast": "CXXMethod",
                    "loc": {
                        "begin": {
                            "char": 3255,
                            "col": 2,
                            "line": 115
                        },
                        "end": {
                            "char": 3419,
                            "col": 3,
                            "line": 120
                        }
                    },
                    "mangled_name": "__ZN7GBuffer14unbindTexturesEv",
                    "name": "unbindTextures",
                    "nodes": [
                        {
                            "ast": "CompoundStmt",
                            "loc": {
                                "begin": {
                                    "char": 3277,
                                    "col": 24,
                                    "line": 115
                                },
                                "end": {
                                    "char": 3419,
                                    "col": 3,
                                    "line": 120
                                }
                            },
                            "text": "{\n        for (int i=textures.size()-1; i>=0; i--) {\n        \tglActiveTexture(GL_TEXTURE0+i);\n        \tglBindTexture(GL_TEXTURE_2D, 0);\n\t\t}\n\t}"
                        }
                    ],
                    "type": "void ()",
                    "type_args": [],
                    "type_ret": "void"
                }
            ],
            "type": "GBuffer"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 3562,
                    "col": 1,
                    "line": 127
                },
                "end": {
                    "char": 3932,
                    "col": 2,
                    "line": 134
                }
            },
            "mangled_name": "__Z18make_orthogonal_toN3glm5tvec3IfLNS_9precisionE0EEES2_",
            "name": "make_orthogonal_to",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 3562,
                            "col": 1,
                            "line": 127
                        },
                        "end": {
                            "char": 3565,
                            "col": 4,
                            "line": 127
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 3567,
                            "col": 6,
                            "line": 127
                        },
                        "end": {
                            "char": 3571,
                            "col": 10,
                            "line": 127
                        }
                    },
                    "name": "glm::vec3",
                    "type": "glm::vec3"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 3591,
                            "col": 30,
                            "line": 127
                        },
                        "end": {
                            "char": 3608,
                            "col": 47,
                            "line": 127
                        }
                    },
                    "name": "v",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 3591,
                                    "col": 30,
                                    "line": 127
                                },
                                "end": {
                                    "char": 3594,
                                    "col": 33,
                                    "line": 127
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 3596,
                                    "col": 35,
                                    "line": 127
                                },
                                "end": {
                                    "char": 3600,
                                    "col": 39,
                                    "line": 127
                                }
                            },
                            "name": "glm::vec3",
                            "type": "glm::vec3"
                        }
                    ],
                    "type": "const glm::vec3"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 3610,
                            "col": 49,
                            "line": 127
                        },
                        "end": {
                            "char": 3632,
                            "col": 71,
                            "line": 127
                        }
                    },
                    "name": "normal",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 3610,
                                    "col": 49,
                                    "line": 127
                                },
                                "end": {
                                    "char": 3613,
                                    "col": 52,
                                    "line": 127
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 3615,
                                    "col": 54,
                                    "line": 127
                                },
                                "end": {
                                    "char": 3619,
                                    "col": 58,
                                    "line": 127
                                }
                            },
                            "name": "glm::vec3",
                            "type": "glm::vec3"
                        }
                    ],
                    "type": "const glm::vec3"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 3634,
                            "col": 73,
                            "line": 127
                        },
                        "end": {
                            "char": 3932,
                            "col": 2,
                            "line": 134
                        }
                    },
                    "text": "{\n\t// get component of v along normal:\n\tglm::vec3 normal_component = normal * (dot(v, normal));\n\t// remove this component from v:\n\tglm::vec3 without_normal_component = v - normal_component;\n\t// and re-scale to original magnitude:\n\treturn safe_normalize(without_normal_component) * glm::length(v);\n}"
                }
            ],
            "type": "glm::vec3 (const glm::vec3, const glm::vec3)",
            "type_args": [
                "const glm::vec3",
                "const glm::vec3"
            ],
            "type_ret": "glm::vec3"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 4101,
                    "col": 1,
                    "line": 139
                },
                "end": {
                    "char": 4680,
                    "col": 2,
                    "line": 153
                }
            },
            "mangled_name": "__Z11align_up_toN3glm5tquatIfLNS_9precisionE0EEENS_5tvec3IfLS1_0EEE",
            "name": "align_up_to",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 4101,
                            "col": 1,
                            "line": 139
                        },
                        "end": {
                            "char": 4104,
                            "col": 4,
                            "line": 139
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 4106,
                            "col": 6,
                            "line": 139
                        },
                        "end": {
                            "char": 4110,
                            "col": 10,
                            "line": 139
                        }
                    },
                    "name": "glm::quat",
                    "type": "glm::quat"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 4123,
                            "col": 23,
                            "line": 139
                        },
                        "end": {
                            "char": 4140,
                            "col": 40,
                            "line": 139
                        }
                    },
                    "name": "q",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 4123,
                                    "col": 23,
                                    "line": 139
                                },
                                "end": {
                                    "char": 4126,
                                    "col": 26,
                                    "line": 139
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 4128,
                                    "col": 28,
                                    "line": 139
                                },
                                "end": {
                                    "char": 4132,
                                    "col": 32,
                                    "line": 139
                                }
                            },
                            "name": "glm::quat",
                            "type": "glm::quat"
                        }
                    ],
                    "type": "const glm::quat"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 4142,
                            "col": 42,
                            "line": 139
                        },
                        "end": {
                            "char": 4164,
                            "col": 64,
                            "line": 139
                        }
                    },
                    "name": "normal",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 4142,
                                    "col": 42,
                                    "line": 139
                                },
                                "end": {
                                    "char": 4145,
                                    "col": 45,
                                    "line": 139
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 4147,
                                    "col": 47,
                                    "line": 139
                                },
                                "end": {
                                    "char": 4151,
                                    "col": 51,
                                    "line": 139
                                }
                            },
                            "name": "glm::vec3",
                            "type": "glm::vec3"
                        }
                    ],
                    "type": "const glm::vec3"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 4166,
                            "col": 66,
                            "line": 139
                        },
                        "end": {
                            "char": 4680,
                            "col": 2,
                            "line": 153
                        }
                    },
                    "text": "{\n\tconst float eps = 0.00001f;\n\t// get q's up vector:\n\tglm::vec3 uy = quat_uy(q);\n\t// get similarity with normal:\n\tfloat dp = glm::dot(uy, normal);\n\t// if `direction` is already similar to `dir`, leave as-is\n\tif (fabsf(dp) < eps) return q; \n\t// find an orthogonal axis to rotate around:\n\tglm::vec3 axis = glm::cross(uy, normal);\n\t// get the rotation needed around this axis:\n\tglm::quat diff = glm::angleAxis(acosf(dp), axis);\n\t// rotate the original quat to align to the normal:\n\treturn safe_normalize(diff * q);\n}"
                }
            ],
            "type": "glm::quat (const glm::quat, const glm::vec3)",
            "type_args": [
                "const glm::quat",
                "const glm::vec3"
            ],
            "type_ret": "glm::quat"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 4801,
                    "col": 1,
                    "line": 157
                },
                "end": {
                    "char": 5577,
                    "col": 2,
                    "line": 174
                }
            },
            "mangled_name": "__Z16align_forward_toN3glm5tquatIfLNS_9precisionE0EEENS_5tvec3IfLS1_0EEE",
            "name": "align_forward_to",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 4801,
                            "col": 1,
                            "line": 157
                        },
                        "end": {
                            "char": 4804,
                            "col": 4,
                            "line": 157
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 4806,
                            "col": 6,
                            "line": 157
                        },
                        "end": {
                            "char": 4810,
                            "col": 10,
                            "line": 157
                        }
                    },
                    "name": "glm::quat",
                    "type": "glm::quat"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 4828,
                            "col": 28,
                            "line": 157
                        },
                        "end": {
                            "char": 4845,
                            "col": 45,
                            "line": 157
                        }
                    },
                    "name": "q",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 4828,
                                    "col": 28,
                                    "line": 157
                                },
                                "end": {
                                    "char": 4831,
                                    "col": 31,
                                    "line": 157
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 4833,
                                    "col": 33,
                                    "line": 157
                                },
                                "end": {
                                    "char": 4837,
                                    "col": 37,
                                    "line": 157
                                }
                            },
                            "name": "glm::quat",
                            "type": "glm::quat"
                        }
                    ],
                    "type": "const glm::quat"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 4847,
                            "col": 47,
                            "line": 157
                        },
                        "end": {
                            "char": 4872,
                            "col": 72,
                            "line": 157
                        }
                    },
                    "name": "direction",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 4847,
                                    "col": 47,
                                    "line": 157
                                },
                                "end": {
                                    "char": 4850,
                                    "col": 50,
                                    "line": 157
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 4852,
                                    "col": 52,
                                    "line": 157
                                },
                                "end": {
                                    "char": 4856,
                                    "col": 56,
                                    "line": 157
                                }
                            },
                            "name": "glm::vec3",
                            "type": "glm::vec3"
                        }
                    ],
                    "type": "const glm::vec3"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 4874,
                            "col": 74,
                            "line": 157
                        },
                        "end": {
                            "char": 5577,
                            "col": 2,
                            "line": 174
                        }
                    },
                    "text": "{\n\tconst float eps = 0.00001f;\n\tfloat d = glm::length(direction);\n\t// if `direction` is too small, any direction is as good as any other... no change needed\n\tif (fabsf(d) < eps) return q; \n\t// get similarity with direction:\n\tglm::vec3 desired = safe_normalize(direction);\n\tglm::vec3 uf = quat_uf(q);\n\tfloat dp = glm::dot(uf, desired); \n\t// if `direction` is already similar to `dir`, leave as-is\n\tif (fabsf(dp) < eps) return q; \n\t// get an orthogonal axis to rotate around:\n\tglm::vec3 axis = glm::cross(uf, desired);\n\t// get the rotation needed around this axis:\n\tglm::quat diff = glm::angleAxis(acosf(dp), axis);\n\t// rotate the original quat to align to the normal:\n\treturn safe_normalize(diff * q);\t\n}"
                }
            ],
            "type": "glm::quat (const glm::quat, const glm::vec3)",
            "type_args": [
                "const glm::quat",
                "const glm::vec3"
            ],
            "type_ret": "glm::quat"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 5602,
                    "col": 1,
                    "line": 177
                },
                "end": {
                    "char": 5728,
                    "col": 2,
                    "line": 183
                }
            },
            "mangled_name": "__Z5limitN3glm5tvec2IfLNS_9precisionE0EEEf",
            "name": "limit",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 5602,
                            "col": 1,
                            "line": 177
                        },
                        "end": {
                            "char": 5605,
                            "col": 4,
                            "line": 177
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5607,
                            "col": 6,
                            "line": 177
                        },
                        "end": {
                            "char": 5611,
                            "col": 10,
                            "line": 177
                        }
                    },
                    "name": "glm::vec2",
                    "type": "glm::vec2"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 5618,
                            "col": 17,
                            "line": 177
                        },
                        "end": {
                            "char": 5629,
                            "col": 28,
                            "line": 177
                        }
                    },
                    "name": "v",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 5618,
                                    "col": 17,
                                    "line": 177
                                },
                                "end": {
                                    "char": 5621,
                                    "col": 20,
                                    "line": 177
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 5623,
                                    "col": 22,
                                    "line": 177
                                },
                                "end": {
                                    "char": 5627,
                                    "col": 26,
                                    "line": 177
                                }
                            },
                            "name": "glm::vec2",
                            "type": "glm::vec2"
                        }
                    ],
                    "type": "glm::vec2"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 5631,
                            "col": 30,
                            "line": 177
                        },
                        "end": {
                            "char": 5640,
                            "col": 39,
                            "line": 177
                        }
                    },
                    "name": "max",
                    "type": "float"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 5642,
                            "col": 41,
                            "line": 177
                        },
                        "end": {
                            "char": 5728,
                            "col": 2,
                            "line": 183
                        }
                    },
                    "text": "{\n\tfloat len = glm::length(v);\n\tif (len > max) {\n\t\treturn v * max/len;\n\t}\n\treturn v;\n}"
                }
            ],
            "type": "glm::vec2 (glm::vec2, float)",
            "type_args": [
                "glm::vec2",
                "float"
            ],
            "type_ret": "glm::vec2"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5730,
                    "col": 1,
                    "line": 185
                },
                "end": {
                    "char": 5749,
                    "col": 20,
                    "line": 185
                }
            },
            "name": "flip",
            "nodes": [
                {
                    "ast": "IntegerLiteral",
                    "loc": {
                        "begin": {
                            "char": 5748,
                            "col": 19,
                            "line": 185
                        },
                        "end": {
                            "char": 5749,
                            "col": 20,
                            "line": 185
                        }
                    },
                    "type": "int",
                    "value": 0
                }
            ],
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5752,
                    "col": 1,
                    "line": 187
                },
                "end": {
                    "char": 5771,
                    "col": 20,
                    "line": 187
                }
            },
            "name": "objectShader",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5752,
                            "col": 1,
                            "line": 187
                        },
                        "end": {
                            "char": 5758,
                            "col": 7,
                            "line": 187
                        }
                    },
                    "name": "struct Shader",
                    "type": "Shader"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 5759,
                            "col": 8,
                            "line": 187
                        },
                        "end": {
                            "char": 5771,
                            "col": 20,
                            "line": 187
                        }
                    },
                    "name": "Shader",
                    "type": "Shader"
                }
            ],
            "type": "Shader"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5773,
                    "col": 1,
                    "line": 188
                },
                "end": {
                    "char": 5793,
                    "col": 21,
                    "line": 188
                }
            },
            "name": "segmentShader",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5773,
                            "col": 1,
                            "line": 188
                        },
                        "end": {
                            "char": 5779,
                            "col": 7,
                            "line": 188
                        }
                    },
                    "name": "struct Shader",
                    "type": "Shader"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 5780,
                            "col": 8,
                            "line": 188
                        },
                        "end": {
                            "char": 5793,
                            "col": 21,
                            "line": 188
                        }
                    },
                    "name": "Shader",
                    "type": "Shader"
                }
            ],
            "type": "Shader"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5795,
                    "col": 1,
                    "line": 189
                },
                "end": {
                    "char": 5816,
                    "col": 22,
                    "line": 189
                }
            },
            "name": "particleShader",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5795,
                            "col": 1,
                            "line": 189
                        },
                        "end": {
                            "char": 5801,
                            "col": 7,
                            "line": 189
                        }
                    },
                    "name": "struct Shader",
                    "type": "Shader"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 5802,
                            "col": 8,
                            "line": 189
                        },
                        "end": {
                            "char": 5816,
                            "col": 22,
                            "line": 189
                        }
                    },
                    "name": "Shader",
                    "type": "Shader"
                }
            ],
            "type": "Shader"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5818,
                    "col": 1,
                    "line": 190
                },
                "end": {
                    "char": 5835,
                    "col": 18,
                    "line": 190
                }
            },
            "name": "landShader",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5818,
                            "col": 1,
                            "line": 190
                        },
                        "end": {
                            "char": 5824,
                            "col": 7,
                            "line": 190
                        }
                    },
                    "name": "struct Shader",
                    "type": "Shader"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 5825,
                            "col": 8,
                            "line": 190
                        },
                        "end": {
                            "char": 5835,
                            "col": 18,
                            "line": 190
                        }
                    },
                    "name": "Shader",
                    "type": "Shader"
                }
            ],
            "type": "Shader"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5837,
                    "col": 1,
                    "line": 191
                },
                "end": {
                    "char": 5860,
                    "col": 24,
                    "line": 191
                }
            },
            "name": "heightMeshShader",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5837,
                            "col": 1,
                            "line": 191
                        },
                        "end": {
                            "char": 5843,
                            "col": 7,
                            "line": 191
                        }
                    },
                    "name": "struct Shader",
                    "type": "Shader"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 5844,
                            "col": 8,
                            "line": 191
                        },
                        "end": {
                            "char": 5860,
                            "col": 24,
                            "line": 191
                        }
                    },
                    "name": "Shader",
                    "type": "Shader"
                }
            ],
            "type": "Shader"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5862,
                    "col": 1,
                    "line": 192
                },
                "end": {
                    "char": 5880,
                    "col": 19,
                    "line": 192
                }
            },
            "name": "deferShader",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5862,
                            "col": 1,
                            "line": 192
                        },
                        "end": {
                            "char": 5868,
                            "col": 7,
                            "line": 192
                        }
                    },
                    "name": "struct Shader",
                    "type": "Shader"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 5869,
                            "col": 8,
                            "line": 192
                        },
                        "end": {
                            "char": 5880,
                            "col": 19,
                            "line": 192
                        }
                    },
                    "name": "Shader",
                    "type": "Shader"
                }
            ],
            "type": "Shader"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5883,
                    "col": 1,
                    "line": 193
                },
                "end": {
                    "char": 5902,
                    "col": 20,
                    "line": 193
                }
            },
            "name": "simpleShader",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5883,
                            "col": 1,
                            "line": 193
                        },
                        "end": {
                            "char": 5889,
                            "col": 7,
                            "line": 193
                        }
                    },
                    "name": "struct Shader",
                    "type": "Shader"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 5890,
                            "col": 8,
                            "line": 193
                        },
                        "end": {
                            "char": 5902,
                            "col": 20,
                            "line": 193
                        }
                    },
                    "name": "Shader",
                    "type": "Shader"
                }
            ],
            "type": "Shader"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5904,
                    "col": 1,
                    "line": 194
                },
                "end": {
                    "char": 5922,
                    "col": 19,
                    "line": 194
                }
            },
            "name": "debugShader",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5904,
                            "col": 1,
                            "line": 194
                        },
                        "end": {
                            "char": 5910,
                            "col": 7,
                            "line": 194
                        }
                    },
                    "name": "struct Shader",
                    "type": "Shader"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 5911,
                            "col": 8,
                            "line": 194
                        },
                        "end": {
                            "char": 5922,
                            "col": 19,
                            "line": 194
                        }
                    },
                    "name": "Shader",
                    "type": "Shader"
                }
            ],
            "type": "Shader"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5925,
                    "col": 1,
                    "line": 196
                },
                "end": {
                    "char": 5942,
                    "col": 18,
                    "line": 196
                }
            },
            "name": "quadMesh",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5925,
                            "col": 1,
                            "line": 196
                        },
                        "end": {
                            "char": 5933,
                            "col": 9,
                            "line": 196
                        }
                    },
                    "name": "struct QuadMesh",
                    "type": "QuadMesh"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 5934,
                            "col": 10,
                            "line": 196
                        },
                        "end": {
                            "char": 5942,
                            "col": 18,
                            "line": 196
                        }
                    },
                    "name": "QuadMesh",
                    "type": "QuadMesh"
                }
            ],
            "type": "QuadMesh"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5944,
                    "col": 1,
                    "line": 197
                },
                "end": {
                    "char": 5959,
                    "col": 16,
                    "line": 197
                }
            },
            "name": "colorTex",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5944,
                            "col": 1,
                            "line": 197
                        },
                        "end": {
                            "char": 5950,
                            "col": 7,
                            "line": 197
                        }
                    },
                    "name": "GLuint",
                    "type": "GLuint"
                }
            ],
            "type": "GLuint"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5961,
                    "col": 1,
                    "line": 198
                },
                "end": {
                    "char": 5984,
                    "col": 24,
                    "line": 198
                }
            },
            "name": "fluidTex",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5961,
                            "col": 1,
                            "line": 198
                        },
                        "end": {
                            "char": 5975,
                            "col": 15,
                            "line": 198
                        }
                    },
                    "name": "struct FloatTexture3D",
                    "type": "FloatTexture3D"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 5976,
                            "col": 16,
                            "line": 198
                        },
                        "end": {
                            "char": 5984,
                            "col": 24,
                            "line": 198
                        }
                    },
                    "name": "FloatTexture3D",
                    "type": "FloatTexture3D"
                }
            ],
            "type": "FloatTexture3D"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 5986,
                    "col": 1,
                    "line": 199
                },
                "end": {
                    "char": 6011,
                    "col": 26,
                    "line": 199
                }
            },
            "name": "densityTex",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 5986,
                            "col": 1,
                            "line": 199
                        },
                        "end": {
                            "char": 6000,
                            "col": 15,
                            "line": 199
                        }
                    },
                    "name": "struct FloatTexture3D",
                    "type": "FloatTexture3D"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6001,
                            "col": 16,
                            "line": 199
                        },
                        "end": {
                            "char": 6011,
                            "col": 26,
                            "line": 199
                        }
                    },
                    "name": "FloatTexture3D",
                    "type": "FloatTexture3D"
                }
            ],
            "type": "FloatTexture3D"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6013,
                    "col": 1,
                    "line": 200
                },
                "end": {
                    "char": 6039,
                    "col": 27,
                    "line": 200
                }
            },
            "name": "distanceTex",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6013,
                            "col": 1,
                            "line": 200
                        },
                        "end": {
                            "char": 6027,
                            "col": 15,
                            "line": 200
                        }
                    },
                    "name": "struct FloatTexture3D",
                    "type": "FloatTexture3D"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6028,
                            "col": 16,
                            "line": 200
                        },
                        "end": {
                            "char": 6039,
                            "col": 27,
                            "line": 200
                        }
                    },
                    "name": "FloatTexture3D",
                    "type": "FloatTexture3D"
                }
            ],
            "type": "FloatTexture3D"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6041,
                    "col": 1,
                    "line": 201
                },
                "end": {
                    "char": 6065,
                    "col": 25,
                    "line": 201
                }
            },
            "name": "fungusTex",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6041,
                            "col": 1,
                            "line": 201
                        },
                        "end": {
                            "char": 6055,
                            "col": 15,
                            "line": 201
                        }
                    },
                    "name": "struct FloatTexture2D",
                    "type": "FloatTexture2D"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6056,
                            "col": 16,
                            "line": 201
                        },
                        "end": {
                            "char": 6065,
                            "col": 25,
                            "line": 201
                        }
                    },
                    "name": "FloatTexture2D",
                    "type": "FloatTexture2D"
                }
            ],
            "type": "FloatTexture2D"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6067,
                    "col": 1,
                    "line": 202
                },
                "end": {
                    "char": 6089,
                    "col": 23,
                    "line": 202
                }
            },
            "name": "landTex",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6067,
                            "col": 1,
                            "line": 202
                        },
                        "end": {
                            "char": 6081,
                            "col": 15,
                            "line": 202
                        }
                    },
                    "name": "struct FloatTexture2D",
                    "type": "FloatTexture2D"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6082,
                            "col": 16,
                            "line": 202
                        },
                        "end": {
                            "char": 6089,
                            "col": 23,
                            "line": 202
                        }
                    },
                    "name": "FloatTexture2D",
                    "type": "FloatTexture2D"
                }
            ],
            "type": "FloatTexture2D"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6092,
                    "col": 1,
                    "line": 204
                },
                "end": {
                    "char": 6110,
                    "col": 19,
                    "line": 204
                }
            },
            "name": "tableObj",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6092,
                            "col": 1,
                            "line": 204
                        },
                        "end": {
                            "char": 6101,
                            "col": 10,
                            "line": 204
                        }
                    },
                    "name": "struct SimpleOBJ",
                    "type": "SimpleOBJ"
                }
            ],
            "type": "SimpleOBJ"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6138,
                    "col": 1,
                    "line": 206
                },
                "end": {
                    "char": 6170,
                    "col": 33,
                    "line": 206
                }
            },
            "name": "gridVertices",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6172,
                    "col": 1,
                    "line": 207
                },
                "end": {
                    "char": 6210,
                    "col": 39,
                    "line": 207
                }
            },
            "name": "gridElements",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6213,
                    "col": 1,
                    "line": 209
                },
                "end": {
                    "char": 6234,
                    "col": 22,
                    "line": 209
                }
            },
            "name": "projFBOs",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6213,
                            "col": 1,
                            "line": 209
                        },
                        "end": {
                            "char": 6222,
                            "col": 10,
                            "line": 209
                        }
                    },
                    "name": "struct SimpleFBO",
                    "type": "SimpleFBO"
                },
                {
                    "ast": "IntegerLiteral",
                    "loc": {
                        "begin": {
                            "char": 6232,
                            "col": 20,
                            "line": 209
                        },
                        "end": {
                            "char": 6233,
                            "col": 21,
                            "line": 209
                        }
                    },
                    "type": "int"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6223,
                            "col": 11,
                            "line": 209
                        },
                        "end": {
                            "char": 6231,
                            "col": 19,
                            "line": 209
                        }
                    },
                    "name": "SimpleFBO",
                    "type": "SimpleFBO [2]"
                }
            ],
            "type": "SimpleFBO [2]"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6237,
                    "col": 1,
                    "line": 211
                },
                "end": {
                    "char": 6248,
                    "col": 12,
                    "line": 211
                }
            },
            "name": "gridVAO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6237,
                            "col": 1,
                            "line": 211
                        },
                        "end": {
                            "char": 6240,
                            "col": 4,
                            "line": 211
                        }
                    },
                    "name": "struct VAO",
                    "type": "VAO"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6241,
                            "col": 5,
                            "line": 211
                        },
                        "end": {
                            "char": 6248,
                            "col": 12,
                            "line": 211
                        }
                    },
                    "name": "VAO",
                    "type": "VAO"
                }
            ],
            "type": "VAO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6250,
                    "col": 1,
                    "line": 212
                },
                "end": {
                    "char": 6261,
                    "col": 12,
                    "line": 212
                }
            },
            "name": "gridVBO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6250,
                            "col": 1,
                            "line": 212
                        },
                        "end": {
                            "char": 6253,
                            "col": 4,
                            "line": 212
                        }
                    },
                    "name": "struct VBO",
                    "type": "VBO"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6254,
                            "col": 5,
                            "line": 212
                        },
                        "end": {
                            "char": 6261,
                            "col": 12,
                            "line": 212
                        }
                    },
                    "name": "VBO",
                    "type": "VBO"
                }
            ],
            "type": "VBO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6263,
                    "col": 1,
                    "line": 213
                },
                "end": {
                    "char": 6274,
                    "col": 12,
                    "line": 213
                }
            },
            "name": "gridEBO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6263,
                            "col": 1,
                            "line": 213
                        },
                        "end": {
                            "char": 6266,
                            "col": 4,
                            "line": 213
                        }
                    },
                    "name": "struct EBO",
                    "type": "EBO"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6267,
                            "col": 5,
                            "line": 213
                        },
                        "end": {
                            "char": 6274,
                            "col": 12,
                            "line": 213
                        }
                    },
                    "name": "EBO",
                    "type": "EBO"
                }
            ],
            "type": "EBO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6276,
                    "col": 1,
                    "line": 214
                },
                "end": {
                    "char": 6302,
                    "col": 27,
                    "line": 214
                }
            },
            "name": "grid_elements",
            "type": "unsigned int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6305,
                    "col": 1,
                    "line": 216
                },
                "end": {
                    "char": 6317,
                    "col": 13,
                    "line": 216
                }
            },
            "name": "tableVAO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6305,
                            "col": 1,
                            "line": 216
                        },
                        "end": {
                            "char": 6308,
                            "col": 4,
                            "line": 216
                        }
                    },
                    "name": "struct VAO",
                    "type": "VAO"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6309,
                            "col": 5,
                            "line": 216
                        },
                        "end": {
                            "char": 6317,
                            "col": 13,
                            "line": 216
                        }
                    },
                    "name": "VAO",
                    "type": "VAO"
                }
            ],
            "type": "VAO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6319,
                    "col": 1,
                    "line": 217
                },
                "end": {
                    "char": 6331,
                    "col": 13,
                    "line": 217
                }
            },
            "name": "tableVBO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6319,
                            "col": 1,
                            "line": 217
                        },
                        "end": {
                            "char": 6322,
                            "col": 4,
                            "line": 217
                        }
                    },
                    "name": "struct VBO",
                    "type": "VBO"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6323,
                            "col": 5,
                            "line": 217
                        },
                        "end": {
                            "char": 6331,
                            "col": 13,
                            "line": 217
                        }
                    },
                    "name": "VBO",
                    "type": "VBO"
                }
            ],
            "type": "VBO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6333,
                    "col": 1,
                    "line": 218
                },
                "end": {
                    "char": 6345,
                    "col": 13,
                    "line": 218
                }
            },
            "name": "tableEBO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6333,
                            "col": 1,
                            "line": 218
                        },
                        "end": {
                            "char": 6336,
                            "col": 4,
                            "line": 218
                        }
                    },
                    "name": "struct EBO",
                    "type": "EBO"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6337,
                            "col": 5,
                            "line": 218
                        },
                        "end": {
                            "char": 6345,
                            "col": 13,
                            "line": 218
                        }
                    },
                    "name": "EBO",
                    "type": "EBO"
                }
            ],
            "type": "EBO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6347,
                    "col": 1,
                    "line": 219
                },
                "end": {
                    "char": 6374,
                    "col": 28,
                    "line": 219
                }
            },
            "name": "table_elements",
            "type": "unsigned int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6377,
                    "col": 1,
                    "line": 221
                },
                "end": {
                    "char": 6428,
                    "col": 52,
                    "line": 221
                }
            },
            "name": "cubeVBO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6377,
                            "col": 1,
                            "line": 221
                        },
                        "end": {
                            "char": 6380,
                            "col": 4,
                            "line": 221
                        }
                    },
                    "name": "struct VBO",
                    "type": "VBO"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6381,
                            "col": 5,
                            "line": 221
                        },
                        "end": {
                            "char": 6428,
                            "col": 52,
                            "line": 221
                        }
                    },
                    "name": "VBO",
                    "nodes": [
                        {
                            "ast": "UnaryExpr",
                            "loc": {
                                "begin": {
                                    "char": 6389,
                                    "col": 13,
                                    "line": 221
                                },
                                "end": {
                                    "char": 6411,
                                    "col": 35,
                                    "line": 221
                                }
                            },
                            "nodes": [
                                {
                                    "ast": "ParenExpr",
                                    "loc": {
                                        "begin": {
                                            "char": 6395,
                                            "col": 19,
                                            "line": 221
                                        },
                                        "end": {
                                            "char": 6411,
                                            "col": 35,
                                            "line": 221
                                        }
                                    },
                                    "nodes": [
                                        {
                                            "ast": "DeclRefExpr",
                                            "loc": {
                                                "begin": {
                                                    "char": 6396,
                                                    "col": 20,
                                                    "line": 221
                                                },
                                                "end": {
                                                    "char": 6410,
                                                    "col": 34,
                                                    "line": 221
                                                }
                                            },
                                            "name": "positions_cube",
                                            "type": "float [108]"
                                        }
                                    ],
                                    "type": "float [108]"
                                }
                            ],
                            "type": "unsigned long"
                        },
                        {
                            "ast": "DeclRefExpr",
                            "loc": {
                                "begin": {
                                    "char": 6413,
                                    "col": 37,
                                    "line": 221
                                },
                                "end": {
                                    "char": 6427,
                                    "col": 51,
                                    "line": 221
                                }
                            },
                            "name": "positions_cube",
                            "type": "float [108]"
                        }
                    ],
                    "type": "VBO"
                }
            ],
            "type": "VBO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6431,
                    "col": 1,
                    "line": 223
                },
                "end": {
                    "char": 6444,
                    "col": 14,
                    "line": 223
                }
            },
            "name": "objectVAO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6431,
                            "col": 1,
                            "line": 223
                        },
                        "end": {
                            "char": 6434,
                            "col": 4,
                            "line": 223
                        }
                    },
                    "name": "struct VAO",
                    "type": "VAO"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6435,
                            "col": 5,
                            "line": 223
                        },
                        "end": {
                            "char": 6444,
                            "col": 14,
                            "line": 223
                        }
                    },
                    "name": "VAO",
                    "type": "VAO"
                }
            ],
            "type": "VAO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6446,
                    "col": 1,
                    "line": 224
                },
                "end": {
                    "char": 6468,
                    "col": 23,
                    "line": 224
                }
            },
            "name": "objectInstancesVBO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6446,
                            "col": 1,
                            "line": 224
                        },
                        "end": {
                            "char": 6449,
                            "col": 4,
                            "line": 224
                        }
                    },
                    "name": "struct VBO",
                    "type": "VBO"
                }
            ],
            "type": "VBO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6495,
                    "col": 1,
                    "line": 226
                },
                "end": {
                    "char": 6509,
                    "col": 15,
                    "line": 226
                }
            },
            "name": "segmentVAO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6495,
                            "col": 1,
                            "line": 226
                        },
                        "end": {
                            "char": 6498,
                            "col": 4,
                            "line": 226
                        }
                    },
                    "name": "struct VAO",
                    "type": "VAO"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6499,
                            "col": 5,
                            "line": 226
                        },
                        "end": {
                            "char": 6509,
                            "col": 15,
                            "line": 226
                        }
                    },
                    "name": "VAO",
                    "type": "VAO"
                }
            ],
            "type": "VAO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6511,
                    "col": 1,
                    "line": 227
                },
                "end": {
                    "char": 6534,
                    "col": 24,
                    "line": 227
                }
            },
            "name": "segmentInstancesVBO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6511,
                            "col": 1,
                            "line": 227
                        },
                        "end": {
                            "char": 6514,
                            "col": 4,
                            "line": 227
                        }
                    },
                    "name": "struct VBO",
                    "type": "VBO"
                }
            ],
            "type": "VBO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6562,
                    "col": 1,
                    "line": 229
                },
                "end": {
                    "char": 6578,
                    "col": 17,
                    "line": 229
                }
            },
            "name": "particlesVAO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6562,
                            "col": 1,
                            "line": 229
                        },
                        "end": {
                            "char": 6565,
                            "col": 4,
                            "line": 229
                        }
                    },
                    "name": "struct VAO",
                    "type": "VAO"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6566,
                            "col": 5,
                            "line": 229
                        },
                        "end": {
                            "char": 6578,
                            "col": 17,
                            "line": 229
                        }
                    },
                    "name": "VAO",
                    "type": "VAO"
                }
            ],
            "type": "VAO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6580,
                    "col": 1,
                    "line": 230
                },
                "end": {
                    "char": 6596,
                    "col": 17,
                    "line": 230
                }
            },
            "name": "particlesVBO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6580,
                            "col": 1,
                            "line": 230
                        },
                        "end": {
                            "char": 6583,
                            "col": 4,
                            "line": 230
                        }
                    },
                    "name": "struct VBO",
                    "type": "VBO"
                }
            ],
            "type": "VBO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6625,
                    "col": 1,
                    "line": 232
                },
                "end": {
                    "char": 6637,
                    "col": 13,
                    "line": 232
                }
            },
            "name": "debugVAO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6625,
                            "col": 1,
                            "line": 232
                        },
                        "end": {
                            "char": 6628,
                            "col": 4,
                            "line": 232
                        }
                    },
                    "name": "struct VAO",
                    "type": "VAO"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 6629,
                            "col": 5,
                            "line": 232
                        },
                        "end": {
                            "char": 6637,
                            "col": 13,
                            "line": 232
                        }
                    },
                    "name": "VAO",
                    "type": "VAO"
                }
            ],
            "type": "VAO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6639,
                    "col": 1,
                    "line": 233
                },
                "end": {
                    "char": 6651,
                    "col": 13,
                    "line": 233
                }
            },
            "name": "debugVBO",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6639,
                            "col": 1,
                            "line": 233
                        },
                        "end": {
                            "char": 6642,
                            "col": 4,
                            "line": 233
                        }
                    },
                    "name": "struct VBO",
                    "type": "VBO"
                }
            ],
            "type": "VBO"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6680,
                    "col": 1,
                    "line": 235
                },
                "end": {
                    "char": 6706,
                    "col": 27,
                    "line": 235
                }
            },
            "name": "particleSize",
            "nodes": [
                {
                    "ast": "FloatingLiteral",
                    "loc": {
                        "begin": {
                            "char": 6701,
                            "col": 22,
                            "line": 235
                        },
                        "end": {
                            "char": 6706,
                            "col": 27,
                            "line": 235
                        }
                    },
                    "type": "double"
                }
            ],
            "type": "float"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6708,
                    "col": 1,
                    "line": 236
                },
                "end": {
                    "char": 6741,
                    "col": 34,
                    "line": 236
                }
            },
            "name": "creature_fluid_push",
            "nodes": [
                {
                    "ast": "FloatingLiteral",
                    "loc": {
                        "begin": {
                            "char": 6736,
                            "col": 29,
                            "line": 236
                        },
                        "end": {
                            "char": 6741,
                            "col": 34,
                            "line": 236
                        }
                    },
                    "type": "float",
                    "value": 0.75
                }
            ],
            "type": "float"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6744,
                    "col": 1,
                    "line": 238
                },
                "end": {
                    "char": 6763,
                    "col": 20,
                    "line": 238
                }
            },
            "name": "world_min",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 6744,
                            "col": 1,
                            "line": 238
                        },
                        "end": {
                            "char": 6747,
                            "col": 4,
                            "line": 238
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6749,
                            "col": 6,
                            "line": 238
                        },
                        "end": {
                            "char": 6753,
                            "col": 10,
                            "line": 238
                        }
                    },
                    "name": "glm::vec3",
                    "type": "glm::vec3"
                }
            ],
            "type": "glm::vec3"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6780,
                    "col": 1,
                    "line": 239
                },
                "end": {
                    "char": 6799,
                    "col": 20,
                    "line": 239
                }
            },
            "name": "world_max",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 6780,
                            "col": 1,
                            "line": 239
                        },
                        "end": {
                            "char": 6783,
                            "col": 4,
                            "line": 239
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6785,
                            "col": 6,
                            "line": 239
                        },
                        "end": {
                            "char": 6789,
                            "col": 10,
                            "line": 239
                        }
                    },
                    "name": "glm::vec3",
                    "type": "glm::vec3"
                }
            ],
            "type": "glm::vec3"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6819,
                    "col": 1,
                    "line": 240
                },
                "end": {
                    "char": 6841,
                    "col": 23,
                    "line": 240
                }
            },
            "name": "world_centre",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 6819,
                            "col": 1,
                            "line": 240
                        },
                        "end": {
                            "char": 6822,
                            "col": 4,
                            "line": 240
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 6824,
                            "col": 6,
                            "line": 240
                        },
                        "end": {
                            "char": 6828,
                            "col": 10,
                            "line": 240
                        }
                    },
                    "name": "glm::vec3",
                    "type": "glm::vec3"
                }
            ],
            "type": "glm::vec3"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6862,
                    "col": 1,
                    "line": 242
                },
                "end": {
                    "char": 6879,
                    "col": 18,
                    "line": 242
                }
            },
            "name": "debugMode",
            "nodes": [
                {
                    "ast": "IntegerLiteral",
                    "loc": {
                        "begin": {
                            "char": 6878,
                            "col": 17,
                            "line": 242
                        },
                        "end": {
                            "char": 6879,
                            "col": 18,
                            "line": 242
                        }
                    },
                    "type": "int",
                    "value": 0
                }
            ],
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6881,
                    "col": 1,
                    "line": 243
                },
                "end": {
                    "char": 6896,
                    "col": 16,
                    "line": 243
                }
            },
            "name": "camMode",
            "nodes": [
                {
                    "ast": "IntegerLiteral",
                    "loc": {
                        "begin": {
                            "char": 6895,
                            "col": 15,
                            "line": 243
                        },
                        "end": {
                            "char": 6896,
                            "col": 16,
                            "line": 243
                        }
                    },
                    "type": "int",
                    "value": 0
                }
            ],
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "comment": {
                "text": "//Used for changing which object is in focus"
            },
            "loc": {
                "begin": {
                    "char": 6898,
                    "col": 1,
                    "line": 244
                },
                "end": {
                    "char": 6915,
                    "col": 18,
                    "line": 244
                }
            },
            "name": "objectSel",
            "nodes": [
                {
                    "ast": "IntegerLiteral",
                    "loc": {
                        "begin": {
                            "char": 6914,
                            "col": 17,
                            "line": 244
                        },
                        "end": {
                            "char": 6915,
                            "col": 18,
                            "line": 244
                        }
                    },
                    "type": "int",
                    "value": 0
                }
            ],
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6962,
                    "col": 1,
                    "line": 245
                },
                "end": {
                    "char": 6979,
                    "col": 18,
                    "line": 245
                }
            },
            "name": "objSelMod",
            "nodes": [
                {
                    "ast": "IntegerLiteral",
                    "loc": {
                        "begin": {
                            "char": 6978,
                            "col": 17,
                            "line": 245
                        },
                        "end": {
                            "char": 6979,
                            "col": 18,
                            "line": 245
                        }
                    },
                    "type": "int",
                    "value": 0
                }
            ],
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 6981,
                    "col": 1,
                    "line": 246
                },
                "end": {
                    "char": 6999,
                    "col": 19,
                    "line": 246
                }
            },
            "name": "camModeMax",
            "nodes": [
                {
                    "ast": "IntegerLiteral",
                    "loc": {
                        "begin": {
                            "char": 6998,
                            "col": 18,
                            "line": 246
                        },
                        "end": {
                            "char": 6999,
                            "col": 19,
                            "line": 246
                        }
                    },
                    "type": "int",
                    "value": 4
                }
            ],
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7001,
                    "col": 1,
                    "line": 247
                },
                "end": {
                    "char": 7021,
                    "col": 21,
                    "line": 247
                }
            },
            "name": "camFast",
            "nodes": [
                {
                    "ast": "CXXBoolLiteralExpr",
                    "loc": {
                        "begin": {
                            "char": 7016,
                            "col": 16,
                            "line": 247
                        },
                        "end": {
                            "char": 7021,
                            "col": 21,
                            "line": 247
                        }
                    },
                    "type": "bool"
                }
            ],
            "type": "bool"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7023,
                    "col": 1,
                    "line": 248
                },
                "end": {
                    "char": 7039,
                    "col": 17,
                    "line": 248
                }
            },
            "name": "camVel",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7023,
                            "col": 1,
                            "line": 248
                        },
                        "end": {
                            "char": 7026,
                            "col": 4,
                            "line": 248
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7028,
                            "col": 6,
                            "line": 248
                        },
                        "end": {
                            "char": 7032,
                            "col": 10,
                            "line": 248
                        }
                    },
                    "name": "glm::vec3",
                    "type": "glm::vec3"
                }
            ],
            "type": "glm::vec3"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7023,
                    "col": 1,
                    "line": 248
                },
                "end": {
                    "char": 7048,
                    "col": 26,
                    "line": 248
                }
            },
            "name": "camTurn",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7023,
                            "col": 1,
                            "line": 248
                        },
                        "end": {
                            "char": 7026,
                            "col": 4,
                            "line": 248
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7028,
                            "col": 6,
                            "line": 248
                        },
                        "end": {
                            "char": 7032,
                            "col": 10,
                            "line": 248
                        }
                    },
                    "name": "glm::vec3",
                    "type": "glm::vec3"
                }
            ],
            "type": "glm::vec3"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7050,
                    "col": 1,
                    "line": 249
                },
                "end": {
                    "char": 7069,
                    "col": 20,
                    "line": 249
                }
            },
            "name": "cameraLoc",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7050,
                            "col": 1,
                            "line": 249
                        },
                        "end": {
                            "char": 7053,
                            "col": 4,
                            "line": 249
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7055,
                            "col": 6,
                            "line": 249
                        },
                        "end": {
                            "char": 7059,
                            "col": 10,
                            "line": 249
                        }
                    },
                    "name": "glm::vec3",
                    "type": "glm::vec3"
                }
            ],
            "type": "glm::vec3"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7086,
                    "col": 1,
                    "line": 250
                },
                "end": {
                    "char": 7105,
                    "col": 20,
                    "line": 250
                }
            },
            "name": "cameraOri",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7086,
                            "col": 1,
                            "line": 250
                        },
                        "end": {
                            "char": 7089,
                            "col": 4,
                            "line": 250
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7091,
                            "col": 6,
                            "line": 250
                        },
                        "end": {
                            "char": 7095,
                            "col": 10,
                            "line": 250
                        }
                    },
                    "name": "glm::quat",
                    "type": "glm::quat"
                }
            ],
            "type": "glm::quat"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7108,
                    "col": 1,
                    "line": 252
                },
                "end": {
                    "char": 7128,
                    "col": 21,
                    "line": 252
                }
            },
            "name": "sim_mutex",
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "comment": {
                "text": "// how to convert world positions into fluid texture coordinates:"
            },
            "loc": {
                "begin": {
                    "char": 7197,
                    "col": 1,
                    "line": 255
                },
                "end": {
                    "char": 7220,
                    "col": 24,
                    "line": 255
                }
            },
            "name": "field2world_scale",
            "type": "float"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7222,
                    "col": 1,
                    "line": 256
                },
                "end": {
                    "char": 7243,
                    "col": 22,
                    "line": 256
                }
            },
            "name": "world2field",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7222,
                            "col": 1,
                            "line": 256
                        },
                        "end": {
                            "char": 7225,
                            "col": 4,
                            "line": 256
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7227,
                            "col": 6,
                            "line": 256
                        },
                        "end": {
                            "char": 7231,
                            "col": 10,
                            "line": 256
                        }
                    },
                    "name": "glm::mat4",
                    "type": "glm::mat4"
                }
            ],
            "type": "glm::mat4"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7245,
                    "col": 1,
                    "line": 257
                },
                "end": {
                    "char": 7266,
                    "col": 22,
                    "line": 257
                }
            },
            "name": "field2world",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7245,
                            "col": 1,
                            "line": 257
                        },
                        "end": {
                            "char": 7248,
                            "col": 4,
                            "line": 257
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7250,
                            "col": 6,
                            "line": 257
                        },
                        "end": {
                            "char": 7254,
                            "col": 10,
                            "line": 257
                        }
                    },
                    "name": "glm::mat4",
                    "type": "glm::mat4"
                }
            ],
            "type": "glm::mat4"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7268,
                    "col": 1,
                    "line": 258
                },
                "end": {
                    "char": 7288,
                    "col": 21,
                    "line": 258
                }
            },
            "name": "vive2world",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7268,
                            "col": 1,
                            "line": 258
                        },
                        "end": {
                            "char": 7271,
                            "col": 4,
                            "line": 258
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7273,
                            "col": 6,
                            "line": 258
                        },
                        "end": {
                            "char": 7277,
                            "col": 10,
                            "line": 258
                        }
                    },
                    "name": "glm::mat4",
                    "type": "glm::mat4"
                }
            ],
            "type": "glm::mat4"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7290,
                    "col": 1,
                    "line": 259
                },
                "end": {
                    "char": 7312,
                    "col": 23,
                    "line": 259
                }
            },
            "name": "kinect2world",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7290,
                            "col": 1,
                            "line": 259
                        },
                        "end": {
                            "char": 7293,
                            "col": 4,
                            "line": 259
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7295,
                            "col": 6,
                            "line": 259
                        },
                        "end": {
                            "char": 7299,
                            "col": 10,
                            "line": 259
                        }
                    },
                    "name": "glm::mat4",
                    "type": "glm::mat4"
                }
            ],
            "type": "glm::mat4"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7315,
                    "col": 1,
                    "line": 260
                },
                "end": {
                    "char": 7332,
                    "col": 18,
                    "line": 260
                }
            },
            "name": "viewMat",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7315,
                            "col": 1,
                            "line": 260
                        },
                        "end": {
                            "char": 7318,
                            "col": 4,
                            "line": 260
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7320,
                            "col": 6,
                            "line": 260
                        },
                        "end": {
                            "char": 7324,
                            "col": 10,
                            "line": 260
                        }
                    },
                    "name": "glm::mat4",
                    "type": "glm::mat4"
                }
            ],
            "type": "glm::mat4"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7334,
                    "col": 1,
                    "line": 261
                },
                "end": {
                    "char": 7351,
                    "col": 18,
                    "line": 261
                }
            },
            "name": "projMat",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7334,
                            "col": 1,
                            "line": 261
                        },
                        "end": {
                            "char": 7337,
                            "col": 4,
                            "line": 261
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7339,
                            "col": 6,
                            "line": 261
                        },
                        "end": {
                            "char": 7343,
                            "col": 10,
                            "line": 261
                        }
                    },
                    "name": "glm::mat4",
                    "type": "glm::mat4"
                }
            ],
            "type": "glm::mat4"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7353,
                    "col": 1,
                    "line": 262
                },
                "end": {
                    "char": 7374,
                    "col": 22,
                    "line": 262
                }
            },
            "name": "viewProjMat",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7353,
                            "col": 1,
                            "line": 262
                        },
                        "end": {
                            "char": 7356,
                            "col": 4,
                            "line": 262
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7358,
                            "col": 6,
                            "line": 262
                        },
                        "end": {
                            "char": 7362,
                            "col": 10,
                            "line": 262
                        }
                    },
                    "name": "glm::mat4",
                    "type": "glm::mat4"
                }
            ],
            "type": "glm::mat4"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7376,
                    "col": 1,
                    "line": 263
                },
                "end": {
                    "char": 7400,
                    "col": 25,
                    "line": 263
                }
            },
            "name": "viewMatInverse",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7376,
                            "col": 1,
                            "line": 263
                        },
                        "end": {
                            "char": 7379,
                            "col": 4,
                            "line": 263
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7381,
                            "col": 6,
                            "line": 263
                        },
                        "end": {
                            "char": 7385,
                            "col": 10,
                            "line": 263
                        }
                    },
                    "name": "glm::mat4",
                    "type": "glm::mat4"
                }
            ],
            "type": "glm::mat4"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7402,
                    "col": 1,
                    "line": 264
                },
                "end": {
                    "char": 7426,
                    "col": 25,
                    "line": 264
                }
            },
            "name": "projMatInverse",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7402,
                            "col": 1,
                            "line": 264
                        },
                        "end": {
                            "char": 7405,
                            "col": 4,
                            "line": 264
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7407,
                            "col": 6,
                            "line": 264
                        },
                        "end": {
                            "char": 7411,
                            "col": 10,
                            "line": 264
                        }
                    },
                    "name": "glm::mat4",
                    "type": "glm::mat4"
                }
            ],
            "type": "glm::mat4"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7428,
                    "col": 1,
                    "line": 265
                },
                "end": {
                    "char": 7456,
                    "col": 29,
                    "line": 265
                }
            },
            "name": "viewProjMatInverse",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7428,
                            "col": 1,
                            "line": 265
                        },
                        "end": {
                            "char": 7431,
                            "col": 4,
                            "line": 265
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7433,
                            "col": 6,
                            "line": 265
                        },
                        "end": {
                            "char": 7437,
                            "col": 10,
                            "line": 265
                        }
                    },
                    "name": "glm::mat4",
                    "type": "glm::mat4"
                }
            ],
            "type": "glm::mat4"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7458,
                    "col": 1,
                    "line": 266
                },
                "end": {
                    "char": 7477,
                    "col": 20,
                    "line": 266
                }
            },
            "name": "leap2view",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7458,
                            "col": 1,
                            "line": 266
                        },
                        "end": {
                            "char": 7461,
                            "col": 4,
                            "line": 266
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7463,
                            "col": 6,
                            "line": 266
                        },
                        "end": {
                            "char": 7467,
                            "col": 10,
                            "line": 266
                        }
                    },
                    "name": "glm::mat4",
                    "type": "glm::mat4"
                }
            ],
            "type": "glm::mat4"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7479,
                    "col": 1,
                    "line": 267
                },
                "end": {
                    "char": 7502,
                    "col": 24,
                    "line": 267
                }
            },
            "name": "world2minimap",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7479,
                            "col": 1,
                            "line": 267
                        },
                        "end": {
                            "char": 7482,
                            "col": 4,
                            "line": 267
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7484,
                            "col": 6,
                            "line": 267
                        },
                        "end": {
                            "char": 7488,
                            "col": 10,
                            "line": 267
                        }
                    },
                    "name": "glm::mat4",
                    "type": "glm::mat4"
                }
            ],
            "type": "glm::mat4"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7504,
                    "col": 1,
                    "line": 268
                },
                "end": {
                    "char": 7531,
                    "col": 28,
                    "line": 268
                }
            },
            "name": "minimapScale",
            "nodes": [
                {
                    "ast": "FloatingLiteral",
                    "loc": {
                        "begin": {
                            "char": 7525,
                            "col": 22,
                            "line": 268
                        },
                        "end": {
                            "char": 7531,
                            "col": 28,
                            "line": 268
                        }
                    },
                    "type": "float",
                    "value": 0.004999999888241291
                }
            ],
            "type": "float"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7533,
                    "col": 1,
                    "line": 269
                },
                "end": {
                    "char": 7554,
                    "col": 22,
                    "line": 269
                }
            },
            "name": "mini2world",
            "nodes": [
                {
                    "ast": "FloatingLiteral",
                    "loc": {
                        "begin": {
                            "char": 7552,
                            "col": 20,
                            "line": 269
                        },
                        "end": {
                            "char": 7554,
                            "col": 22,
                            "line": 269
                        }
                    },
                    "type": "double"
                }
            ],
            "type": "float"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7556,
                    "col": 1,
                    "line": 270
                },
                "end": {
                    "char": 7587,
                    "col": 32,
                    "line": 270
                }
            },
            "name": "kinect2world_scale",
            "nodes": [
                {
                    "ast": "FloatingLiteral",
                    "loc": {
                        "begin": {
                            "char": 7583,
                            "col": 28,
                            "line": 270
                        },
                        "end": {
                            "char": 7587,
                            "col": 32,
                            "line": 270
                        }
                    },
                    "type": "float",
                    "value": 10.0
                }
            ],
            "type": "float"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7589,
                    "col": 1,
                    "line": 271
                },
                "end": {
                    "char": 7625,
                    "col": 37,
                    "line": 271
                }
            },
            "name": "near_clip",
            "nodes": [
                {
                    "ast": "BinaryOperator",
                    "loc": {
                        "begin": {
                            "char": 7607,
                            "col": 19,
                            "line": 271
                        },
                        "end": {
                            "char": 7625,
                            "col": 37,
                            "line": 271
                        }
                    },
                    "nodes": [
                        {
                            "ast": "FloatingLiteral",
                            "loc": {
                                "begin": {
                                    "char": 7607,
                                    "col": 19,
                                    "line": 271
                                },
                                "end": {
                                    "char": 7612,
                                    "col": 24,
                                    "line": 271
                                }
                            },
                            "type": "float"
                        },
                        {
                            "ast": "DeclRefExpr",
                            "loc": {
                                "begin": {
                                    "char": 7615,
                                    "col": 27,
                                    "line": 271
                                },
                                "end": {
                                    "char": 7625,
                                    "col": 37,
                                    "line": 271
                                }
                            },
                            "name": "mini2world",
                            "type": "float"
                        }
                    ],
                    "type": "float"
                }
            ],
            "type": "float"
        },
        {
            "ast": "VarDecl",
            "comment": {
                "text": "// / mini2world;"
            },
            "loc": {
                "begin": {
                    "char": 7627,
                    "col": 1,
                    "line": 272
                },
                "end": {
                    "char": 7663,
                    "col": 37,
                    "line": 272
                }
            },
            "name": "far_clip",
            "nodes": [
                {
                    "ast": "BinaryOperator",
                    "loc": {
                        "begin": {
                            "char": 7644,
                            "col": 18,
                            "line": 272
                        },
                        "end": {
                            "char": 7663,
                            "col": 37,
                            "line": 272
                        }
                    },
                    "nodes": [
                        {
                            "ast": "FloatingLiteral",
                            "loc": {
                                "begin": {
                                    "char": 7644,
                                    "col": 18,
                                    "line": 272
                                },
                                "end": {
                                    "char": 7650,
                                    "col": 24,
                                    "line": 272
                                }
                            },
                            "type": "float"
                        },
                        {
                            "ast": "DeclRefExpr",
                            "loc": {
                                "begin": {
                                    "char": 7653,
                                    "col": 27,
                                    "line": 272
                                },
                                "end": {
                                    "char": 7663,
                                    "col": 37,
                                    "line": 272
                                }
                            },
                            "name": "mini2world",
                            "type": "float"
                        }
                    ],
                    "type": "float"
                }
            ],
            "type": "float"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7681,
                    "col": 1,
                    "line": 273
                },
                "end": {
                    "char": 7697,
                    "col": 17,
                    "line": 273
                }
            },
            "name": "eyePos",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7681,
                            "col": 1,
                            "line": 273
                        },
                        "end": {
                            "char": 7684,
                            "col": 4,
                            "line": 273
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7686,
                            "col": 6,
                            "line": 273
                        },
                        "end": {
                            "char": 7690,
                            "col": 10,
                            "line": 273
                        }
                    },
                    "name": "glm::vec3",
                    "type": "glm::vec3"
                }
            ],
            "type": "glm::vec3"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7699,
                    "col": 1,
                    "line": 274
                },
                "end": {
                    "char": 7716,
                    "col": 18,
                    "line": 274
                }
            },
            "name": "headPos",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7699,
                            "col": 1,
                            "line": 274
                        },
                        "end": {
                            "char": 7702,
                            "col": 4,
                            "line": 274
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7704,
                            "col": 6,
                            "line": 274
                        },
                        "end": {
                            "char": 7708,
                            "col": 10,
                            "line": 274
                        }
                    },
                    "name": "glm::vec3",
                    "type": "glm::vec3"
                }
            ],
            "type": "glm::vec3"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7736,
                    "col": 1,
                    "line": 275
                },
                "end": {
                    "char": 7753,
                    "col": 18,
                    "line": 275
                }
            },
            "name": "viewport",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7736,
                            "col": 1,
                            "line": 275
                        },
                        "end": {
                            "char": 7744,
                            "col": 9,
                            "line": 275
                        }
                    },
                    "name": "struct Viewport",
                    "type": "Viewport"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 7745,
                            "col": 10,
                            "line": 275
                        },
                        "end": {
                            "char": 7753,
                            "col": 18,
                            "line": 275
                        }
                    },
                    "name": "Viewport",
                    "type": "Viewport"
                }
            ],
            "type": "Viewport"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7802,
                    "col": 1,
                    "line": 278
                },
                "end": {
                    "char": 7822,
                    "col": 21,
                    "line": 278
                }
            },
            "name": "vrLocation",
            "nodes": [
                {
                    "ast": "NamespaceRef",
                    "loc": {
                        "begin": {
                            "char": 7802,
                            "col": 1,
                            "line": 278
                        },
                        "end": {
                            "char": 7805,
                            "col": 4,
                            "line": 278
                        }
                    },
                    "name": "glm"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7807,
                            "col": 6,
                            "line": 278
                        },
                        "end": {
                            "char": 7811,
                            "col": 10,
                            "line": 278
                        }
                    },
                    "name": "glm::vec3",
                    "type": "glm::vec3"
                }
            ],
            "type": "glm::vec3"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7853,
                    "col": 1,
                    "line": 280
                },
                "end": {
                    "char": 7865,
                    "col": 13,
                    "line": 280
                }
            },
            "name": "kidx",
            "nodes": [
                {
                    "ast": "IntegerLiteral",
                    "loc": {
                        "begin": {
                            "char": 7864,
                            "col": 12,
                            "line": 280
                        },
                        "end": {
                            "char": 7865,
                            "col": 13,
                            "line": 280
                        }
                    },
                    "type": "int",
                    "value": 0
                }
            ],
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7868,
                    "col": 1,
                    "line": 282
                },
                "end": {
                    "char": 7881,
                    "col": 14,
                    "line": 282
                }
            },
            "name": "state",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7868,
                            "col": 1,
                            "line": 282
                        },
                        "end": {
                            "char": 7873,
                            "col": 6,
                            "line": 282
                        }
                    },
                    "name": "struct State",
                    "type": "State"
                }
            ],
            "type": "State *"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7883,
                    "col": 1,
                    "line": 283
                },
                "end": {
                    "char": 7903,
                    "col": 21,
                    "line": 283
                }
            },
            "name": "statemap",
            "nodes": [
                {
                    "ast": "TemplateRef",
                    "loc": {
                        "begin": {
                            "char": 7883,
                            "col": 1,
                            "line": 283
                        },
                        "end": {
                            "char": 7887,
                            "col": 5,
                            "line": 283
                        }
                    },
                    "name": "Mmap"
                },
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 7888,
                            "col": 6,
                            "line": 283
                        },
                        "end": {
                            "char": 7893,
                            "col": 11,
                            "line": 283
                        }
                    },
                    "name": "struct State",
                    "type": "State"
                }
            ],
            "type": "Mmap<State>"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7906,
                    "col": 1,
                    "line": 285
                },
                "end": {
                    "char": 7927,
                    "col": 22,
                    "line": 285
                }
            },
            "name": "fluid_passes",
            "nodes": [
                {
                    "ast": "IntegerLiteral",
                    "loc": {
                        "begin": {
                            "char": 7925,
                            "col": 20,
                            "line": 285
                        },
                        "end": {
                            "char": 7927,
                            "col": 22,
                            "line": 285
                        }
                    },
                    "type": "int",
                    "value": 14
                }
            ],
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7929,
                    "col": 1,
                    "line": 286
                },
                "end": {
                    "char": 7955,
                    "col": 27,
                    "line": 286
                }
            },
            "name": "fluid_noise_count",
            "nodes": [
                {
                    "ast": "IntegerLiteral",
                    "loc": {
                        "begin": {
                            "char": 7953,
                            "col": 25,
                            "line": 286
                        },
                        "end": {
                            "char": 7955,
                            "col": 27,
                            "line": 286
                        }
                    },
                    "type": "int",
                    "value": 32
                }
            ],
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 7957,
                    "col": 1,
                    "line": 287
                },
                "end": {
                    "char": 7984,
                    "col": 28,
                    "line": 287
                }
            },
            "name": "fluid_decay",
            "nodes": [
                {
                    "ast": "FloatingLiteral",
                    "loc": {
                        "begin": {
                            "char": 7977,
                            "col": 21,
                            "line": 287
                        },
                        "end": {
                            "char": 7984,
                            "col": 28,
                            "line": 287
                        }
                    },
                    "type": "float",
                    "value": 0.9998999834060669
                }
            ],
            "type": "float"
        },
        {
            "ast": "VarDecl",
            "comment": {
                "text": "//0.00001;"
            },
            "loc": {
                "begin": {
                    "char": 7986,
                    "col": 1,
                    "line": 288
                },
                "end": {
                    "char": 8021,
                    "col": 36,
                    "line": 288
                }
            },
            "name": "fluid_viscosity",
            "nodes": [
                {
                    "ast": "FloatingLiteral",
                    "loc": {
                        "begin": {
                            "char": 8011,
                            "col": 26,
                            "line": 288
                        },
                        "end": {
                            "char": 8021,
                            "col": 36,
                            "line": 288
                        }
                    },
                    "type": "double",
                    "value": 1e-08
                }
            ],
            "type": "double"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 8034,
                    "col": 1,
                    "line": 289
                },
                "end": {
                    "char": 8068,
                    "col": 35,
                    "line": 289
                }
            },
            "name": "fluid_boundary_damping",
            "nodes": [
                {
                    "ast": "FloatingLiteral",
                    "loc": {
                        "begin": {
                            "char": 8066,
                            "col": 33,
                            "line": 289
                        },
                        "end": {
                            "char": 8068,
                            "col": 35,
                            "line": 289
                        }
                    },
                    "type": "double",
                    "value": 0.2
                }
            ],
            "type": "double"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 8070,
                    "col": 1,
                    "line": 290
                },
                "end": {
                    "char": 8093,
                    "col": 24,
                    "line": 290
                }
            },
            "name": "fluid_noise",
            "nodes": [
                {
                    "ast": "FloatingLiteral",
                    "loc": {
                        "begin": {
                            "char": 8091,
                            "col": 22,
                            "line": 290
                        },
                        "end": {
                            "char": 8093,
                            "col": 24,
                            "line": 290
                        }
                    },
                    "type": "double",
                    "value": 8.0
                }
            ],
            "type": "double"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 8096,
                    "col": 1,
                    "line": 292
                },
                "end": {
                    "char": 8123,
                    "col": 28,
                    "line": 292
                }
            },
            "name": "density_decay",
            "nodes": [
                {
                    "ast": "FloatingLiteral",
                    "loc": {
                        "begin": {
                            "char": 8118,
                            "col": 23,
                            "line": 292
                        },
                        "end": {
                            "char": 8123,
                            "col": 28,
                            "line": 292
                        }
                    },
                    "type": "float",
                    "value": 0.9800000190734863
                }
            ],
            "type": "float"
        },
        {
            "ast": "VarDecl",
            "comment": {
                "text": "// somwhere between 0.1 and 0.01 seems to be good"
            },
            "loc": {
                "begin": {
                    "char": 8125,
                    "col": 1,
                    "line": 293
                },
                "end": {
                    "char": 8153,
                    "col": 29,
                    "line": 293
                }
            },
            "name": "density_diffuse",
            "nodes": [
                {
                    "ast": "FloatingLiteral",
                    "loc": {
                        "begin": {
                            "char": 8149,
                            "col": 25,
                            "line": 293
                        },
                        "end": {
                            "char": 8153,
                            "col": 29,
                            "line": 293
                        }
                    },
                    "type": "double"
                }
            ],
            "type": "float"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 8205,
                    "col": 1,
                    "line": 294
                },
                "end": {
                    "char": 8230,
                    "col": 26,
                    "line": 294
                }
            },
            "name": "density_scale",
            "nodes": [
                {
                    "ast": "FloatingLiteral",
                    "loc": {
                        "begin": {
                            "char": 8227,
                            "col": 23,
                            "line": 294
                        },
                        "end": {
                            "char": 8230,
                            "col": 26,
                            "line": 294
                        }
                    },
                    "type": "double"
                }
            ],
            "type": "float"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 8233,
                    "col": 1,
                    "line": 296
                },
                "end": {
                    "char": 8258,
                    "col": 26,
                    "line": 296
                }
            },
            "name": "simThread",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 8233,
                            "col": 1,
                            "line": 296
                        },
                        "end": {
                            "char": 8244,
                            "col": 12,
                            "line": 296
                        }
                    },
                    "name": "struct MetroThread",
                    "type": "MetroThread"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 8245,
                            "col": 13,
                            "line": 296
                        },
                        "end": {
                            "char": 8258,
                            "col": 26,
                            "line": 296
                        }
                    },
                    "name": "MetroThread",
                    "nodes": [
                        {
                            "ast": "IntegerLiteral",
                            "loc": {
                                "begin": {
                                    "char": 8255,
                                    "col": 23,
                                    "line": 296
                                },
                                "end": {
                                    "char": 8257,
                                    "col": 25,
                                    "line": 296
                                }
                            },
                            "type": "int"
                        }
                    ],
                    "type": "MetroThread"
                }
            ],
            "type": "MetroThread"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 8260,
                    "col": 1,
                    "line": 297
                },
                "end": {
                    "char": 8287,
                    "col": 28,
                    "line": 297
                }
            },
            "name": "fluidThread",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 8260,
                            "col": 1,
                            "line": 297
                        },
                        "end": {
                            "char": 8271,
                            "col": 12,
                            "line": 297
                        }
                    },
                    "name": "struct MetroThread",
                    "type": "MetroThread"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 8272,
                            "col": 13,
                            "line": 297
                        },
                        "end": {
                            "char": 8287,
                            "col": 28,
                            "line": 297
                        }
                    },
                    "name": "MetroThread",
                    "nodes": [
                        {
                            "ast": "IntegerLiteral",
                            "loc": {
                                "begin": {
                                    "char": 8284,
                                    "col": 25,
                                    "line": 297
                                },
                                "end": {
                                    "char": 8286,
                                    "col": 27,
                                    "line": 297
                                }
                            },
                            "type": "int"
                        }
                    ],
                    "type": "MetroThread"
                }
            ],
            "type": "MetroThread"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 8289,
                    "col": 1,
                    "line": 298
                },
                "end": {
                    "char": 8307,
                    "col": 19,
                    "line": 298
                }
            },
            "name": "isRunning",
            "nodes": [
                {
                    "ast": "IntegerLiteral",
                    "loc": {
                        "begin": {
                            "char": 8306,
                            "col": 18,
                            "line": 298
                        },
                        "end": {
                            "char": 8307,
                            "col": 19,
                            "line": 298
                        }
                    },
                    "type": "int"
                }
            ],
            "type": "bool"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 8310,
                    "col": 1,
                    "line": 300
                },
                "end": {
                    "char": 8326,
                    "col": 17,
                    "line": 300
                }
            },
            "name": "soloView",
            "nodes": [
                {
                    "ast": "IntegerLiteral",
                    "loc": {
                        "begin": {
                            "char": 8325,
                            "col": 16,
                            "line": 300
                        },
                        "end": {
                            "char": 8326,
                            "col": 17,
                            "line": 300
                        }
                    },
                    "type": "int",
                    "value": 2
                }
            ],
            "type": "int"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 8329,
                    "col": 1,
                    "line": 302
                },
                "end": {
                    "char": 8346,
                    "col": 18,
                    "line": 302
                }
            },
            "name": "gBufferVR",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 8329,
                            "col": 1,
                            "line": 302
                        },
                        "end": {
                            "char": 8336,
                            "col": 8,
                            "line": 302
                        }
                    },
                    "name": "struct GBuffer",
                    "type": "GBuffer"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 8337,
                            "col": 9,
                            "line": 302
                        },
                        "end": {
                            "char": 8346,
                            "col": 18,
                            "line": 302
                        }
                    },
                    "name": "GBuffer",
                    "type": "GBuffer"
                }
            ],
            "type": "GBuffer"
        },
        {
            "ast": "VarDecl",
            "loc": {
                "begin": {
                    "char": 8348,
                    "col": 1,
                    "line": 303
                },
                "end": {
                    "char": 8367,
                    "col": 20,
                    "line": 303
                }
            },
            "name": "gBufferProj",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 8348,
                            "col": 1,
                            "line": 303
                        },
                        "end": {
                            "char": 8355,
                            "col": 8,
                            "line": 303
                        }
                    },
                    "name": "struct GBuffer",
                    "type": "GBuffer"
                },
                {
                    "ast": "CallExpr",
                    "loc": {
                        "begin": {
                            "char": 8356,
                            "col": 9,
                            "line": 303
                        },
                        "end": {
                            "char": 8367,
                            "col": 20,
                            "line": 303
                        }
                    },
                    "name": "GBuffer",
                    "type": "GBuffer"
                }
            ],
            "type": "GBuffer"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 8370,
                    "col": 1,
                    "line": 305
                },
                "end": {
                    "char": 9614,
                    "col": 2,
                    "line": 342
                }
            },
            "mangled_name": "__Z17fluid_land_resistPN3glm5tvec3IfLNS_9precisionE0EEENS0_IiLS1_0EEEPfS4_",
            "name": "fluid_land_resist",
            "nodes": [
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 8393,
                            "col": 24,
                            "line": 305
                        },
                        "end": {
                            "char": 8415,
                            "col": 46,
                            "line": 305
                        }
                    },
                    "name": "velocities",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 8393,
                                    "col": 24,
                                    "line": 305
                                },
                                "end": {
                                    "char": 8396,
                                    "col": 27,
                                    "line": 305
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 8398,
                                    "col": 29,
                                    "line": 305
                                },
                                "end": {
                                    "char": 8402,
                                    "col": 33,
                                    "line": 305
                                }
                            },
                            "name": "glm::vec3",
                            "type": "glm::vec3"
                        }
                    ],
                    "type": "glm::vec3 *"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 8417,
                            "col": 48,
                            "line": 305
                        },
                        "end": {
                            "char": 8443,
                            "col": 74,
                            "line": 305
                        }
                    },
                    "name": "field_dim",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 8423,
                                    "col": 54,
                                    "line": 305
                                },
                                "end": {
                                    "char": 8426,
                                    "col": 57,
                                    "line": 305
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 8428,
                                    "col": 59,
                                    "line": 305
                                },
                                "end": {
                                    "char": 8433,
                                    "col": 64,
                                    "line": 305
                                }
                            },
                            "name": "glm::ivec3",
                            "type": "glm::ivec3"
                        }
                    ],
                    "type": "const glm::ivec3"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 8445,
                            "col": 76,
                            "line": 305
                        },
                        "end": {
                            "char": 8466,
                            "col": 97,
                            "line": 305
                        }
                    },
                    "name": "distancefield",
                    "type": "float *"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 8468,
                            "col": 99,
                            "line": 305
                        },
                        "end": {
                            "char": 8493,
                            "col": 124,
                            "line": 305
                        }
                    },
                    "name": "land_dim",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 8474,
                                    "col": 105,
                                    "line": 305
                                },
                                "end": {
                                    "char": 8477,
                                    "col": 108,
                                    "line": 305
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 8479,
                                    "col": 110,
                                    "line": 305
                                },
                                "end": {
                                    "char": 8484,
                                    "col": 115,
                                    "line": 305
                                }
                            },
                            "name": "glm::ivec3",
                            "type": "glm::ivec3"
                        }
                    ],
                    "type": "const glm::ivec3"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 8495,
                            "col": 126,
                            "line": 305
                        },
                        "end": {
                            "char": 9614,
                            "col": 2,
                            "line": 342
                        }
                    },
                    "text": "{\n\n\tglm::vec3 field_dimf = glm::vec3(field_dim);\n\n\tint i = 0;\n\tfor (size_t z = 0; z<field_dim.z; z++) {\n\t\tfor (size_t y = 0; y<field_dim.y; y++) {\n\t\t\tfor (size_t x = 0; x<field_dim.x; x++, i++) {\n\t\t\t\t\n\t\t\t\t// get norm'd coordinate:\n\t\t\t\tglm::vec3 norm = glm::vec3(x,y,z) / field_dimf;\n\n\t\t\t\t// use this to sample the landscape:\n\t\t\t\tfloat sdist;\n\t\t\t\tal_field3d_readnorm_interp(land_dim, state->distance, norm, &sdist );\n\t\t\t\tfloat dist = fabsf(sdist);\n\n\t\t\t\t// generate a normalized influence factor -- the closer we are to the surface, the greater this is\n\t\t\t\t//float influence = glm::smoothstep(0.05f, 0.f, dist);\n\t\t\t\t// s is the amount of dist where the influence is 50%\n\t\t\t\tfloat s = 0.01f;\n\t\t\t\tfloat influence = s / (s + dist);\n\n\t\t\t\tglm::vec3& vel = velocities[i];\n\t\t\t\t\n\t\t\t\t// get a normal for the land:\n\t\t\t\t// TODO: or read from state->land xyz?\n\t\t\t\tglm::vec3 normal = sdf_field_normal4(land_dim, state->distance, norm, 2.f/LAND_DIM);\n\n\t\t\t\t// re-orient to be orthogonal to the land normal:\n\t\t\t\tglm::vec3 rescaled = make_orthogonal_to(vel, normal);\n\n\t\t\t\t// update:\n\t\t\t\tvel = mix(vel, rescaled, influence);\t\n\t\t\t}\n\t\t}\n\t}\n}"
                }
            ],
            "type": "void (glm::vec3 *, const glm::ivec3, float *, const glm::ivec3)",
            "type_args": [
                "glm::vec3 *",
                "const glm::ivec3",
                "float *",
                "const glm::ivec3"
            ],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 9616,
                    "col": 1,
                    "line": 344
                },
                "end": {
                    "char": 9673,
                    "col": 58,
                    "line": 344
                }
            },
            "mangled_name": "__Z12fluid_updated",
            "name": "fluid_update",
            "nodes": [
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 9634,
                            "col": 19,
                            "line": 344
                        },
                        "end": {
                            "char": 9643,
                            "col": 28,
                            "line": 344
                        }
                    },
                    "name": "dt",
                    "type": "double"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 9645,
                            "col": 30,
                            "line": 344
                        },
                        "end": {
                            "char": 9673,
                            "col": 58,
                            "line": 344
                        }
                    },
                    "text": "{ state->fluid_update(dt); }"
                }
            ],
            "type": "void (double)",
            "type_args": [
                "double"
            ],
            "type_ret": "void"
        },
        {
            "ast": "CXXMethod",
            "loc": {
                "begin": {
                    "char": 9675,
                    "col": 1,
                    "line": 346
                },
                "end": {
                    "char": 12071,
                    "col": 2,
                    "line": 413
                }
            },
            "mangled_name": "__ZN5State12fluid_updateEf",
            "name": "fluid_update",
            "nodes": [
                {
                    "ast": "TypeRef",
                    "loc": {
                        "begin": {
                            "char": 9680,
                            "col": 6,
                            "line": 346
                        },
                        "end": {
                            "char": 9685,
                            "col": 11,
                            "line": 346
                        }
                    },
                    "name": "struct State",
                    "type": "State"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 9700,
                            "col": 26,
                            "line": 346
                        },
                        "end": {
                            "char": 9708,
                            "col": 34,
                            "line": 346
                        }
                    },
                    "name": "dt",
                    "type": "float"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 9710,
                            "col": 36,
                            "line": 346
                        },
                        "end": {
                            "char": 12071,
                            "col": 2,
                            "line": 413
                        }
                    },
                    "text": "{\n\t\n\tconst glm::ivec3 dim = fluidpod.dim();\n\t// diffuse the velocities (viscosity)\n\tfluidpod.velocities.swap();\n\tal_field3d_diffuse(dim, fluidpod.velocities.back(), fluidpod.velocities.front(), fluid_viscosity, fluid_passes);\n\n\t// stabilize:\n\t// prepare new gradient data:\n\tal_field3d_zero(dim, fluidpod.gradient.back());\n\tal_field3d_derive_gradient(dim, fluidpod.velocities.back(), fluidpod.gradient.back()); \n\t// diffuse it:\n\tal_field3d_diffuse(dim, fluidpod.gradient.back(), fluidpod.gradient.front(), 0.5, fluid_passes / 2);\n\t// subtract from current velocities:\n\tal_field3d_subtract_gradient(dim, fluidpod.gradient.front(), fluidpod.velocities.front());\n\t\n\t// advect:\n\tfluidpod.velocities.swap(); \n\tal_field3d_advect(dim, fluidpod.velocities.front(), fluidpod.velocities.back(), fluidpod.velocities.front(), 1.);\n\n\t// apply boundaries:\n\tfluid_land_resist(fluidpod.velocities.front(), dim, distance, land_dim);\n\n\t// friction:\n\tal_field3d_scale(dim, fluidpod.velocities.front(), glm::vec3(fluid_decay));\n\t\n\n\t/*\n\t// update fluid\n\tField3D<>& velocities = fluid.velocities;\n\tconst size_t dim0 = velocities.dimx();\n\tconst size_t dim1 = velocities.dimy();\n\tconst size_t dim2 = velocities.dimz();\n\tglm::vec3 * data = (glm::vec3 *)velocities.front().ptr();\n\t//float * boundary = boundary;\n\n\t// and some turbulence:\n\tif (0) {\n\t\tfor (int i=0; i < rnd::integer(fluid_noise_count); i++) {\n\t\t\t// pick a cell at random:\n\t\t\tglm::vec3 * cell = data + (size_t)rnd::integer(dim0*dim1*dim2);\n\t\t\t// add a random vector:\n\t\t\t*cell = glm::sphericalRand(rnd::uni((float)fluid_noise));\n\t\t}\n\t}\n\n\t//apply_fluid_boundary2(data, (glm::vec4 *)landscape.ptr(), dim0, dim1, dim2);\n\tvelocities.diffuse(fluid_viscosity, fluid_passes);\n\t// apply boundaries:\n\t//apply_fluid_boundary2(data, boundary, dim0, dim1, dim2);\n\t//apply_fluid_boundary2(data, (glm::vec4 *)landscape.ptr(), dim0, dim1, dim2);\n\t// stabilize:\n\tfluid.project(fluid_passes / 2);\n\t// advect:\n\tvelocities.advect(velocities.back(), 1.);\n\n\tfluid_land_resist((glm::vec3 *)velocities.front().data, field_dim, state->distance, land_dim);\n\n\t// apply boundaries:\n\t//apply_fluid_boundary2(data, boundary, dim0, dim1, dim2);\n\t//apply_fluid_boundary2(data, (glm::vec4 *)landscape.ptr(), dim0, dim1, dim2);\n\tvelocities.front().scale(fluid_decay);\n\n\t// clear gradients:\n\tfluid.gradient.front().zero();\n\tfluid.gradient.back().zero();\n\t*/\n}"
                }
            ],
            "type": "void (float)",
            "type_args": [
                "float"
            ],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 12073,
                    "col": 1,
                    "line": 415
                },
                "end": {
                    "char": 13725,
                    "col": 2,
                    "line": 463
                }
            },
            "mangled_name": "__Z13fungus_updatef",
            "name": "fungus_update",
            "nodes": [
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 12092,
                            "col": 20,
                            "line": 415
                        },
                        "end": {
                            "char": 12100,
                            "col": 28,
                            "line": 415
                        }
                    },
                    "name": "dt",
                    "type": "float"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 12102,
                            "col": 30,
                            "line": 415
                        },
                        "end": {
                            "char": 13725,
                            "col": 2,
                            "line": 463
                        }
                    },
                    "text": "{\n\tconst glm::ivec2 dim = glm::ivec2(FUNGUS_DIM, FUNGUS_DIM);\n\tauto & src_array = state->fungus;\n\tauto & dst_array = state->fungus_old;\n\n\t//float * land = state->\n\n\tfor (int i=0, y=0; y<dim.y; y++) {\n\t\tfor (int x=0; x<dim.x; x++, i++) {\n\t\t\tconst glm::vec2 cell = glm::vec2(float(x),float(y));\t\t\t\n\t\t\tconst glm::vec2 norm = cell/glm::vec2(dim); // TODO convert to premultiplier\n\t\t\tfloat C = src_array[i];\n\t\t\tfloat C1 = C - 0.1;\n\t\t\t//float h = 20 * .1;//heightmap_array.sample(norm);\n\t\t\tglm::vec4 l;\n\t\t\tal_field2d_readnorm_interp(glm::ivec2(LAND_DIM, LAND_DIM), state->land, norm, &l);\n\t\t\tfloat h = 20.f * l.w;\n\t\t\tfloat hu = 0.;//humanmap_array.sample(norm);\n\t\t\tfloat dst = C;\n\t\t\tif (h <= 0 || hu > 0.1) {\n\t\t\t\t// force lowlands to be vacant\n\t\t\t\t// (note, human will also do this)\n\t\t\t\tdst = 0;\n\t\t\t} else if (C < -0.1) {\n\t\t\t\t// very negative values gradually drift back to zero\n\t\t\t\tdst = C * 0.999;\n\t\t\t} else if (C < 0) {\n\t\t\t\t// and then jump to zero when in [-0.1,0) range\n\t\t\t\tdst = 0;\n\t\t\t} else if (h < C1 || rnd::uni() < 0.00005*h) {\n\t\t\t\t// if land lower than vitality, decrease vitality\n\t\t\t\t// also random chance of decay for any living cell\n\t\t\t\tdst = h*rnd::uni();\n\t\t\t} else if (rnd::uni() < 0.06*h) {\n\t\t\t\t// migration chance increases with altitude\n\t\t\t\t// pick a neighbour cell:\n\t\t\t\tglm::vec2 tc = cell + glm::vec2(floor(rnd::uni()*3)-1, floor(rnd::uni()*3)-1);\n\t\t\t\tfloat tv = al_field2d_read(dim, src_array, tc); //src_array.samplepix(tc);\n\t\t\t\t// if alive, copy it\n\t\t\t\tif (tv > 0.) { dst = tv; }\n\t\t\t}\n\t\t\tdst_array[i] = dst;\n\t\t}\n\t}\n\n\tmemcpy(src_array, dst_array, sizeof(state->fungus));\n\n\t//fungus_write = !fungus_write;\n}"
                }
            ],
            "type": "void (float)",
            "type_args": [
                "float"
            ],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 13727,
                    "col": 1,
                    "line": 465
                },
                "end": {
                    "char": 20842,
                    "col": 2,
                    "line": 687
                }
            },
            "mangled_name": "__Z10sim_updatef",
            "name": "sim_update",
            "nodes": [
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 13743,
                            "col": 17,
                            "line": 465
                        },
                        "end": {
                            "char": 13751,
                            "col": 25,
                            "line": 465
                        }
                    },
                    "name": "dt",
                    "type": "float"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 13753,
                            "col": 27,
                            "line": 465
                        },
                        "end": {
                            "char": 20842,
                            "col": 2,
                            "line": 687
                        }
                    },
                    "text": "{\n\n\t// inverse dt gives rate (per second)\n\tfloat idt = 1.f/dt;\n\n\n\tAlice& alice = Alice::Instance();\n\tif (!alice.isSimulating) return;\n\n\tCloudDevice& kinect0 = alice.cloudDeviceManager.devices[0];\n\tCloudDevice& kinect1 = alice.cloudDeviceManager.devices[1];\n\n\t\n\tif (1) {\n\t\t// anchor sets centre of rotation of the cloud (relative to camera view)\n\t\tglm::vec3 anchor = glm::vec3(0,0,-1);\n\n\t\n\t\tkinect0.cloudTransform = \n\t\t\tglm::translate(world_centre) *\n\t\t\tglm::scale(glm::vec3(kinect2world_scale)) *\n\t\t\t\n\t\t\tglm::translate(anchor) * // anchor\n\t\t\tglm::rotate(float(M_PI/-2.), glm::vec3(1,0,0)) * \n\t\t\tglm::translate(-anchor) * // anchor\n\n\t\t\tglm::translate(glm::vec3(-1.5,0,0)) * // camera location in real world\n\t\t\tglm::rotate(float(M_PI/2.), glm::vec3(0,0,1)) * // camera orient in real world\n\t\t\tglm::mat4();\n\n\t\tkinect1.cloudTransform = \n\t\t\tglm::translate(world_centre) *\n\t\t\tglm::scale(glm::vec3(kinect2world_scale)) * \n\n\t\t\tglm::translate(anchor) * // anchor\n\t\t\tglm::rotate(float(M_PI/-2.), glm::vec3(1,0,0)) * \n\t\t\tglm::translate(-anchor) * // anchor\n\n\t\t\tglm::translate(glm::vec3(1.5,0,0)) * // camera location in real world\n\t\t\tglm::rotate(float(M_PI/2.), glm::vec3(0,0,1)) * // camera orient in real world\n\t\t\tglm::mat4();\n\n\t\t{\n\t\t\tconst CloudFrame& cloudFrame1 = kinect1.cloudFrame();\n\t\t\tconst glm::vec3 * cloud_points1 = cloudFrame1.xyz;\n\t\t\tconst glm::vec2 * uv_points1 = cloudFrame1.uv;\n\t\t\tconst glm::vec3 * rgb_points1 = cloudFrame1.rgb;\n\n\t\t\tconst CloudFrame& cloudFrame0 = kinect0.cloudFrame();\n\t\t\tconst glm::vec3 * cloud_points0 = cloudFrame0.xyz;\n\t\t\tconst glm::vec2 * uv_points0 = cloudFrame0.uv;\n\t\t\tconst glm::vec3 * rgb_points0 = cloudFrame0.rgb;\n\n\t\t\t//console.log(\"%d %d\", NUM_DEBUGDOTS, max_cloud_points);\n\t\t\t\n\t\t\tfor (int i=0; i<NUM_DEBUGDOTS; i++) {\n\t\t\t\tDebugDot& o = state->debugdots[i];\n\n\t\t\t\t\n\t\t\t\tint ki = (i/2);// % max_cloud_points;\n\t\t\t\tif (i % 2 == 0) {\n\t\t\t\t\to.location = cloud_points0[ki];\n\t\t\t\t\to.color = rgb_points0[ki];\n\t\t\t\t} else {\n\t\t\t\t\to.location = cloud_points1[ki];\n\t\t\t\t\to.color = rgb_points1[ki];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\n\t// \n\tal_field3d_scale(field_dim, state->density, glm::vec3(density_decay));\n\tal_field3d_diffuse(field_dim, state->density, state->density, density_diffuse);\n\tmemcpy(state->density_back, state->density, sizeof(glm::vec3) * FIELD_VOXELS);\n\n\tfungus_update(dt);\n\n\t// get the most recent complete frame:\n\t\n\tflip = !flip;\n\tconst CloudDevice& cd = alice.cloudDeviceManager.devices[0];\n\tconst CloudFrame& cloudFrame = cd.cloudFrame();\n\tconst glm::vec3 * cloud_points = cloudFrame.xyz;\n\tconst glm::vec2 * uv_points = cloudFrame.uv;\n\tconst glm::vec3 * rgb_points = cloudFrame.rgb;\n\tuint64_t max_cloud_points = sizeof(cloudFrame.xyz)/sizeof(glm::vec3);\n\tglm::vec3 kinectloc = world_centre + glm::vec3(0,0,-4);\n\n\t\n\t\t\n\tif (1) {\n\t\tfor (int i=0; i<NUM_PARTICLES; i++) {\n\t\t\tParticle &o = state->particles[i];\n\n\t\t\t// get norm'd coordinate:\n\t\t\tglm::vec3 norm = transform(world2field, o.location);\n\n\t\t\t//glm::vec3 flow;\n\t\t\t//fluid.velocities.front().readnorm(transform(world2field, o.location), &flow.x);\n\t\t\tglm::vec3 flow = al_field3d_readnorm_interp(field_dim, state->fluidpod.velocities.front(), norm);\n\n\t\t\t// noise:\n\t\t\tflow += glm::sphericalRand(0.0002f);\n\n\t\t\to.velocity = flow * idt;\n\t\t\t\n\t\t\t// sometimes assign to a random creature?\n\t\t\tif (rnd::uni() < 0.0001/NUM_PARTICLES) {\n\t\t\t\tint idx = i % NUM_OBJECTS;\n\t\t\t\to.location = state->objects[idx].location;\n\t\t\t}\n\t\t}\n\t} \n\n\t// simulate creatures:\n\tfor (int i=0; i<NUM_OBJECTS; i++) {\n\t\tauto &o = state->objects[i];\n\n\t\t// get norm'd coordinate:\n\t\tglm::vec3 norm = transform(world2field, o.location);\n\n\t\t// get fluid flow:\n\t\t//glm::vec3 flow;\n\t\t//fluid.velocities.front().readnorm(norm, &flow.x);\n\t\tglm::vec3 flow = al_field3d_readnorm_interp(field_dim, state->fluidpod.velocities.front(), norm);\n\n\t\t// get my distance from the ground:\n\t\tfloat sdist; // creature's distance above the ground (or negative if below)\n\t\tal_field3d_readnorm_interp(land_dim, state->distance, norm, &sdist);\n\n\t\t// convert to meters per second:\n\t\t// (why is this needed? shouldn't it be m/s already?)\n\t\tflow *= idt;\n\n\t\tfloat gravity = 2.0f;\n\t\to.accel.y -= gravity; //glm::mix(o.accel.y, newrise, 0.04f);\n\t\tif (sdist < (o.scale * 0.025f)) { //(o.scale * rnd::uni(2.f))) {\n\t\t\t// jump!\n\t\t\tfloat jump = rnd::uni();\n\t\t\to.accel.y = jump * gravity * 2.f * o.scale;\n\n\t\t\t// this is a good time to also emit a pulse:\n\t\t\tal_field3d_addnorm_interp(field_dim, state->density, norm, o.color * density_scale * jump);\n\t\t}\n\n\t\t// set my velocity, in meters per second:\n\t\to.velocity = flow + o.accel*dt;\n\t\t\n\t\t// wander:\n\t\to.orientation = safe_normalize(glm::slerp(o.orientation, quat_random() * o.orientation, 0.025f));\n\n\t\t// get a normal for the land:\n\t\tglm::vec3 normal = sdf_field_normal4(land_dim, state->distance, norm, 0.05f/LAND_DIM);\n\t\t// re-orient relative to ground:\n\t\to.orientation = glm::slerp(o.orientation, align_up_to(o.orientation, normal), 0.2f);\n\t\t\t\n\t\t// add my direction to the fluid current\n\t\tglm::vec3 push = quat_uf(o.orientation) * (creature_fluid_push * (float)dt);\n\t\t//fluid.velocities.front().addnorm(norm, &push.x);\n\t\tal_field3d_addnorm_interp(field_dim, state->fluidpod.velocities.front(), norm, push);\n\t}\n\n\n\t//if(accel == 1)state->objects[0].velocity += state->objects[0].velocity;\n\t//else if(decel == 1)state->objects[0].velocity -= state->objects[0].velocity * glm::vec3(2.);\n\n\tfor (int i=0; i<NUM_SEGMENTS; i++) {\n\t\tauto &o = state->segments[i];\n\t\tif (i % 8 == 0) {\n\t\t\t// a root;\n\t\t\t\n\t\t\t/*\n\t\t\tglm::vec3 fluidloc = transform(world2field, o.location);\n\t\t\tglm::vec3 flow;\n\t\t\tfluid.velocities.front().readnorm(fluidloc, &flow.x);\n\t\t\tglm::vec3 push = quat_uf(o.orientation) * (creature_fluid_push * (float)dt);\n\t\t\tfluid.velocities.front().addnorm(fluidloc, &push.x);\n\t\t\to.velocity = flow * idt;\n\n\t\t\tal_field3d_addnorm_interp(field_dim, state->density, fluidloc, o.color * density_scale * 0.02f);\n\t\t\t*/\n\n\n\t\t\t// get norm'd coordinate:\n\t\t\tglm::vec3 norm = transform(world2field, o.location);\n\n\t\t\t// get fluid flow:\n\t\t\t//glm::vec3 flow;\n\t\t\t//fluid.velocities.front().readnorm(norm, &flow.x);\n\t\t\tglm::vec3 flow = al_field3d_readnorm_interp(field_dim, state->fluidpod.velocities.front(), norm);\n\n\t\t\t// get my distance from the ground:\n\t\t\tfloat sdist; // creature's distance above the ground (or negative if below)\n\t\t\tal_field3d_readnorm_interp(land_dim, state->distance, norm, &sdist);\n\n\t\t\t// convert to meters per second:\n\t\t\tflow *= idt;\n\n\t\t\t// if below ground, rise up;\n\t\t\t// if above ground, sink down:\n\t\t\tfloat gravity = 0.1f;\n\t\t\tflow.y += sdist < 0.1f ? gravity : -gravity;\n\n\t\t\t// set my velocity, in meters per second:\n\t\t\to.velocity = flow;\n\t\t\t//if(accel == 1) o.velocity += o.velocity;\n\t\t\t//else if (decel == 1) o.velocity -= o.velocity * glm::vec3(2.);\n\n\t\t\t// use this to sample the landscape:\n\t\t\t\n\t\t\t// get a normal for the land:\n\t\t\tglm::vec3 normal = sdf_field_normal4(land_dim, state->distance, norm, 0.05f/LAND_DIM);\n\t\t\t// re-orient relative to ground:\n\t\t\to.orientation = glm::slerp(o.orientation, align_up_to(o.orientation, normal), 0.2f);\n\t\t\t\n\t\t} else {\n\t\t\tauto& p = state->segments[i-1];\n\t\t\to.scale = p.scale * 0.9f;\n\t\t}\n\t}\n}"
                }
            ],
            "type": "void (float)",
            "type_args": [
                "float"
            ],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 20845,
                    "col": 1,
                    "line": 690
                },
                "end": {
                    "char": 21703,
                    "col": 2,
                    "line": 728
                }
            },
            "mangled_name": "__Z11onUnloadGPUv",
            "name": "onUnloadGPU",
            "nodes": [
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 20864,
                            "col": 20,
                            "line": 690
                        },
                        "end": {
                            "char": 21703,
                            "col": 2,
                            "line": 728
                        }
                    },
                    "text": "{\n\t// free resources:\n\tlandShader.dest_closing();\n\theightMeshShader.dest_closing();\n\tparticleShader.dest_closing();\n\tobjectShader.dest_closing();\n\tsegmentShader.dest_closing();\n\tdeferShader.dest_closing();\n\tsimpleShader.dest_closing();\n\n\tquadMesh.dest_closing();\n\tcubeVBO.dest_closing();\n\tobjectInstancesVBO.dest_closing();\n\tobjectVAO.dest_closing();\n\tsegmentInstancesVBO.dest_closing();\n\tsegmentVAO.dest_closing();\n\tparticlesVAO.dest_closing();\n\tdebugVAO.dest_closing();\n\n\tfluidTex.dest_closing();\n\tdensityTex.dest_closing();\n\tdistanceTex.dest_closing();\n\tfungusTex.dest_closing();\n\tlandTex.dest_closing();\n\n\tprojFBOs[0].dest_closing();\n\tprojFBOs[1].dest_closing();\n\n\tgBufferVR.dest_closing();\n\tgBufferProj.dest_closing();\n\tAlice::Instance().hmd->dest_closing();\n\n\tif (colorTex) {\n\t\tglDeleteTextures(1, &colorTex);\n\t\tcolorTex = 0;\n\t}\n\n\t\n}"
                }
            ],
            "type": "void ()",
            "type_args": [],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 21705,
                    "col": 1,
                    "line": 730
                },
                "end": {
                    "char": 25685,
                    "col": 2,
                    "line": 863
                }
            },
            "mangled_name": "__Z11onReloadGPUv",
            "name": "onReloadGPU",
            "nodes": [
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 21724,
                            "col": 20,
                            "line": 730
                        },
                        "end": {
                            "char": 25685,
                            "col": 2,
                            "line": 863
                        }
                    },
                    "text": "{\n\n\tonUnloadGPU();\n\n\tsimpleShader.readFiles(\"simple.vert.glsl\", \"simple.frag.glsl\");\n\tobjectShader.readFiles(\"object.vert.glsl\", \"object.frag.glsl\");\n\tsegmentShader.readFiles(\"segment.vert.glsl\", \"segment.frag.glsl\");\n\tparticleShader.readFiles(\"particle.vert.glsl\", \"particle.frag.glsl\");\n\tlandShader.readFiles(\"land.vert.glsl\", \"land.frag.glsl\");\n\theightMeshShader.readFiles(\"hmesh.vert.glsl\", \"hmesh.frag.glsl\");\n\tdeferShader.readFiles(\"defer.vert.glsl\", \"defer.frag.glsl\");\n\tdebugShader.readFiles(\"debug.vert.glsl\", \"debug.frag.glsl\");\n\t\n\tquadMesh.dest_changed();\n\n\ttableVAO.bind();\n\ttableVBO.bind();\n\ttableVBO.submit(&tableObj.vertices[0], sizeof(Vertex) * tableObj.vertices.size());\n\ttableEBO.submit(&tableObj.indices[0], tableObj.indices.size());\n\ttableEBO.bind();\n\ttableVAO.attr(0, &Vertex::position);\n\ttableVAO.attr(1, &Vertex::normal);\n\ttableVAO.attr(2, &Vertex::texcoord);\n\n\tgridVAO.bind();\n\t{\n\t\tconst int dim = LAND_DIM+1;\n\t\tgridVertices.resize(dim*dim);\n\t\t\n\t\tconst glm::vec3 normalizer = 1.f/glm::vec3(dim, 1.f, dim);\n\n\t\tfor (int i=0, y=0; y<dim; y++) {\n\t\t\tfor (int x=0; x<dim; x++) {\n\t\t\t\tVertex& v = gridVertices[i++];\n\t\t\t\tv.position = glm::vec3(x, 0, y) * normalizer;\n\t\t\t\tv.normal = glm::vec3(0, 1, 0);\n\t\t\t\t// depends whether wrapping or not, divide dim or dim+1?\n\t\t\t\tv.texcoord = glm::vec2(v.position.x, v.position.z);\n\t\t\t}\n\t\t}\n\t\tgridVBO.submit((void *)&gridVertices[0], sizeof(Vertex) * gridVertices.size());\n\n\t\t/*\n\t\t\te.g.: 2x2 squares:\n\t\t\t0 1 2\n\t\t\t3 4 5\n\t\t\t6 7 8\n\n\t\t\tdim = 3x3 vertices\n\t\t\telements = 2x2 squares * 2 tris * 3 verts:\n\t\t\t034 410, 145 521\n\t\t\t367 743, 478 854\n\t\t*/\n\t\tgrid_elements = (dim-1) * (dim-1) * 6;\n\t\tgridElements.resize(grid_elements);\n\t\tint i=0;\n\t\tfor (unsigned int y=0; y<dim-1; y++) {\n\t\t\tfor (unsigned int x=0; x<dim-1; x++) {\n\t\t\t\tunsigned int p00 = (y*dim) + (x);\n\t\t\t\tunsigned int p01 = p00 + 1;\n\t\t\t\tunsigned int p10 = p00 + dim;\n\t\t\t\tunsigned int p11 = p00 + dim + 1;\n\t\t\t\t// tri 1:\n\t\t\t\tgridElements[i++] = p00;\n\t\t\t\tgridElements[i++] = p10;\n\t\t\t\tgridElements[i++] = p11;\n\t\t\t\t// tri 2:\n\t\t\t\tgridElements[i++] = p11;\n\t\t\t\tgridElements[i++] = p01;\n\t\t\t\tgridElements[i++] = p00;\n\t\t\t}\n\t\t}\n\t\tgridEBO.submit(&gridElements[0], gridElements.size());\n\t}\n\n\tgridVBO.bind();\n\tgridEBO.bind();\n\tgridVAO.attr(0, &Vertex::position);\n\tgridVAO.attr(1, &Vertex::normal);\n\tgridVAO.attr(2, &Vertex::texcoord);\n\n\tobjectVAO.bind();\n\tcubeVBO.bind();\n\tobjectVAO.attr(0, 3, GL_FLOAT, sizeof(glm::vec3), 0);\n\tobjectInstancesVBO.bind();\n\tobjectVAO.attr(2, &Object::location, true);\n\tobjectVAO.attr(3, &Object::orientation, true);\n\tobjectVAO.attr(4, &Object::scale, true);\n\tobjectVAO.attr(5, &Object::phase, true);\n\tobjectVAO.attr(6, &Object::color, true);\n\t\t\n\tsegmentVAO.bind();\n\tcubeVBO.bind();\n\tsegmentVAO.attr(0, 3, GL_FLOAT, sizeof(glm::vec3), 0);\n\tsegmentInstancesVBO.bind();\n\tsegmentVAO.attr(2, &Segment::location, true);\n\tsegmentVAO.attr(3, &Segment::orientation, true);\n\tsegmentVAO.attr(4, &Segment::scale, true);\n\tsegmentVAO.attr(5, &Segment::phase, true);\n\tsegmentVAO.attr(6, &Segment::color, true);\n\n\tparticlesVAO.bind();\n\tparticlesVBO.bind();\n\tparticlesVAO.attr(0, &Particle::location);\n\tparticlesVAO.attr(1, &Particle::color);\n\n\tdebugVAO.bind();\n\tdebugVBO.bind();\n\tdebugVAO.attr(0, &DebugDot::location);\n\tdebugVAO.attr(1, &DebugDot::color);\n\n\tlandTex.wrap = GL_CLAMP_TO_EDGE;\n\tdistanceTex.wrap = GL_CLAMP_TO_EDGE;\n\n\t{\n\t\tglGenTextures(1, &colorTex);\n\t\tglBindTexture(GL_TEXTURE_2D, colorTex);\n\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\t\n\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\t\n\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);  \n\t\tglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);  \n\t\t//glTexParameteri( GL_TEXTURE_3D, GL_GENERATE_MIPMAP, GL_TRUE ); \n\t\tglBindTexture(GL_TEXTURE_2D, 0);\n\t}\n\n\tprojFBOs[0].dest_changed();\n\tprojFBOs[1].dest_changed();\n\n\tgBufferVR.dest_changed();\n\tgBufferProj.dest_changed();\n\t\n\tAlice::Instance().hmd->dest_changed();\n\n}"
                }
            ],
            "type": "void ()",
            "type_args": [],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 25687,
                    "col": 1,
                    "line": 865
                },
                "end": {
                    "char": 30289,
                    "col": 2,
                    "line": 999
                }
            },
            "mangled_name": "__Z10draw_sceneii",
            "name": "draw_scene",
            "nodes": [
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 25703,
                            "col": 17,
                            "line": 865
                        },
                        "end": {
                            "char": 25712,
                            "col": 26,
                            "line": 865
                        }
                    },
                    "name": "width",
                    "type": "int"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 25714,
                            "col": 28,
                            "line": 865
                        },
                        "end": {
                            "char": 25724,
                            "col": 38,
                            "line": 865
                        }
                    },
                    "name": "height",
                    "type": "int"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 25726,
                            "col": 40,
                            "line": 865
                        },
                        "end": {
                            "char": 30289,
                            "col": 2,
                            "line": 999
                        }
                    },
                    "text": "{\n\tdouble t = Alice::Instance().simTime;\n\t//console.log(\"%f\", t);\n\n\tdistanceTex.bind(4);\n\tfungusTex.bind(5);\n\tlandTex.bind(6);\n\tfluidTex.bind(7);\n\n\tif (0) {\n\t\tsimpleShader.use();\n\t\tsimpleShader.uniform(\"uViewProjectionMatrix\", viewProjMat);\n\t\ttableVAO.drawElements(tableObj.indices.size());\n\t}\n\n\tif (1) {\n\t\theightMeshShader.use();\n\t\theightMeshShader.uniform(\"uViewProjectionMatrix\", viewProjMat);\n\t\theightMeshShader.uniform(\"uViewProjectionMatrixInverse\", viewProjMatInverse);\n\t\theightMeshShader.uniform(\"uLandMatrix\", world2field);\n\t\theightMeshShader.uniform(\"uLandMatrixInverse\", field2world);\n\t\theightMeshShader.uniform(\"uWorld2Map\", glm::mat4(1.f));\n\t\theightMeshShader.uniform(\"uMapScale\", 1.f);\n\t\theightMeshShader.uniform(\"uDistanceTex\", 4);\n\t\theightMeshShader.uniform(\"uFungusTex\", 5);\n\t\theightMeshShader.uniform(\"uLandTex\", 6);\n\n\t\tglPolygonMode(GL_FRONT_AND_BACK, GL_LINE);\n\t\tgridVAO.drawElements(grid_elements);\n\t\tglPolygonMode(GL_FRONT_AND_BACK, GL_FILL);\n\t}\n\n\t//Mini\n\tif (1) {\n\t\theightMeshShader.use();\n\t\theightMeshShader.uniform(\"uViewProjectionMatrix\", viewProjMat);\n\t\theightMeshShader.uniform(\"uViewProjectionMatrixInverse\", viewProjMatInverse);\n\t\theightMeshShader.uniform(\"uLandMatrix\", world2field);\n\t\theightMeshShader.uniform(\"uLandMatrixInverse\", field2world);\n\t\theightMeshShader.uniform(\"uWorld2Map\", world2minimap);\n\t\theightMeshShader.uniform(\"uMapScale\", minimapScale);\n\t\theightMeshShader.uniform(\"uDistanceTex\", 4);\n\t\theightMeshShader.uniform(\"uFungusTex\", 5);\n\t\theightMeshShader.uniform(\"uLandTex\", 6);\n\n\t\t//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);\n\t\tgridVAO.drawElements(grid_elements);\n\t\tglPolygonMode(GL_FRONT_AND_BACK, GL_FILL);\n\t}\n\n\tif (0) {\n\t\tlandShader.use();\n\t\tlandShader.uniform(\"time\", t);\n\t\tlandShader.uniform(\"uViewProjectionMatrix\", viewProjMat);\n\t\tlandShader.uniform(\"uViewProjectionMatrixInverse\", viewProjMatInverse);\n\t\tlandShader.uniform(\"uNearClip\", near_clip);\n\t\tlandShader.uniform(\"uFarClip\", far_clip);\n\t\tlandShader.uniform(\"uDistanceTex\", 4);\n\t\tlandShader.uniform(\"uFungusTex\", 5);\n\t\tlandShader.uniform(\"uLandTex\", 6);\n\t\tlandShader.uniform(\"uLandMatrix\", world2field);\n\t\tquadMesh.draw();\n\t}\n\n\tdistanceTex.unbind(4);\n\tfungusTex.unbind(5);\n\tlandTex.unbind(6);\n\n\tif (1) {\n\t\tobjectShader.use();\n\t\tobjectShader.uniform(\"time\", t);\n\t\tobjectShader.uniform(\"uViewMatrix\", viewMat);\n\t\tobjectShader.uniform(\"uViewProjectionMatrix\", viewProjMat);\n\t\tobjectShader.uniform(\"uFluidTex\", 7);\n\t\tobjectShader.uniform(\"uFluidMatrix\", world2field);\n\t\tobjectVAO.drawInstanced(sizeof(positions_cube) / sizeof(glm::vec3), NUM_OBJECTS);\n\t}\n\n\tif (1) {\n\t\tsegmentShader.use();\n\t\tsegmentShader.uniform(\"time\", t);\n\t\tsegmentShader.uniform(\"uEyePos\", eyePos);\n\t\tsegmentShader.uniform(\"uMini2World\", mini2world);\n\t\tsegmentShader.uniform(\"uViewMatrix\", viewMat);\n\t\tsegmentShader.uniform(\"uViewProjectionMatrix\", viewProjMat);\n\t\tsegmentVAO.drawInstanced(sizeof(positions_cube) / sizeof(glm::vec3), NUM_SEGMENTS);\n\t}\n\n\tif (0) {\n\t\tparticleShader.use(); \n\t\tparticleShader.uniform(\"time\", t);\n\t\tparticleShader.uniform(\"uViewMatrix\", viewMat);\n\t\tparticleShader.uniform(\"uViewMatrixInverse\", viewMatInverse);\n\t\tparticleShader.uniform(\"uProjectionMatrix\", projMat);\n\t\tparticleShader.uniform(\"uViewProjectionMatrix\", viewProjMat);\n\t\tparticleShader.uniform(\"uViewPortHeight\", (float)height);\n\t\tparticleShader.uniform(\"uPointSize\", particleSize);\n\t\tparticleShader.uniform(\"uColorTex\", 0);\n\n\t\tglActiveTexture(GL_TEXTURE0);\n\t\tglBindTexture(GL_TEXTURE_2D, colorTex);\n\t\tglEnable( GL_PROGRAM_POINT_SIZE );\n\t\tglEnable(GL_POINT_SPRITE);\n\t\tglTexEnvi(GL_POINT_SPRITE, GL_COORD_REPLACE, GL_TRUE);\n\t\tparticlesVAO.draw(NUM_PARTICLES, GL_POINTS);\n\t\tglDisable(GL_VERTEX_PROGRAM_POINT_SIZE);\n\t\tglDisable(GL_POINT_SPRITE);\n\t\tglActiveTexture(GL_TEXTURE0);\n\t\tglBindTexture(GL_TEXTURE_2D, 0);\n\t}\n\n\tif (1) {\n\t\tdebugShader.use(); \n\t\tdebugShader.uniform(\"uViewMatrix\", viewMat);\n\t\tdebugShader.uniform(\"uViewMatrixInverse\", viewMatInverse);\n\t\tdebugShader.uniform(\"uProjectionMatrix\", projMat);\n\t\tdebugShader.uniform(\"uViewProjectionMatrix\", viewProjMat);\n\t\tdebugShader.uniform(\"uViewPortHeight\", (float)height);\n\t\tdebugShader.uniform(\"uPointSize\", particleSize * 2.);\n\t\tdebugShader.uniform(\"uColorTex\", 0);\n\n\t\tglBindTexture(GL_TEXTURE_2D, colorTex);\n\t\tglEnable( GL_PROGRAM_POINT_SIZE );\n\t\tglEnable(GL_POINT_SPRITE);\n\t\tglTexEnvi(GL_POINT_SPRITE, GL_COORD_REPLACE, GL_TRUE);\n\t\tdebugVAO.draw(NUM_DEBUGDOTS, GL_POINTS);\n\t\tglDisable(GL_VERTEX_PROGRAM_POINT_SIZE);\n\t\tglDisable(GL_POINT_SPRITE);\n\t\tglBindTexture(GL_TEXTURE_2D, 0);\n\n\t\tglDisable(GL_CULL_FACE);\n\t}\n\n\tglDisable(GL_CULL_FACE);\n}"
                }
            ],
            "type": "void (int, int)",
            "type_args": [
                "int",
                "int"
            ],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 30291,
                    "col": 1,
                    "line": 1001
                },
                "end": {
                    "char": 31948,
                    "col": 2,
                    "line": 1055
                }
            },
            "mangled_name": "__Z12draw_gbufferR9SimpleFBOR7GBufferN3glm5tvec2IfLNS3_9precisionE0EEES6_",
            "name": "draw_gbuffer",
            "nodes": [
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 30309,
                            "col": 19,
                            "line": 1001
                        },
                        "end": {
                            "char": 30323,
                            "col": 33,
                            "line": 1001
                        }
                    },
                    "name": "fbo",
                    "nodes": [
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 30309,
                                    "col": 19,
                                    "line": 1001
                                },
                                "end": {
                                    "char": 30318,
                                    "col": 28,
                                    "line": 1001
                                }
                            },
                            "name": "struct SimpleFBO",
                            "type": "SimpleFBO"
                        }
                    ],
                    "type": "SimpleFBO &"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 30325,
                            "col": 35,
                            "line": 1001
                        },
                        "end": {
                            "char": 30341,
                            "col": 51,
                            "line": 1001
                        }
                    },
                    "name": "gbuffer",
                    "nodes": [
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 30325,
                                    "col": 35,
                                    "line": 1001
                                },
                                "end": {
                                    "char": 30332,
                                    "col": 42,
                                    "line": 1001
                                }
                            },
                            "name": "struct GBuffer",
                            "type": "GBuffer"
                        }
                    ],
                    "type": "GBuffer &"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 30343,
                            "col": 53,
                            "line": 1001
                        },
                        "end": {
                            "char": 30368,
                            "col": 78,
                            "line": 1001
                        }
                    },
                    "name": "viewport_scale",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 30343,
                                    "col": 53,
                                    "line": 1001
                                },
                                "end": {
                                    "char": 30346,
                                    "col": 56,
                                    "line": 1001
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 30348,
                                    "col": 58,
                                    "line": 1001
                                },
                                "end": {
                                    "char": 30352,
                                    "col": 62,
                                    "line": 1001
                                }
                            },
                            "name": "glm::vec2",
                            "type": "glm::vec2"
                        }
                    ],
                    "type": "glm::vec2"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 30384,
                            "col": 94,
                            "line": 1001
                        },
                        "end": {
                            "char": 30410,
                            "col": 120,
                            "line": 1001
                        }
                    },
                    "name": "viewport_offset",
                    "nodes": [
                        {
                            "ast": "NamespaceRef",
                            "loc": {
                                "begin": {
                                    "char": 30384,
                                    "col": 94,
                                    "line": 1001
                                },
                                "end": {
                                    "char": 30387,
                                    "col": 97,
                                    "line": 1001
                                }
                            },
                            "name": "glm"
                        },
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 30389,
                                    "col": 99,
                                    "line": 1001
                                },
                                "end": {
                                    "char": 30393,
                                    "col": 103,
                                    "line": 1001
                                }
                            },
                            "name": "glm::vec2",
                            "type": "glm::vec2"
                        }
                    ],
                    "type": "glm::vec2"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 30426,
                            "col": 136,
                            "line": 1001
                        },
                        "end": {
                            "char": 31948,
                            "col": 2,
                            "line": 1055
                        }
                    },
                    "text": "{\n\n\tfbo.begin();\n\tglScissor(\n\t\tfbo.dim.x*viewport_offset.x, \n\t\tfbo.dim.y*viewport_offset.y, \n\t\tfbo.dim.x*viewport_scale.x, \n\t\tfbo.dim.y*viewport_scale.y);\n\tglViewport(\n\t\tfbo.dim.x*viewport_offset.x, \n\t\tfbo.dim.y*viewport_offset.y, \n\t\tfbo.dim.x*viewport_scale.x, \n\t\tfbo.dim.y*viewport_scale.y);\n\tglEnable(GL_DEPTH_TEST);\n\tglClearColor(0.f, 0.f, 0.f, 1.0f);\n\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\t{\n\t\tgbuffer.bindTextures(); // 0,1,2\n\t\tdistanceTex.bind(4);\n\t\tfungusTex.bind(5);\n\t\tdensityTex.bind(6);\n\t\tfluidTex.bind(7);\n\n\t\tdeferShader.use();\n\t\tdeferShader.uniform(\"gColor\", 0);\n\t\tdeferShader.uniform(\"gNormal\", 1);\n\t\tdeferShader.uniform(\"gPosition\", 2);\n\t\tdeferShader.uniform(\"uDistanceTex\", 4);\n\t\tdeferShader.uniform(\"uFungusTex\", 5);\n\t\tdeferShader.uniform(\"uDensityTex\", 6);\n\t\tdeferShader.uniform(\"uFluidTex\", 7);\n\n\t\tdeferShader.uniform(\"uViewMatrix\", viewMat);\n\t\tdeferShader.uniform(\"uViewProjectionMatrixInverse\", viewProjMatInverse);\n\t\tdeferShader.uniform(\"uFluidMatrix\", world2field);\n\t\tdeferShader.uniform(\"uNearClip\", near_clip);\n\t\tdeferShader.uniform(\"uFarClip\", far_clip);\n\t\t\n\t\tdeferShader.uniform(\"time\", Alice::Instance().simTime);\n\t\tdeferShader.uniform(\"uDim\", glm::vec2(gbuffer.dim.x, gbuffer.dim.y));\n\t\tdeferShader.uniform(\"uTexScale\", viewport_scale);\n\t\tdeferShader.uniform(\"uTexOffset\", viewport_offset);\n\t\t\n\t\tquadMesh.draw();\n\n\t\tdeferShader.unuse();\n\t\t\n\t\tdistanceTex.unbind(4);\n\t\tfungusTex.unbind(5);\n\t\tdensityTex.unbind(6);\n\t\tfluidTex.unbind(7);\n\t\tgbuffer.unbindTextures();\n\t}\n\tfbo.end();\n}"
                }
            ],
            "type": "void (SimpleFBO &, GBuffer &, glm::vec2, glm::vec2)",
            "type_args": [
                "SimpleFBO &",
                "GBuffer &",
                "glm::vec2",
                "glm::vec2"
            ],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 31950,
                    "col": 1,
                    "line": 1057
                },
                "end": {
                    "char": 52834,
                    "col": 2,
                    "line": 1670
                }
            },
            "mangled_name": "__Z7onFramejj",
            "name": "onFrame",
            "nodes": [
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 31963,
                            "col": 14,
                            "line": 1057
                        },
                        "end": {
                            "char": 31977,
                            "col": 28,
                            "line": 1057
                        }
                    },
                    "name": "width",
                    "nodes": [
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 31963,
                                    "col": 14,
                                    "line": 1057
                                },
                                "end": {
                                    "char": 31971,
                                    "col": 22,
                                    "line": 1057
                                }
                            },
                            "name": "uint32_t",
                            "type": "uint32_t"
                        }
                    ],
                    "type": "uint32_t"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 31979,
                            "col": 30,
                            "line": 1057
                        },
                        "end": {
                            "char": 31994,
                            "col": 45,
                            "line": 1057
                        }
                    },
                    "name": "height",
                    "nodes": [
                        {
                            "ast": "TypeRef",
                            "loc": {
                                "begin": {
                                    "char": 31979,
                                    "col": 30,
                                    "line": 1057
                                },
                                "end": {
                                    "char": 31987,
                                    "col": 38,
                                    "line": 1057
                                }
                            },
                            "name": "uint32_t",
                            "type": "uint32_t"
                        }
                    ],
                    "type": "uint32_t"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 31996,
                            "col": 47,
                            "line": 1057
                        },
                        "end": {
                            "char": 52834,
                            "col": 2,
                            "line": 1670
                        }
                    },
                    "text": "{\n\tAlice& alice = Alice::Instance();\n\tdouble t = alice.simTime;\n\tfloat dt = alice.dt;\n\tfloat aspect = gBufferVR.dim.x / (float)gBufferVR.dim.y;\n\tCloudDevice& kinect0 = alice.cloudDeviceManager.devices[0];\n\tCloudDevice& kinect1 = alice.cloudDeviceManager.devices[1];\n\n\n\tif (alice.framecount % 60 == 0) console.log(\"fps %f at %f; fluid %f(%f) sim %f(%f) wxh %dx%d %f\", alice.fpsAvg, t, fluidThread.fps.fps, fluidThread.potentialFPS(), simThread.fps.fps, simThread.potentialFPS(), width, height, dt);\n\n\n\t// for now, just create two teleport points:0\n\tstate->debugdots[0].location = transform(world2minimap, glm::vec3(20., 1., 37.)); //beside mountain\n\tstate->debugdots[1].location = transform(world2minimap, glm::vec3(4., 1., 13.)); //land_coord\n\tstate->debugdots[2].location = transform(world2minimap, glm::vec3(60., 2., 13.)); //land_coord\n\tstate->debugdots[2].location = transform(world2minimap, glm::vec3(34.5, 17., 33.)); //top of mountain\n\t\n\t// later, figure out how to place teleport points in viable locations\n\t/*\n\tint div = sqrt(NUM_DEBUGDOTS);\n\tfor (int i=0; i<NUM_DEBUGDOTS; i++) {\n\n\t\tauto& o = state->debugdots[i];\n\t\tfloat x = (i / div) / float(div);\n\t\tfloat z = (i % div) / float(div);\n\n\t\t// normalized coordinate (0..1)\n\t\tglm::vec3 norm = glm::vec3(x, 0, z); //transform(world2field, o.location);\n\t\t//glm::vec3 norm = transform(world2minimap, o.location);\n\n\t\t// get land data at this point:\n\t\t// xyz is normal, w is height\n\t\tglm::vec4 landpt = al_field2d_readnorm_interp(glm::vec2(land_dim.x, land_dim.z), state->land, glm::vec2(norm.x, norm.z));\n\n\t\t// if flatness == 1, land is horizontal. \n\t\t// if flatness == 0, land is vertical.\n\t\tfloat flatness = fabsf(landpt.y); // simplified dot product of landnorm with (0,1,0)\n\t\t// make it more extreme\n\t\tflatness = powf(flatness, 2.f);\t\t\t\t\n\n\t\t// get land surface coordinate:\n\t\tglm::vec3 land_coord = transform(field2world, glm::vec3(norm.x, landpt.w, norm.z)); \n\t\t\n\t\t\n\t\tif (flatness == 1) {\n\t\t\t// place on land\n\t\t\to.location = transform(world2minimap,land_coord);\n\t\t\t//state->debugdots[1].location = transform(world2minimap, glm::vec3(20., 1., 37.)); //land_coord\n\t\t\t//state->debugdots[2].location = transform(world2minimap, glm::vec3(4., 1., 13.)); //land_coord\n\t\t\to.color = glm::vec3(flatness, 0.5, 1. - flatness); //glm::vec3(0, 0, 1);\n\t\t}\n\n\t\t//glm::vec3 handCoor = transform(world2minimap, hand.palmPos);\n\t\n\t\t\n\t\t//console.log(\"O: %f %f %f\", o.location.x, o.location.y, o.location.z);\n\t\t//console.log(\"%f %f %f\", state->objects[1].location.x, state->objects[1].location.y, state->objects[1].location.z);\n\t\t///console.log(\"%f %f %f\", handCoor.x, handCoor.y, handCoor.z);\n\n\t\t\t//auto& oo = state->debugdots[3];\n\n\t\t\t\n\n\t\t//console.log(\"%f %f %f\", o.location.x, o.location.y, o.location.z);\n\t\t//console.log(\"%f %f %f\", hand.palmPos.x, hand.palmPos.y, hand.palmPos.z);\n\t}\n\t*/\n\tif (true && alice.leap->isConnected) {\n\t\t//console.log(\"leap connected!\");\n\t\t// copy bones into debugdots\n\t\tglm::mat4 trans = viewMatInverse * leap2view;\n\n\t\tint num_ray_dots = 64;\n\t\tint num_hand_dots = 5*4;\n\n\t\tfor (int h=0; h<2; h++) {\n\t\n\t\t\tint d = NUM_TELEPORT_POINTS + h * (num_hand_dots + num_ray_dots);\n\t\t\tauto& hand = alice.leap->hands[h];\n\t\t\t\n\t\t\tglm::vec3 mapPos = vrLocation + glm::vec3(0., 1., 0.);\n\t\t\tglm::vec3 head2map = mapPos - headPos;\n\n\t\t\tglm::vec2 head2map_horiz = glm::vec2(head2map.x, head2map.z);\n\t\t\tfloat dist2map_squared = glm::dot(head2map_horiz, head2map_horiz);\n\n\t\t\tfloat m = 0.005f / dist2map_squared;\n\n\t\t\tminimapScale = glm::mix(minimapScale, m, dt*3.f);\n\n\t\t\tglm::vec3 midPoint = (world_min + world_max)/2.f;\n\t\t\t\tmidPoint.y = 0;\n\t\t\tworld2minimap = \n\t\t\t\t\tglm::translate(glm::vec3(mapPos)) * \n\t\t\t\t\tglm::scale(glm::vec3(minimapScale)) *\n\t\t\t\t\tglm::translate(-midPoint);\n\t\t\t\n\t\t\tif (hand.pinch == 1) {\n\t\t\t\tvrLocation = glm::vec3(20., 1., 37.);\n\t\t\t\t//vrLocation = state->objects[1].location + glm::vec3(0., 0.5, 0.);\n\t\t\t\tif (hand.palmPos == state->debugdots[1].location) {\n\t\t\t\t\tvrLocation = glm::vec3(20., 1., 37.);\n\t\t\t\t\t}\n\t\t\t} \n\n\n\t\t\t//if (dist2map_squared < 0.4f) {\n\t\t\t\t//Show spots you can move to\n\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t//}\n\n\t\t\t\t\n\n\n\t\t\t\n\n\t\t\t/*\n\t\t\tif (h == 0) {\n\t\t\t\tif (hand.normal.y >= 0.4f) {\n\n\t\t\t\tglm::vec3 mapPos = transform(trans, hand.palmPos);\n\t\t\t\t//console.log(\"hand normal\");\n\t\t\t\tglm::vec3 midPoint = (world_min + world_max)/2.f;\n\t\t\t\tmidPoint.y = 0;\n\n\t\t\t\tworld2minimap = \n\t\t\t\t\tglm::translate(glm::vec3(mapPos)) * \n\t\t\t\t\tglm::scale(glm::vec3(minimapScale)) *\n\t\t\t\t\tglm::translate(-midPoint) *\n\t\t\t\t\tglm::mat4(1.0f);\n\t\t\t\t\tconsole.log(\"%f %f %f\", (mapPos.x), (mapPos.y), (mapPos.z));\n\n\t\t\t\t} else {\n\t\t\t\t\t//console.log(\"No hand normal\");\n\t\t\t\t\t//world2minimap = glm::scale(glm::vec3(0.f));\n\t\t\t\t}\n\n\t\t\t}*/\n\n\t\t\t//glm::vec3 col = (hand.id % 2) ?  glm::vec3(1, 0, hand.pinch) :  glm::vec3(0, 1, hand.pinch);\n\t\t\tfloat cf = fmod(hand.id / 6.f, 1.f);\n\t\t\tglm::vec3 col = glm::vec3(cf, 1.-cf, h);\n\t\t\tif (!hand.isVisible) {\n\t\t\t\tcol = glm::vec3(0.2);\n\t\t\t};\n\n\t\t\tfor (int f=0; f<5; f++) {\n\t\t\t\tauto& finger = hand.fingers[f];\n\t\t\t\tfor (int b=0; b<4; b++) {\n\t\t\t\t\tauto& bone = finger.bones[b];\n\t\t\t\t\t\n\t\t\t\t\tif (hand.isVisible) state->debugdots[d].location = transform(trans, bone.center);\n\t\t\t\t\tstate->debugdots[d].color = col;\n\n\t\t\t\t\td++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//get hand position and direction and cast ray forward until it hits land\n\t\t\tglm::vec3 handPos = hand.palmPos;\n\t\t\tglm::vec3 handDir = hand.direction;\n\n\t\t\t//glm::vec3 handNormall = glm::vec3(0.,1.,0.);\n\n\t\t\t// these are in 'leap' space, need to convert to world space\n\t\t\thandPos = transform(trans, handPos);\n\t\t\thandDir = transform(trans, handDir);\n\n\t\t\tauto a = hand.fingers[3].bones[0].center;\n\t\t\tauto b = hand.fingers[3].bones[1].center;\n\n\t\t\ta = transform(trans, a);\n\t\t\tb = transform(trans, b);\n\n\n\t\t\thandDir = glm::normalize(b - a);\n\t\t\t//handDir = safe_normalize(glm::mix(handDir, glm::vec3(0,1,0), 0.25));\n\t\t\thandPos = a;\n\n\t\t\tauto rotaxis = safe_normalize(glm::cross(handDir, glm::vec3(0, 1, 0)));\n\t\t\tauto warp = glm::rotate(-0.1f, rotaxis);\n\n\t\t\tglm::vec3 p = a;\n\n\t\t\t/*\n\t\t\tfor (int i=0; i<num_ray_dots; i++) {\n\t\t\t\tglm::vec3 loc = state->debugdots[d].location;\n\t\t\t\t//loc = p;\n\t\t\t\tif (hand.isVisible) state->debugdots[d].location = glm::mix(loc, p, 0.2f);\n\t\t\t\tp = loc;\n\n\t\t\t\t//handDir = safe_normalize(transform(warp, handDir));\n\t\t\t\thandDir = safe_normalize(glm::mix(handDir, glm::vec3(0, -1, 0), 0.1f));\n\n\t\t\t\tauto norm = transform(world2field, p);\n\t\t\t\tfloat dist = al_field3d_readnorm_interp(land_dim, state->distance, norm);\n\n\t\t\t\t// distance in world coordinates:\n\t\t\t\t//float dist_w = field2world_scale * dist;\n\n\t\t\t\tp = p + 0.01f * handDir;\n\n\t\t\t\tfloat c = 0.01;\n\t\t\t\tc = c / (c + dist);\n\t\t\t\tstate->debugdots[d].color = glm::vec3(c, 0.5, 1. - c);\n\t\t\t\tif (dist <= 0) break;\n\n\t\t\t\td++;\n\t\t\t}\n\t\t\t*/\n\t\t}\n\t}\n\n\n\tif (alice.isSimulating && isRunning) {\n\t\t// keep the simulation in here to absolute minimum\n\t\t// since it detracts from frame rate\n\t\t// here we should only be extrapolating visible features\n\t\t// such as location (and maybe also orientation?)\n\n\t\tif (1) {\n\n\t\t\tfor (int i=0; i<NUM_PARTICLES; i++) {\n\t\t\t\tParticle &o = state->particles[i];\n\t\t\t\to.location = o.location + o.velocity * dt;\n\t\t\t\to.location = wrap(o.location, world_min, world_max);\n\t\t\t}\n\t\t\n\t\t\tfor (int i=0; i<NUM_OBJECTS; i++) {\n\t\t\t\tauto &o = state->objects[i];\n\t\t\t\t// TODO: dt-ify this:\t\n\t\t\t\t\n\t\t\t\to.location = wrap(o.location + o.velocity * dt, world_min, world_max);\n\n\t\t\t\tglm::vec3 norm = transform(world2field, o.location);\n\t\t\t\tauto landpt = al_field2d_readnorm_interp(glm::vec2(land_dim), state->land, glm::vec2(norm.x, norm.z));\n\t\t\t\to.location = transform(field2world, glm::vec3(norm.x, landpt.w, norm.z));\n\n\t\t\t\to.phase += dt;\n\t\t\t}\n\n\t\t\tfor (int i=0; i<NUM_SEGMENTS; i++) {\n\t\t\t\tauto &o = state->segments[i];\n\t\t\t\tif (i % PREDATOR_SEGMENTS_EACH == 0) {\n\t\t\t\t\t// a root;\n\t\t\t\t\t// TODO: dt-ify\n\t\t\t\t\to.orientation = safe_normalize(glm::slerp(o.orientation, o.orientation * quat_random(), 0.015f));\n\t\t\t\t\to.location = wrap(o.location + o.velocity * dt, world_min, world_max);\n\t\t\t\t\to.phase += dt;\n\t\t\t\t} else {\n\t\t\t\t\tauto& p = state->segments[i-1];\n\t\t\t\t\to.orientation = safe_normalize(glm::slerp(o.orientation, p.orientation, 0.015f));\n\t\t\t\t\tglm::vec3 uz = quat_uz(p.orientation);\n\t\t\t\t\to.location = p.location + uz*o.scale;\n\t\t\t\t\to.phase = p.phase + 0.1f;\n\t\t\t\t\t//o.phase += dt;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//change mode to have object[0], segement[0], or nothing in focus\n\t\t\t//float oScale = state->objects[0].scale;\n\t\t\t//console.log(\"%f\", oScale);\n\n\n\t\t\tint speciesCount = 6;\n\t\t\tspeciesCount++;\n\t\t\tif(debugMode % speciesCount == 1){\n\t\t\t\tstate->objects[0].location = world_centre;\n\t\t\t\tstate->objects[0].scale = 2.0;\n\t\t\t\tstate->segments[0].scale = 2.5;\n\t\t\t\t//console.log(\"Creature 1\");\n\t\t\t}else if(debugMode % speciesCount == 2){\n\t\t\t\tstate->objects[1].location = world_centre;\n\t\t\t\tstate->objects[1].scale = 2.0;\n\t\t\t\tstate->objects[0].scale = 1.0;\n\t\t\t\tstate->segments[0].scale = 2.5;\n\t\t\t\t//console.log(\"Creature 2\");\n\t\t\t}else if(debugMode % speciesCount == 3){\n\t\t\t\tstate->objects[2].location = world_centre;\n\t\t\t\tstate->objects[2].scale = 2.0;\n\t\t\t\tstate->objects[1].scale = 1.0;\n\t\t\t\tstate->segments[0].scale = 2.5;\n\t\t\t\t//console.log(\"Creature 3\");\n\t\t\t}else if(debugMode % speciesCount == 4){\n\t\t\t\tstate->objects[3].location = world_centre;\n\t\t\t\tstate->objects[3].scale = 2.0;\n\t\t\t\tstate->objects[2].scale = 1.0;\n\t\t\t\tstate->segments[0].scale = 2.5;\n\t\t\t\t//console.log(\"Creature 4\");\n\t\t\t}else if(debugMode % speciesCount == 5){\n\t\t\t\tstate->objects[4].location = world_centre;\n\t\t\t\tstate->objects[4].scale = 2.0;\n\t\t\t\tstate->objects[3].scale = 1.0;\n\t\t\t\tstate->segments[0].scale = 2.5;\n\t\t\t\t//console.log(\"Creature 5\");\n\t\t\t}else if(debugMode % speciesCount == 6){\n\t\t\t\tstate->segments[0].location = world_centre;\n\t\t\t\tstate->segments[0].scale = 5.0;\n\t\t\t\tstate->objects[4].scale = 1.0;\n\t\t\t\tstate->objects[0].scale = 1.0;\n\t\t\t}else{\n\t\t\t\tstate->segments[0].scale = 2.5;\n\t\t\t\tstate->objects[0].scale = 1.0;\n\t\t\t}\n\t\t}\n\t\t\n\n\t\t// upload VBO data to GPU:\n\t\tobjectInstancesVBO.submit(&state->objects[0], sizeof(state->objects));\n\t\tsegmentInstancesVBO.submit(&state->segments[0], sizeof(state->segments));\n\t\tparticlesVBO.submit(&state->particles[0], sizeof(state->particles));\n\t\tdebugVBO.submit(&state->debugdots[0], sizeof(state->debugdots));\n\t\t\n\t\t// upload texture data to GPU:\n\t\t//fluidTex.submit(fluid.velocities.dim(), (glm::vec3 *)fluid.velocities.front()[0]);\n\t\tfluidTex.submit(field_dim, state->fluidpod.velocities.front());\n\t\tdensityTex.submit(field_dim, state->density_back);\n\t\tfungusTex.submit(glm::ivec2(FUNGUS_DIM, FUNGUS_DIM), &state->fungus[0]);\n\t\tlandTex.submit(glm::ivec2(LAND_DIM, LAND_DIM), &state->land[0]);\n\t\tdistanceTex.submit(land_dim, (float *)&state->distance[0]);\n\t\t\n\t\t//if (alice.cloudDevice->use_colour) {\n\t\t\tconst CloudDevice& cd = alice.cloudDeviceManager.devices[flip];\n\t\t\tconst ColourFrame& image = cd.colourFrame();\n\t\t\tglActiveTexture(GL_TEXTURE0);\n\t\t\tglBindTexture(GL_TEXTURE_2D, colorTex);\n\t\t\tglTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, cColorWidth, cColorHeight, 0, GL_RGB, \n\t\t\tGL_UNSIGNED_BYTE, image.color);\n\t\t//}\n\t}\n\n\t\n\tfor (int i=0; i<2; i++) {\n\t\tSimpleFBO& fbo = projFBOs[i];\n\n\n\t\t// move K-world points to inhabitat-world points:\n\t\t//kinect0.cloudTransform\n\t\tglm::vec3 ksc;\n\t\tglm::quat kro;\n\t\tglm::vec3 ktr;\n\t\tglm::vec3 ksk;\n\t\tglm::vec4 kpe;\n\t\tglm::decompose(kinect0.cloudTransform, ksc, kro, ktr, ksk, kpe);\n\t\tkro = glm::conjugate(kro);\n\n\t\tglm::vec3 p = ktr; //glm::vec3(kinect0.cloudTransform[3]); // translation component, ==\n\t\t//console.log(\"p %f %f %f\", p.x, p.y, p.z);\n\n\t\tglm::mat3 r = glm::mat3(kinect0.cloudTransform);\n\t\t//r = glm::normalize(r); // remove scale\n\n\n\t\tglm::quat kq = kro;//glm::normalize(glm::quat_cast(glm::inverse(kinect0.cloudTransform)));\n\t\t//console.log(\"kq %f %f %f %f\", kq.w, kq.x, kq.y, kq.z);\n\n\t\tglm::quat q = glm::quat();\n\t\t//extraglmq = gl\n\n\t//  frustum -0.0631 0.0585 -0.038 0.038 0.1 10\n\t\tglm::quat proj_quat = //glm::quat(0.002566, -0.026639, -0.017277, 0.999493);\n\t\t\tglm::quat(0.999493, 0.002566, -0.026639, -0.017277);\n\t\t\t//glm::angleAxis(float(M_PI/-2.), glm::vec3(1, 0, 0)) * glm::angleAxis(float(M_PI/-2.), glm::vec3(0, 0, 1));\n\t\t//console.log(\"proj_quat %f %f %f %f\", proj_quat.w, proj_quat.x, proj_quat.y, proj_quat.z);\n\t\t\n\t\t// pos of projector, in space of kinect0\n\t\tglm::vec3 proj_pos = glm::vec3(-0.135, -0.263, 0.317);\n\t\t\n\t\tglm::mat4 k2proj = (glm::mat4_cast(proj_quat)) * glm::translate(-proj_pos * kinect2world_scale);\n\t\tviewMat = glm::inverse(\n\t\t\tglm::translate(p) * glm::mat4_cast(kro) // kinect viewpoint\n\t\t\t* (k2proj)\n\t\t);\n\n\t\t/*\n\t\t\tkinect0.cloudTransform captures how the kinect space transforms into world space\n\n\t\t\twe want to render the world from the POV of the kinect, but at the scale of the world\n\t\t\tPOV p we can get via transform(kinect0.cloudTransform, glm::vec3(0.f));\n\t\t*/\n\n\t\t// let this define the view matrix:\n\t\t//viewMat = glm::inverse(kinect0.cloudTransform);\n\n\t\t//viewMat = kinect0.cloudTransform * glm::translate(-proj_pos);\n\t\t//viewMat = glm::inverse(viewMat);\n\t\t\t\n\t\tprojMat = glm::frustum(-0.0631f, 0.0585f, -0.038f, 0.038f, 0.1f, far_clip);\n\t\t\t\t//glm::perspective(glm::radians(60.0f), aspect, near_clip, far_clip);\n\t\t\n\t\tviewProjMat = projMat * viewMat;\n\t\tprojMatInverse = glm::inverse(projMat);\n\t\tviewMatInverse = glm::inverse(viewMat);\n\t\tviewProjMatInverse = glm::inverse(viewProjMat);\n\t\t\n\t\t// draw the scene into the GBuffer:\n\t\tglEnable(GL_SCISSOR_TEST);\n\t\tgBufferProj.begin();\n\t\t\tglScissor(0, 0, gBufferProj.dim.x, gBufferProj.dim.y);\n\t\t\tglViewport(0, 0, gBufferProj.dim.x, gBufferProj.dim.y);\n\t\t\tglEnable(GL_DEPTH_TEST);\n\t\t\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\t\t\tdraw_scene(gBufferProj.dim.x, gBufferProj.dim.y);\n\t\tgBufferProj.end();\n\t\t//glGenerateMipmap(GL_TEXTURE_2D); // not sure if we need this\n\t\tdraw_gbuffer(fbo, gBufferProj, glm::vec2(1.f), glm::vec2(0.f));\n\t\tglDisable(GL_SCISSOR_TEST);\n\t}\n\t\n\tHmd& vive = *alice.hmd;\n\tSimpleFBO& fbo = vive.fbo;\n\tif (width && height) {\n\t\tif (vive.connected) {\t\n\t\t\t\t\n\t\t\tvive.near_clip = near_clip;\n\t\t\tvive.far_clip = far_clip;\t\n\t\t\tvive.update();\n\t\t\tglEnable(GL_SCISSOR_TEST);\n\n\t\t\t//vrLocation = state->objects[1].location + glm::vec3(0., 1., 0.);\n\n\t\t\t// get head position in world space:\n\t\t\theadPos = vive.mTrackedPosition + vrLocation;\n\n\t\t\tfor (int eye = 0; eye < 2; eye++) {\n\t\t\t\t// update nav\n\t\t\t\tviewMat = glm::inverse(vive.m_mat4viewEye[eye]) * glm::mat4_cast(glm::inverse(vive.mTrackedQuat)) * glm::translate(glm::mat4(1.f), -vive.mTrackedPosition) * glm::translate(-vrLocation);\n\t\t\t\t/*\n\t\t\t\tprojMat = glm::frustum(vive.frustum[eye].l, vive.frustum[eye].r, vive.frustum[eye].b, vive.frustum[eye].t, vive.frustum[eye].n, vive.frustum[eye].f);\n\t\t\t\t*/\n\n\t\t\t\tprojMat = vive.mProjMatEye[eye];\n\n\t\t\t\tviewProjMat = projMat * viewMat;\n\t\t\t\tprojMatInverse = glm::inverse(projMat);\n\t\t\t\tviewMatInverse = glm::inverse(viewMat);\n\t\t\t\tviewProjMatInverse = glm::inverse(viewProjMat);\n\n\t\t\t\tglm::vec2 viewport_scale = glm::vec2(0.5f, 1.f);\n\t\t\t\tglm::vec2 viewport_offset = glm::vec2(eye*0.5f, 0.f);\n\n\t\t\t\tgBufferVR.begin();\n\n\t\t\t\t\tviewport.pos = glm::ivec2(gBufferVR.dim.x * viewport_offset.x, gBufferVR.dim.y * viewport_offset.y);\n\t\t\t\t\tviewport.dim = glm::ivec2(gBufferVR.dim.x * viewport_scale.x, gBufferVR.dim.y * viewport_scale.y);\n\n\t\t\t\t\t//console.log(\"eye %d vp %d %d %d %d\", eye, viewport.pos.x, viewport.pos.y, viewport.dim.x, viewport.dim.y);\n\n\t\t\t\t\tglScissor(\n\t\t\t\t\t\tviewport.pos.x, \n\t\t\t\t\t\tviewport.pos.y, \n\t\t\t\t\t\tviewport.dim.x, \n\t\t\t\t\t\tviewport.dim.y);\n\t\t\t\t\tglViewport(\n\t\t\t\t\t\tviewport.pos.x, \n\t\t\t\t\t\tviewport.pos.y, \n\t\t\t\t\t\tviewport.dim.x, \n\t\t\t\t\t\tviewport.dim.y);\n\t\t\t\t\tglEnable(GL_DEPTH_TEST);\n\t\t\t\t\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\n\t\t\t\t\tdraw_scene(viewport.dim.x, viewport.dim.y);\n\t\t\t\tgBufferVR.end();\n\n\t\t\t\t//glGenerateMipmap(GL_TEXTURE_2D); // not sure if we need this\n\t\t\t\tdraw_gbuffer(fbo, gBufferVR, viewport_scale, viewport_offset);\n\t\t\t}\n\t\t\tglDisable(GL_SCISSOR_TEST);\n\t\t} else {\n\t\t\t\n\t\t\tswitch (camMode){\n\t\t\t\tcase 0: {\n\t\t\t\t\t// WASD mode:\n\t\t\t\t\tfloat camera_turnangle = 1.f;\n\t\t\t\t\tfloat camera_speed_default = 4.f;\n\t\t\t\t\tfloat camera_speed_fast = camera_speed_default * 3.f;\n\t\t\t\t\tfloat camera_speed;\n\t\t\t\t\tif(camFast) camera_speed = camera_speed_fast;\n\t\t\t\t\telse camera_speed = camera_speed_default;\n\n\t\t\t\t\t// move camera:\n\t\t\t\t\tcameraLoc += quat_rotate(cameraOri, camVel) * (camera_speed * dt);\n\t\t\t\t\t// wrap to world:\n\t\t\t\t\tcameraLoc = wrap(cameraLoc, world_min, world_max);\n\n\t\t\t\t\t// stick to floor:\n\t\t\t\t\tglm::vec3 norm = transform(world2field, cameraLoc);\n\t\t\t\t\tglm::vec4 landpt = al_field2d_readnorm_interp(glm::vec2(land_dim), state->land, glm::vec2(norm.x, norm.z));\n\t\t\t\t\tcameraLoc = transform(field2world, glm::vec3(norm.x, landpt.w, norm.z)) ;\n\t\t\t\n\t\t\t\t\t// rotate camera:\n\t\t\t\t\tcameraOri = safe_normalize(cameraOri * glm::angleAxis(camera_turnangle * dt, camTurn));\n\t\t\t\t\t// now orient to floor:\n\t\t\t\t\tglm::vec3 up = glm::vec3(landpt);\n\t\t\t\t\tup = glm::mix(up, glm::vec3(0,1,0), 0.5);\n\t\t\t\t\tcameraOri = align_up_to(cameraOri, glm::normalize(up));\n\n\t\t\t\t\t// now create view matrix:\n\t\t\t\t\tglm::vec3 boom = glm::vec3(0., 1.7, 1.7);\n\t\t\t\t\t//glm::vec3 boom = glm::vec3(0.);\n\t\t\t\t\tviewMat = glm::inverse(glm::translate(cameraLoc) * glm::mat4_cast(cameraOri) * glm::translate(boom));\n\t\t\t\t\tprojMat = glm::perspective(glm::radians(110.0f), aspect, near_clip, far_clip);\n\t\t\t\t\t//console.log(\"Cam Mode 0 Active\");\n\t\t\t\t\n\t\t\t\t} break;\n\t\t\t\tcase 1: {\n\t\t\t\t\t// follow a creature mode:\n\t\t\t\t\tauto& o = state->objects[objSelMod];\n\n\t\t\t\t\tglm::vec3 fluidloc = transform(world2field, o.location);\n\t\t\t\t\tglm::vec3 flow = al_field3d_readnorm_interp(field_dim, state->fluidpod.velocities.front(), fluidloc);\n\t\t\t\t\tflow = flow * dt * 100.0f;\n\t\t\t\t\t\n\t\t\t\t\tcameraLoc = glm::mix(cameraLoc, o.location + flow, 0.1f);\n\t\t\t\t\tcameraOri = glm::slerp(cameraOri, o.orientation, 0.01f);\n\t\t\t\t\t//TODO: Once creatures follow the ground, fix boom going into the earth\n\t\t\t\t\t\n\t\t\t\t\tauto boom = glm::vec3(0., o.scale*2.f, o.scale*4.);\n\t\t\t\t\tviewMat = glm::inverse(glm::translate(cameraLoc) * glm::mat4_cast(cameraOri) * glm::translate(boom));\n\t\t\t\t\tprojMat = glm::perspective(glm::radians(75.0f), aspect, near_clip, far_clip);\n\t\t\t\t\n\t\t\t\t} break;\n\t\t\t\tcase 2: {\n\t\t\t\t\t// follow a predator\n\t\t\t\t\tdouble a = M_PI * t / 30.;\n\t\t\t\t\tauto& o = state->segments[0];\n\n\t\t\t\t\tglm::vec3 fluidloc = transform(world2field, o.location);\n\t\t\t\t\tglm::vec3 flow = al_field3d_readnorm_interp(field_dim, state->fluidpod.velocities.front(), fluidloc);\n\t\t\t\t\tflow = flow * dt * 100.0f;\n\t\t\t\t\t\n\t\t\t\t\tcameraLoc = glm::mix(cameraLoc, o.location + flow, 0.1f);\n\t\t\t\t\tcameraOri = glm::slerp(cameraOri, o.orientation, 0.01f);\n\t\t\t\t\t//TODO: Once creatures follow the ground, fix boom going into the earth\n\n\t\t\t\t\tauto boom = glm::vec3(0., o.scale*2.f, o.scale*4.);\n\t\t\t\t\tviewMat = glm::inverse(glm::translate(cameraLoc) * glm::mat4_cast(cameraOri) * glm::translate(boom));\n\t\t\t\t\tprojMat = glm::perspective(glm::radians(75.0f), aspect, near_clip, far_clip);\n\t\t\t\t\n\t\t\t\t} break;\n\t\t\t\tdefault: {\n\t\t\t\t\t// orbit around\n\t\t\t\t\tfloat a = M_PI * t / 30.;\n\t\t\t\t\t/*\n\t\t\t\t\tviewMat = glm::lookAt(\n\t\t\t\t\t\tworld_centre + \n\t\t\t\t\t\tglm::vec3(0.5*sin(t), 0.85*sin(0.5*a), 4.*sin(a)), \n\t\t\t\t\t\tworld_centre, \n\t\t\t\t\t\tglm::vec3(0., 1., 0.));\n\t\t\t\t\t*/\n\t\t\t\t\tglm::quat newori = glm::angleAxis(a, glm::vec3(0,1,0));\n\t\t\t\t\tglm::vec3 newloc = world_centre + (quat_uz(cameraOri))*40.f;\n\n\t\t\t\t\tcameraLoc = glm::mix(cameraLoc, newloc, 0.1f);\n\t\t\t\t\tcameraOri = glm::slerp(cameraOri, newori, 0.01f);\n\n\t\t\t\t\tviewMat = glm::inverse(glm::translate(cameraLoc) * glm::mat4_cast(cameraOri));\n\t\t\t\t\tprojMat = glm::perspective(glm::radians(75.0f), aspect, near_clip, far_clip);\n\t\t\t\t\t//console.log(\"Default Cam mode Active\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tviewMat = viewMat * glm::scale(glm::vec3(mini2world));\n\t\t\tviewProjMat = projMat * viewMat;\n\t\t\tprojMatInverse = glm::inverse(projMat);\n\t\t\tviewMatInverse = glm::inverse(viewMat);\n\t\t\tviewProjMatInverse = glm::inverse(viewProjMat);\n\n\t\t\t// draw the scene into the GBuffer:\n\t\t\tglEnable(GL_SCISSOR_TEST);\n\t\t\tgBufferVR.begin();\n\t\t\t\n\t\t\t\t// No HMD:\n\t\t\t\tglScissor(0, 0, gBufferVR.dim.x, gBufferVR.dim.y);\n\t\t\t\tglViewport(0, 0, gBufferVR.dim.x, gBufferVR.dim.y);\n\t\t\t\tglEnable(GL_DEPTH_TEST);\n\t\t\t\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\t\t\t\tdraw_scene(gBufferVR.dim.x, gBufferVR.dim.y);\n\t\t\n\t\t\tgBufferVR.end();\n\t\t\t//glGenerateMipmap(GL_TEXTURE_2D); // not sure if we need this\n\n\t\t\t// now process the GBuffer and render the result into the fbo\n\t\t\tdraw_gbuffer(alice.hmd->fbo, gBufferVR, glm::vec2(1.f), glm::vec2(0.f));\n\t\t\tglDisable(GL_SCISSOR_TEST);\n\t\t}\n\t} \n\t\t\n\talice.hmd->submit();\n\tglFlush(); glFinish();\n\n\n\tglViewport(0, 0, width, height);\n\tglEnable(GL_DEPTH_TEST);\n\tglClearColor(0.f, 0.f, 0.f, 1.0f);\n\tglClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n\tif (soloView) {\n\t\tswitch (soloView) {\n\t\t\tcase 1: fbo.draw(); break;\n\t\t\tcase 2: projFBOs[0].draw(); break;\n\t\t\tcase 3: projFBOs[1].draw(); break;\n\t\t\tdefault: soloView = 0;\n\t\t}\n\t} else {\n\t\tprojFBOs[0].draw(glm::vec2(0.5f), glm::vec2( 0.5, -0.5));\n\t\tprojFBOs[1].draw(glm::vec2(0.5f), glm::vec2(-0.5, -0.5));\n\n\t\tfbo.draw(glm::vec2(0.5f), glm::vec2(-0.5,  0.5));\n\t}\n}"
                }
            ],
            "type": "void (uint32_t, uint32_t)",
            "type_args": [
                "uint32_t",
                "uint32_t"
            ],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 52837,
                    "col": 1,
                    "line": 1673
                },
                "end": {
                    "char": 54690,
                    "col": 2,
                    "line": 1762
                }
            },
            "mangled_name": "__Z10onKeyEventiiibbbb",
            "name": "onKeyEvent",
            "nodes": [
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 52853,
                            "col": 17,
                            "line": 1673
                        },
                        "end": {
                            "char": 52864,
                            "col": 28,
                            "line": 1673
                        }
                    },
                    "name": "keycode",
                    "type": "int"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 52866,
                            "col": 30,
                            "line": 1673
                        },
                        "end": {
                            "char": 52878,
                            "col": 42,
                            "line": 1673
                        }
                    },
                    "name": "scancode",
                    "type": "int"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 52880,
                            "col": 44,
                            "line": 1673
                        },
                        "end": {
                            "char": 52890,
                            "col": 54,
                            "line": 1673
                        }
                    },
                    "name": "downup",
                    "type": "int"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 52892,
                            "col": 56,
                            "line": 1673
                        },
                        "end": {
                            "char": 52902,
                            "col": 66,
                            "line": 1673
                        }
                    },
                    "name": "shift",
                    "type": "bool"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 52904,
                            "col": 68,
                            "line": 1673
                        },
                        "end": {
                            "char": 52913,
                            "col": 77,
                            "line": 1673
                        }
                    },
                    "name": "ctrl",
                    "type": "bool"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 52915,
                            "col": 79,
                            "line": 1673
                        },
                        "end": {
                            "char": 52923,
                            "col": 87,
                            "line": 1673
                        }
                    },
                    "name": "alt",
                    "type": "bool"
                },
                {
                    "ast": "ParmDecl",
                    "loc": {
                        "begin": {
                            "char": 52925,
                            "col": 89,
                            "line": 1673
                        },
                        "end": {
                            "char": 52933,
                            "col": 97,
                            "line": 1673
                        }
                    },
                    "name": "cmd",
                    "type": "bool"
                },
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 52934,
                            "col": 98,
                            "line": 1673
                        },
                        "end": {
                            "char": 54690,
                            "col": 2,
                            "line": 1762
                        }
                    },
                    "text": "{\n\tAlice& alice = Alice::Instance();\n\n\tswitch(keycode) {\n\t\tcase GLFW_KEY_0:\n\t\tcase GLFW_KEY_1:\n\t\tcase GLFW_KEY_2:\n\t\tcase GLFW_KEY_3:\n\t\tcase GLFW_KEY_4:\n\t\tcase GLFW_KEY_5:\n\t\tcase GLFW_KEY_6:\n\t\tcase GLFW_KEY_7:\n\t\tcase GLFW_KEY_8:\n\t\tcase GLFW_KEY_9: {\n\t\t\tint num = keycode - GLFW_KEY_0;\n\t\t\tif (downup) {\n\t\t\t\tsoloView = (soloView != num) ? num : 0;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\t\tcase GLFW_KEY_ENTER: {\n\t\t\tif (downup && alt) {\n\t\t\t\tif (alice.hmd->connected) {\n\t\t\t\t\talice.hmd->disconnect();\n\t\t\t\t} else if (alice.hmd->connect()) {\n\t\t\t\t\tgBufferVR.dim = alice.hmd->fbo.dim;\n\t\t\t\t\tgBufferVR.dest_changed();\n\t\t\t\t\talice.hmd->dest_changed();\n\t\t\t\t\talice.desiredFrameRate = 90;\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\n\t\t// ? key to switch debug modes\n\t\tcase GLFW_KEY_SLASH: {\n\t\t\t//console.log(\"D was pressed\");\n\t\t\tif (downup) debugMode++;\n\t\t} break;\n\t\t\n\t\tcase GLFW_KEY_C: {\n\t\t\tif (downup) { \n\t\t\t\tcamMode = (camMode+1) % camModeMax;\n\t\t\t\tconsole.log(\"Cam mode %d\", camMode);\n\t\t\t}\n\t\t} break;\n\n\t\tcase GLFW_KEY_F: {\n\t\t\tif(downup){\n\t\t\t\tobjectSel++;\n\t\t\t\tobjSelMod = objectSel % 5;\n\t\t\t}\n\t\t} break;\n\n\t\tcase GLFW_KEY_LEFT_SHIFT: {\n\t\t\tif (downup) camFast = true;\n\t\t\telse camFast = false;\n\t\t\tbreak;\n\t\t}\n\n\t\t// WASD+arrows for nav:\n\t\tcase GLFW_KEY_UP:\n\t\tcase GLFW_KEY_W:\n\t\t\tif (downup) camVel.z = -1.f; \n\t\t\telse camVel.z = 0.f; \n\t\t\tbreak;\n\t\tcase GLFW_KEY_DOWN:\n\t\tcase GLFW_KEY_S:\n\t\t\tif (downup) camVel.z =  1.f; \n\t\t\telse camVel.z = 0.f; \n\t\t\tbreak;\n\t\tcase GLFW_KEY_RIGHT:\n\t\t\tif (downup) camTurn.y = -1.f; \n\t\t\telse camTurn.y = 0.f; \n\t\t\tbreak;\n\t\tcase GLFW_KEY_LEFT:\n\t\t\tif (downup) camTurn.y =  1.f; \n\t\t\telse camTurn.y = 0.f; \n\t\t\tbreak;\n\t\tcase GLFW_KEY_A:\n\t\t\tif (downup) camVel.x = -1.f; \n\t\t\telse camVel.x = 0.f; \n\t\t\tbreak;\n\t\tcase GLFW_KEY_D:\n\t\t\tif (downup) camVel.x =  1.f; \n\t\t\telse camVel.x = 0.f; \n\t\t\tbreak;\n\t\n\t}\n\n}"
                }
            ],
            "type": "void (int, int, int, bool, bool, bool, bool)",
            "type_args": [
                "int",
                "int",
                "int",
                "bool",
                "bool",
                "bool",
                "bool"
            ],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 54693,
                    "col": 1,
                    "line": 1765
                },
                "end": {
                    "char": 54892,
                    "col": 2,
                    "line": 1772
                }
            },
            "mangled_name": "__Z13threads_beginv",
            "name": "threads_begin",
            "nodes": [
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 54714,
                            "col": 22,
                            "line": 1765
                        },
                        "end": {
                            "char": 54892,
                            "col": 2,
                            "line": 1772
                        }
                    },
                    "text": "{\n\tconsole.log(\"starting threads\");\n\t// allow threads to run\n\tisRunning = true;\n\tsimThread.begin(sim_update);\n\tfluidThread.begin(fluid_update);\n\tconsole.log(\"started threads\");\n}"
                }
            ],
            "type": "void ()",
            "type_args": [],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 54894,
                    "col": 1,
                    "line": 1774
                },
                "end": {
                    "char": 55058,
                    "col": 2,
                    "line": 1781
                }
            },
            "mangled_name": "__Z11threads_endv",
            "name": "threads_end",
            "nodes": [
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 54913,
                            "col": 20,
                            "line": 1774
                        },
                        "end": {
                            "char": 55058,
                            "col": 2,
                            "line": 1781
                        }
                    },
                    "text": "{\n\t// release threads:\n\tisRunning = false;\n\tconsole.log(\"ending threads\");\n\tsimThread.end();\n\tfluidThread.end();\n\tconsole.log(\"ended threads\");\n}"
                }
            ],
            "type": "void ()",
            "type_args": [],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "comment": {
                "text": "// The onReset event is triggered when pressing the \"Backspace\" key in Alice"
            },
            "loc": {
                "begin": {
                    "char": 55137,
                    "col": 1,
                    "line": 1784
                },
                "end": {
                    "char": 60298,
                    "col": 2,
                    "line": 1978
                }
            },
            "mangled_name": "__Z7onResetv",
            "name": "onReset",
            "nodes": [
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 55152,
                            "col": 16,
                            "line": 1784
                        },
                        "end": {
                            "char": 60298,
                            "col": 2,
                            "line": 1978
                        }
                    },
                    "text": "{\n\n\tthreads_end();\n\n\t// zero by default:\n\tmemset(state, 0, sizeof(State));\n\n\tstate->fluidpod.reset();\n\n\tfor (int i=0; i<NUM_OBJECTS; i++) {\n\t\tauto& o = state->objects[i];\n\t\to.location = world_centre+glm::ballRand(10.f);\n\t\to.color = glm::mix(glm::ballRand(1.f)*0.5f+0.5f, glm::vec3(0.3, 0.2, 0.8), 0.5f);\n\t\to.phase = rnd::uni();\n\t\to.scale = 1.;\n\t\to.accel = glm::vec3(0.f);\n\t}\n\tfor (int i=0; i<NUM_SEGMENTS; i++) {\n\t\tauto& o = state->segments[i];\n\t\to.location = world_centre+glm::ballRand(10.f);\n\t\to.color = glm::ballRand(1.f)*0.5f+0.5f;\n\t\to.phase = rnd::uni();\n\t\to.scale = 2.5;\n\t}\n\tfor (int i=0; i<NUM_PARTICLES; i++) {\n\t\tauto& o = state->particles[i];\n\t\to.location = world_centre+glm::ballRand(10.f);\n\t\to.color = glm::vec3(1.f);\n\t}\n\n\n\t{\n\t\tint i=0;\n\t\tglm::ivec2 dim = glm::ivec2(FUNGUS_DIM, FUNGUS_DIM);\n\t\tfor (size_t y=0;y<dim.y;y++) {\n\t\t\tfor (size_t x=0;x<dim.x;x++) {\n\t\t\t\tstate->fungus[i] = rnd::uni();\n\t\t\t\tstate->fungus_old[i] = rnd::uni();\n\t\t\t}\n\t\t}\n\t}\n\n\t//al_field3d_zero(field_dim, state->density);\n\t{\n\t\tint i=0;\n\t\tglm::ivec3 dim = field_dim;\n\t\tfor (size_t z=0;z<dim.z;z++) {\n\t\t\tfor (size_t y=0;y<dim.y;y++) {\n\t\t\t\tfor (size_t x=0;x<dim.x;x++) {\n\t\t\t\t\tglm::vec3 coord = glm::vec3(x, y, z);\n\t\t\t\t\tglm::vec3 norm = coord/glm::vec3(dim);\n\t\t\t\t\t//glm::vec3 snorm = norm*2.f-1.f;\n\t\t\t\t\t//glm::vec3 snormhalf = snorm * 0.5f;\n\t\t\t\t\tstate->density[i] = glm::vec3(0.f);//norm * 0.000001f;\n\t\t\t\t\tstate->density_back[i] = state->density[i];\n\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/*\n\t\tCreate the initial landscape:\n\t*/\n\t{\t\n\t\tint i=0;\n\t\tglm::ivec2 dim2 = glm::ivec2(LAND_DIM, LAND_DIM);\n\t\tfor (size_t y=0;y<dim2.y;y++) {\n\t\t\tfor (size_t x=0;x<dim2.x;x++, i++) {\n\t\t\t\tglm::vec2 coord = glm::vec2(x, y);\n\t\t\t\tglm::vec2 norm = coord/glm::vec2(dim2);\n\t\t\t\tglm::vec2 snorm = norm*2.f-1.f;\n\n\t\t\t\tfloat w = 0.f;\n\n\t\t\t\tglm::vec2 p = snorm;\n\t\t\t\t//w += pow((cos(M_PI * p.x)+1.)*(cos(M_PI * p.y)+1.)*0.25, 0.5);\n\n\t\t\t\tp = p * 2.f;\n\t\t\t\tp += glm::vec2(0.234f, 0.567f);\n\t\t\t\tp = glm::rotate(p, 2.f);\n\t\t\t\tw += pow((cos(M_PI * p.x)+1.)*(cos(M_PI * p.y)+1.)*0.25, 0.5) * 0.5;\n\n\n\t\t\t\tp = p * 2.f;\n\t\t\t\tp += glm::vec2(0.234f, 0.567f);\n\t\t\t\tp = glm::rotate(p, 2.f);\n\t\t\t\tw += pow((cos(M_PI * p.x)+1.)*(cos(M_PI * p.y)+1.)*0.25, 0.5) * 0.25;\n\n\t\t\t\tp = p * 2.f;\n\t\t\t\tp += glm::vec2(0.234f, 0.567f);\n\t\t\t\tp = glm::rotate(p, 2.f);\n\t\t\t\tw += pow((cos(M_PI * p.x)+1.)*(cos(M_PI * p.y)+1.)*0.25, 0.5) * 0.125;\n\n\t\t\t\tp = p * glm::length(snorm);\n\t\t\t\tp += glm::vec2(0.234f, 0.567f);\n\t\t\t\tp = glm::rotate(p, 2.f);\n\t\t\t\tw += pow((cos(M_PI * p.x)+1.)*(cos(M_PI * p.y)+1.)*0.25, 0.5) * 0.125;\n\n\n\t\t\t\tw *= pow((cos(M_PI * snorm.x)+1.1)*(cos(M_PI * snorm.y)+1.1)*0.25, 0.35);\n\n\n\t\t\t\tw = glm::max(w - 0.2f, 0.f);\n\n\t\t\t\tstate->land[i].w = w * 0.3 + 0.01;\n\t\t\t}\n\t\t}\n\t}\n\t{\n\t\t// generate SDF from state->land height:\n\t\tint i=0;\n\t\tglm::ivec3 dim = glm::ivec3(LAND_DIM, LAND_DIM, LAND_DIM);\n\t\tglm::ivec2 dim2 = glm::ivec2(LAND_DIM, LAND_DIM);\n\t\tfor (size_t z=0;z<dim.z;z++) {\n\t\t\tfor (size_t y=0;y<dim.y;y++) {\n\t\t\t\tfor (size_t x=0;x<dim.x;x++) {\n\t\t\t\t\tglm::vec3 coord = glm::vec3(x, y, z);\n\t\t\t\t\tglm::vec3 norm = coord/glm::vec3(dim);\n\t\t\t\t\t\n\t\t\t\t\tint ii = al_field2d_index(dim2, glm::ivec2(x, z));\n\t\t\t\t\tfloat w = state->land[ ii ].w;\n\n\t\t\t\t\tstate->distance[i] = norm.y < w ? -1. : 1.;\n\t\t\t\t\tstate->distance_binary[i] = state->distance[i] < 0.f ? 0.f : 1.f;\n\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsdf_from_binary(land_dim, state->distance_binary, state->distance);\n\t\t//sdf_from_binary_deadreckoning(land_dim, state->distance_binary, state->distance);\n\t\tal_field3d_scale(land_dim, state->distance, 1.f/land_dim.x);\n\t}\n\t{\n\t\t// generate state->land normals:\n\t\tint i=0;\n\t\tglm::ivec2 dim2 = glm::ivec2(LAND_DIM, LAND_DIM);\n\t\tfor (size_t y=0;y<dim2.y;y++) {\n\t\t\tfor (size_t x=0;x<dim2.x;x++, i++) {\n\t\t\t\tglm::vec2 coord = glm::vec2(x, y);\n\t\t\t\tglm::vec2 norm = coord/glm::vec2(dim2);\n\t\t\t\tglm::vec2 snorm = norm*2.f-1.f;\n\n\t\t\t\tfloat w = state->land[i].w;\n\n\t\t\t\tglm::vec3 norm3 = glm::vec3(norm.x, w, norm.y);\n\n\t\t\t\tglm::vec3 normal = sdf_field_normal4(land_dim, state->distance, norm3, 1.f/LAND_DIM);\n\t\t\t\tstate->land[i] = glm::vec4(normal, w);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (1) {\n\t\tint div = sqrt(NUM_DEBUGDOTS);\n\t\tfor (int i=0; i<NUM_DEBUGDOTS; i++) {\n\t\t\tauto& o = state->debugdots[i];\n\t\t\t\n\t\t\tfloat x = (i / div) / float(div);\n\t\t\tfloat z = (i % div) / float(div);\n\t\t\t\n\t\t\t//o.location = glm::linearRand(world_min, world_max);\n\n\t\t\t// normalized coordinate (0..1)\n\t\t\tglm::vec3 norm = glm::vec3(x, 0, z); //transform(world2field, o.location);\n\n\t\t\t// get land data at this point:\n\t\t\t// xyz is normal, w is height\n\t\t\tglm::vec4 landpt = al_field2d_readnorm_interp(glm::vec2(land_dim.x, land_dim.z), state->land, glm::vec2(norm.x, norm.z));\n\t\t\t\n\t\t\t// if flatness == 1, land is horizontal. \n\t\t\t// if flatness == 0, land is vertical.\n\t\t\tfloat flatness = fabsf(landpt.y); // simplified dot product of landnorm with (0,1,0)\n\t\t\t// make it more extreme\n\t\t\tflatness = powf(flatness, 2.f);\t\t\t\t\n\n\t\t\t// get land surface coordinate:\n\t\t\tglm::vec3 land_coord = transform(field2world, glm::vec3(norm.x, landpt.w, norm.z));\n\t\t\t\n\t\t\t// place on land\n\t\t\to.location = land_coord;\n\n\t\t\to.color = glm::vec3(flatness, 0.5, 1. - flatness); //glm::vec3(0, 0, 1);\n\t\t}\n\t}\n\n\n\n\tonReloadGPU();\n\n\tthreads_begin();\n}"
                }
            ],
            "type": "void ()",
            "type_args": [],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 60300,
                    "col": 1,
                    "line": 1980
                },
                "end": {
                    "char": 61290,
                    "col": 2,
                    "line": 2022
                }
            },
            "mangled_name": "__Z4testv",
            "name": "test",
            "nodes": [
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 60312,
                            "col": 13,
                            "line": 1980
                        },
                        "end": {
                            "char": 61290,
                            "col": 2,
                            "line": 2022
                        }
                    },
                    "text": "{\n\t\n\t// try loading a jxf:\n\t// \"projector_calibration/\"\n\t//console.log(\"%s\", cwd());\n\n\tconst char * fname = \"projector_calibration/chesspoints_all.jxf\";\n    FILE* filp = fopen(fname, \"rb\" );\n    if (!filp) { \n\t\tconsole.error(\"Error: could not open file %s\", fname);  \n\t}\n\tconsole.log(\"opened %s ok\", fname);\n\n\tJXFHeader header;\n\tint bytes_read = fread(&header, sizeof(char), sizeof(header), filp);\n\tconsole.log(\"read %d ok of %d\", bytes_read, sizeof(header));\n\n\t// need to BE->LE this:\n\theader.container_id = SWAP32(header.container_id);\n\theader.form_id = SWAP32(header.form_id);\n\theader.version_id = SWAP32(header.version_id);\n\theader.matrix_id = SWAP32(header.matrix_id);\n\n\n\theader.filesize = SWAP32(header.filesize);\n\n\tif (header.container_id != 'FORM' \n\t\t|| header.form_id != 'JIT!'\n\t\t|| header.version_id != 'FVER'\n\t\t|| header.matrix_id != 'MTRX'\n\t) {\n\t\tconsole.error(\"bad chunk\");\n\t\tgoto out;\n\t}\n\t\n\n\tconsole.log(\"filesize %d\", header.filesize);\n\t\n\n\t\n\tout:\n\tfclose(filp);\n}"
                }
            ],
            "type": "void ()",
            "type_args": [],
            "type_ret": "void"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 61320,
                    "col": 15,
                    "line": 2026
                },
                "end": {
                    "char": 63314,
                    "col": 6,
                    "line": 2092
                }
            },
            "mangled_name": "_onload",
            "name": "onload",
            "nodes": [
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 61333,
                            "col": 28,
                            "line": 2026
                        },
                        "end": {
                            "char": 63314,
                            "col": 6,
                            "line": 2092
                        }
                    },
                    "text": "{\n\n\t\ttest();\n    \t\n\t\tAlice& alice = Alice::Instance();\n\n\t\tconsole.log(\"onload\");\n\t\tconsole.log(\"sim alice %p\", &alice);\n\n\t\t// import/allocate state\n\t\tstate = statemap.create(\"state.bin\", true);\n\t\tconsole.log(\"sim state %p should be size %d\", state, sizeof(State));\n\t\t//state_initialize();\n\t\tconsole.log(\"onload state initialized\");\n\n\n\t\tonReset();\n\t\t\n\t\tprojFBOs[0].dim.x = projFBOs[1].dim.x = 1920;\n\t\tprojFBOs[0].dim.y = projFBOs[1].dim.y = 1080;\n\n\t\tthreads_begin();\n\n\t\t// how to convert the normalized coordinates of the fluid (0..1) into positions in the world:\n\t\t// this effectively defines the bounds of the fluid in the world:\n\t\t// from transform(field2world(glm::vec3(0.)))\n\t\t// to   transform(field2world(glm::vec3(1.)))\n\t\tfield2world_scale = world_max.x - world_min.x;\n\t\tfield2world = glm::scale(glm::vec3(field2world_scale));\n\t\t// how to convert world positions into normalized texture coordinates in the fluid field:\n\t\tworld2field = glm::inverse(field2world);\n\n\t\t//vive2world = glm::rotate(float(M_PI/2), glm::vec3(0,1,0)) * glm::translate(glm::vec3(-40.f, 0.f, -30.f));\n\t\t\t//glm::rotate(M_PI/2., glm::vec3(0., 1., 0.));\n\t\tleap2view = glm::rotate(float(M_PI * -0.26), glm::vec3(1, 0, 0));\n\n\t\tworld2minimap = glm::scale(glm::vec3(0.f));\n\n\t\tconsole.log(\"onload fluid initialized\");\n\t\n\t\tgBufferVR.dim = glm::ivec2(512, 512);\n\t\t//alice.hmd->connect();\n\t\tif (alice.hmd->connected) {\n\t\t\talice.desiredFrameRate = 90;\n\t\t\tgBufferVR.dim = alice.hmd->fbo.dim;\n\t\t} else if (isPlatformWindows()) {\n\t\t\tgBufferVR.dim.x = 1920;\n\t\t\tgBufferVR.dim.y = 1080;\n\t\t\t//alice.streamer->init(gBuffer.dim);\n\t\t}\n\t\tconsole.log(\"gBuffer dim %d x %d\", gBufferVR.dim.x, gBufferVR.dim.y);\n\n\t\t// allocate on GPU:\n\t\tonReloadGPU();\n\t\t\n\t\tconsole.log(\"onload onReloadGPU ran\");\n\n\t\t// register event handlers \n\t\talice.onFrame.connect(onFrame);\n\t\talice.onReloadGPU.connect(onReloadGPU);\n\t\talice.onReset.connect(onReset);\n\n\t\talice.onKeyEvent.connect(onKeyEvent);\n\t\talice.window.position(45, 45);\n\n\t\treturn 0;\n    }"
                }
            ],
            "type": "int ()",
            "type_args": [],
            "type_ret": "int"
        },
        {
            "ast": "FunctionDecl",
            "loc": {
                "begin": {
                    "char": 63334,
                    "col": 15,
                    "line": 2094
                },
                "end": {
                    "char": 63872,
                    "col": 6,
                    "line": 2116
                }
            },
            "mangled_name": "_onunload",
            "name": "onunload",
            "nodes": [
                {
                    "ast": "CompoundStmt",
                    "loc": {
                        "begin": {
                            "char": 63349,
                            "col": 30,
                            "line": 2094
                        },
                        "end": {
                            "char": 63872,
                            "col": 6,
                            "line": 2116
                        }
                    },
                    "text": "{\n\t\tAlice& alice = Alice::Instance();\n\n\t\tthreads_end();\n\n    \t// free resources:\n    \tonUnloadGPU();\n\t\tconsole.log(\"unloaded GPU\");\n    \t\n    \t// unregister handlers\n    \talice.onFrame.disconnect(onFrame);\n    \talice.onReloadGPU.disconnect(onReloadGPU);\n\t\talice.onReset.disconnect(onReset);\n\t\talice.onKeyEvent.disconnect(onKeyEvent);\n\t\tconsole.log(\"disconnected events\");\n    \t\n    \t// export/free state\n    \tstatemap.destroy(true);\n\t\tconsole.log(\"let go of map\");\n\t\n\t\tconsole.log(\"onunload done.\");\n        return 0;\n    }"
                }
            ],
            "type": "int ()",
            "type_args": [],
            "type_ret": "int"
        }
    ]
}
