{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 On the back burner: parsing a .js or cpp file and generating an AST and/or CFG, and create a control-flow diagram. Perhaps this control flow diagram could be what graham describes as the patcher. \
\
\
\
\
Anything that has a global variable in its scope (thus having a relationship with at least one other function/section of the document) is placed in a code card. \
	- so, cards have connections because they share variables which are already global.\
\
	a graph\'92s edge could be a function call\'85:\
\
	[card_a]\'97\'971\'97\'97>[card_b]: where 1 is \'91card_b()\'92\
\
	or a variable:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	[card_a]<\'97\'972\'97\'97>[card_b]: where 2 is \'91var creatureSize\'92\
		**Note that variable edges could be any/all directions to indicate which function is acting on the other, AND perhaps an edge could be clicked to expand when it includes both a function call to card_b, and a callback to return data to card_a}